diff --git a/src/cpp/r/include/r/session/RConsoleHistory.hpp b/src/cpp/r/include/r/session/RConsoleHistory.hpp
index ef16c68..7ccb23d 100644
--- a/src/cpp/r/include/r/session/RConsoleHistory.hpp
+++ b/src/cpp/r/include/r/session/RConsoleHistory.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/utility.hpp>
 #include <boost/circular_buffer.hpp>
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 
 #include <core/json/Json.hpp>
 
@@ -44,7 +44,7 @@ class ConsoleHistory : boost::noncopyable
 public:
    typedef boost::circular_buffer<std::string>::value_type value_type;
    typedef boost::circular_buffer<std::string>::const_iterator const_iterator;
-   typedef boost::signal<void (const std::string&)> AddSignal;
+   typedef boost::signals2::signal<void (const std::string&)> AddSignal;
 
 private:
    ConsoleHistory();
@@ -86,7 +86,7 @@ public:
    core::Error loadFromFile(const core::FilePath& filePath, bool verifyFile);
    core::Error saveToFile(const core::FilePath& filePath) const;
    
-   boost::signals::connection connectOnAdd(
+   boost::signals2::connection connectOnAdd(
                                  const AddSignal::slot_function_type& slot)
    {
       return onAdd_.connect(slot);
diff --git a/src/cpp/r/include/r/session/RGraphics.hpp b/src/cpp/r/include/r/session/RGraphics.hpp
index 8c98435..e6eab35 100644
--- a/src/cpp/r/include/r/session/RGraphics.hpp
+++ b/src/cpp/r/include/r/session/RGraphics.hpp
@@ -56,7 +56,7 @@ struct is_error_code_enum<rstudio::r::session::graphics::errc::errc_t>
 #include <vector>
 
 #include <boost/function.hpp>
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 
 #include <core/Error.hpp>
 #include <core/json/Json.hpp>
@@ -156,7 +156,7 @@ public:
    virtual void clear() = 0;
 
    // subscribe to showManipulator event
-   virtual boost::signal<void ()>& onShowManipulator() = 0;
+   virtual boost::signals2::signal<void ()>& onShowManipulator() = 0;
 
    // set manipulator values
    virtual void setPlotManipulatorValues(const core::json::Object& values) = 0;
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp b/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
index 20d98ae..925a1d3 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
@@ -539,7 +539,7 @@ void PlotManager::clear()
 
 
 
-boost::signal<void ()>& PlotManager::onShowManipulator()
+boost::signals2::signal<void ()>& PlotManager::onShowManipulator()
 {
    return plotManipulatorManager().onShowManipulator();
 }
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp b/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
index 40466d8..ca9b517 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
@@ -22,7 +22,7 @@
 #include <boost/utility.hpp>
 #include <boost/shared_ptr.hpp>
 #include <boost/function.hpp>
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 #include <boost/regex.hpp>
 #include <boost/circular_buffer.hpp>
 
@@ -45,10 +45,10 @@ PlotManager& plotManager();
 
 struct GraphicsDeviceEvents
 {
-   boost::signal<void (SEXP)> onNewPage; 
-   boost::signal<void ()> onDrawing;
-   boost::signal<void ()> onResized;
-   boost::signal<void ()> onClosed;
+   boost::signals2::signal<void (SEXP)> onNewPage; 
+   boost::signals2::signal<void ()> onDrawing;
+   boost::signals2::signal<void ()> onResized;
+   boost::signals2::signal<void ()> onClosed;
 };
 
 class PlotManipulatorManager;
@@ -110,7 +110,7 @@ public:
    
    virtual void clear();
 
-   virtual boost::signal<void ()>& onShowManipulator() ;
+   virtual boost::signals2::signal<void ()>& onShowManipulator() ;
    virtual void setPlotManipulatorValues(const core::json::Object& values);
    virtual void manipulatorPlotClicked(int x, int y);
 
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
index fdc3bf1..5870879 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
@@ -184,7 +184,7 @@ Error PlotManipulatorManager::initialize(
 }
 
 
-boost::signal<void ()>& PlotManipulatorManager::onShowManipulator()
+boost::signals2::signal<void ()>& PlotManipulatorManager::onShowManipulator()
 {
    return onShowManipulator_;
 }
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
index 8657959..7241522 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
@@ -16,7 +16,7 @@
 #ifndef R_SESSION_GRAPHICS_PLOT_MANIPULATOR_MANAGER_HPP
 #define R_SESSION_GRAPHICS_PLOT_MANIPULATOR_MANAGER_HPP
 
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 
 #include <core/Error.hpp>
 #include <core/json/Json.hpp>
@@ -53,7 +53,7 @@ public:
 public:
    core::Error initialize(const UnitConversionFunctions& convert);
 
-   boost::signal<void ()>& onShowManipulator() ;
+   boost::signals2::signal<void ()>& onShowManipulator() ;
    void setPlotManipulatorValues(const core::json::Object& values);
    void manipulatorPlotClicked(int x, int y);
    
@@ -85,7 +85,7 @@ private:
    bool replayingManipulator_;
 
    // manipulator event hook
-   boost::signal<void ()> onShowManipulator_;
+   boost::signals2::signal<void ()> onShowManipulator_;
 
    // unit conversion function
    UnitConversionFunctions convert_;
diff --git a/src/cpp/server/include/server/ServerSessionManager.hpp b/src/cpp/server/include/server/ServerSessionManager.hpp
index 87342b1..8a92ac2 100644
--- a/src/cpp/server/include/server/ServerSessionManager.hpp
+++ b/src/cpp/server/include/server/ServerSessionManager.hpp
@@ -20,7 +20,7 @@
 #include <vector>
 #include <map>
 
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 
 #include <core/Thread.hpp>
 
diff --git a/src/cpp/session/SessionMain.cpp b/src/cpp/session/SessionMain.cpp
index 9da981c..44d67dd 100644
--- a/src/cpp/session/SessionMain.cpp
+++ b/src/cpp/session/SessionMain.cpp
@@ -33,7 +33,7 @@
 #include <boost/lexical_cast.hpp>
 #include <boost/format.hpp>
 
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/join.hpp>
diff --git a/src/cpp/session/SessionModuleContext.cpp b/src/cpp/session/SessionModuleContext.cpp
index 9f26641..dd60dcf 100644
--- a/src/cpp/session/SessionModuleContext.cpp
+++ b/src/cpp/session/SessionModuleContext.cpp
@@ -19,7 +19,7 @@
 
 #include <boost/assert.hpp>
 #include <boost/utility.hpp>
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 #include <boost/format.hpp>
 #include <boost/numeric/conversion/cast.hpp>
 
@@ -514,13 +514,13 @@ private:
    
    int nextGroup_; 
    
-   boost::signal<void(const r::session::RSuspendOptions&,Settings*),
-                 boost::last_value<void>,
+   boost::signals2::signal<void(const r::session::RSuspendOptions&,Settings*),
+                 boost::signals2::last_value<void>,
                  int,
                  std::less<int> > suspendSignal_;
                   
-   boost::signal<void(const Settings&),
-                 boost::last_value<void>,
+   boost::signals2::signal<void(const Settings&),
+                 boost::signals2::last_value<void>,
                  int,
                  std::greater<int> > resumeSignal_;
 };
diff --git a/src/cpp/session/include/session/SessionConsoleProcess.hpp b/src/cpp/session/include/session/SessionConsoleProcess.hpp
index 5f1d5c0..581e34d 100644
--- a/src/cpp/session/include/session/SessionConsoleProcess.hpp
+++ b/src/cpp/session/include/session/SessionConsoleProcess.hpp
@@ -18,7 +18,7 @@
 #include <queue>
 
 #include <boost/regex.hpp>
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 #include <boost/circular_buffer.hpp>
 #include <boost/enable_shared_from_this.hpp>
 
@@ -122,7 +122,7 @@ public:
    void setPromptHandler(
          const boost::function<bool(const std::string&, Input*)>& onPrompt);
 
-   boost::signal<void(int)>& onExit() { return onExit_; }
+   boost::signals2::signal<void(int)>& onExit() { return onExit_; }
 
    std::string handle() const { return handle_; }
    InteractionMode interactionMode() const { return interactionMode_; }
@@ -184,7 +184,7 @@ private:
    boost::optional<int> exitCode_;
 
    boost::function<bool(const std::string&, Input*)> onPrompt_;
-   boost::signal<void(int)> onExit_;
+   boost::signals2::signal<void(int)> onExit_;
 
 
    // regex for prompt detection
diff --git a/src/cpp/session/include/session/SessionModuleContext.hpp b/src/cpp/session/include/session/SessionModuleContext.hpp
index 283d1f4..7de7ffc 100644
--- a/src/cpp/session/include/session/SessionModuleContext.hpp
+++ b/src/cpp/session/include/session/SessionModuleContext.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/utility.hpp>
 #include <boost/function.hpp>
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 #include <boost/shared_ptr.hpp>
 
 #include <core/HtmlUtils.hpp>
@@ -309,31 +309,31 @@ struct firstNonEmpty
 // session events
 struct Events : boost::noncopyable
 {
-   boost::signal<void (core::json::Object*)> onSessionInfo;
-   boost::signal<void ()>                    onClientInit;
-   boost::signal<void ()>                    onBeforeExecute;
-   boost::signal<void(const std::string&)>   onConsolePrompt;
-   boost::signal<void(const std::string&)>   onConsoleInput;
-   boost::signal<void(const std::string&, const std::string&)>  
+   boost::signals2::signal<void (core::json::Object*)> onSessionInfo;
+   boost::signals2::signal<void ()>                    onClientInit;
+   boost::signals2::signal<void ()>                    onBeforeExecute;
+   boost::signals2::signal<void(const std::string&)>   onConsolePrompt;
+   boost::signals2::signal<void(const std::string&)>   onConsoleInput;
+   boost::signals2::signal<void(const std::string&, const std::string&)>  
                                              onActiveConsoleChanged;
-   boost::signal<void (ConsoleOutputType, const std::string&)>
+   boost::signals2::signal<void (ConsoleOutputType, const std::string&)>
                                              onConsoleOutput;
-   boost::signal<void (ChangeSource)>        onDetectChanges;
-   boost::signal<void (core::FilePath)>      onSourceEditorFileSaved;
-   boost::signal<void(bool)>                 onDeferredInit;
-   boost::signal<void(bool)>                 afterSessionInitHook;
-   boost::signal<void(bool)>                 onBackgroundProcessing;
-   boost::signal<void(bool)>                 onShutdown;
-   boost::signal<void ()>                    onQuit;
-   boost::signal<void (const std::string&)>  onPackageLoaded;
-   boost::signal<void ()>                    onPackageLibraryMutated;
-   boost::signal<void ()>                    onPreferencesSaved;
-   boost::signal<void (const DistributedEvent&)>
+   boost::signals2::signal<void (ChangeSource)>        onDetectChanges;
+   boost::signals2::signal<void (core::FilePath)>      onSourceEditorFileSaved;
+   boost::signals2::signal<void(bool)>                 onDeferredInit;
+   boost::signals2::signal<void(bool)>                 afterSessionInitHook;
+   boost::signals2::signal<void(bool)>                 onBackgroundProcessing;
+   boost::signals2::signal<void(bool)>                 onShutdown;
+   boost::signals2::signal<void ()>                    onQuit;
+   boost::signals2::signal<void (const std::string&)>  onPackageLoaded;
+   boost::signals2::signal<void ()>                    onPackageLibraryMutated;
+   boost::signals2::signal<void ()>                    onPreferencesSaved;
+   boost::signals2::signal<void (const DistributedEvent&)>
                                              onDistributedEvent;
-   boost::signal<void (core::FilePath)>      onPermissionsChanged;
+   boost::signals2::signal<void (core::FilePath)>      onPermissionsChanged;
 
    // signal for detecting extended type of documents
-   boost::signal<std::string(boost::shared_ptr<source_database::SourceDocument>),
+   boost::signals2::signal<std::string(boost::shared_ptr<source_database::SourceDocument>),
                  firstNonEmpty<std::string> > onDetectSourceExtendedType;
 };
 
diff --git a/src/cpp/session/include/session/SessionSourceDatabase.hpp b/src/cpp/session/include/session/SessionSourceDatabase.hpp
index 0cf26bb..619fd24 100644
--- a/src/cpp/session/include/session/SessionSourceDatabase.hpp
+++ b/src/cpp/session/include/session/SessionSourceDatabase.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/utility.hpp>
 #include <boost/shared_ptr.hpp>
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 
 #include <core/FilePath.hpp>
 #include <core/json/Json.hpp>
@@ -196,14 +196,14 @@ core::Error getId(const core::FilePath& path, std::string* pId);
 // source database events
 struct Events : boost::noncopyable
 {
-   boost::signal<void(boost::shared_ptr<SourceDocument>)>      onDocUpdated;
-   boost::signal<void(const std::string&,
+   boost::signals2::signal<void(boost::shared_ptr<SourceDocument>)>      onDocUpdated;
+   boost::signals2::signal<void(const std::string&,
                       boost::shared_ptr<SourceDocument>)>      onDocRenamed;
-   boost::signal<void(const std::string&)>                     onDocAdded;
-   boost::signal<void(
+   boost::signals2::signal<void(const std::string&)>                     onDocAdded;
+   boost::signals2::signal<void(
       boost::shared_ptr<source_database::SourceDocument>)>     onDocPendingRemove;
-   boost::signal<void(const std::string&, const std::string&)> onDocRemoved;
-   boost::signal<void()>                                       onRemoveAll;
+   boost::signals2::signal<void(const std::string&, const std::string&)> onDocRemoved;
+   boost::signals2::signal<void()>                                       onRemoveAll;
 };
 
 Events& events();
diff --git a/src/cpp/session/include/session/SessionUserSettings.hpp b/src/cpp/session/include/session/SessionUserSettings.hpp
index 2ee4c89..5909faa 100644
--- a/src/cpp/session/include/session/SessionUserSettings.hpp
+++ b/src/cpp/session/include/session/SessionUserSettings.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/utility.hpp>
 #include <boost/scoped_ptr.hpp>
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 
 #include <core/Settings.hpp>
 #include <core/FilePath.hpp>
@@ -58,7 +58,7 @@ private:
    friend UserSettings& userSettings();
 
 public:
-   boost::signal<void()> onChanged;
+   boost::signals2::signal<void()> onChanged;
 
 public:
    // COPYING: boost::noncopyable
diff --git a/src/cpp/session/include/session/projects/SessionProjects.hpp b/src/cpp/session/include/session/projects/SessionProjects.hpp
index f98c604..f2b585f 100644
--- a/src/cpp/session/include/session/projects/SessionProjects.hpp
+++ b/src/cpp/session/include/session/projects/SessionProjects.hpp
@@ -22,7 +22,7 @@
 #include <boost/utility.hpp>
 #include <boost/shared_ptr.hpp>
 #include <boost/foreach.hpp>
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 
 #include <core/FileInfo.hpp>
 #include <core/FilePath.hpp>
@@ -219,10 +219,10 @@ private:
 
    bool hasFileMonitor_;
    std::vector<std::string> monitorSubscribers_;
-   boost::signal<void(const tree<core::FileInfo>&)> onMonitoringEnabled_;
-   boost::signal<void(const std::vector<core::system::FileChangeEvent>&)>
+   boost::signals2::signal<void(const tree<core::FileInfo>&)> onMonitoringEnabled_;
+   boost::signals2::signal<void(const std::vector<core::system::FileChangeEvent>&)>
                                                             onFilesChanged_;
-   boost::signal<void()> onMonitoringDisabled_;
+   boost::signals2::signal<void()> onMonitoringDisabled_;
 };
 
 ProjectContext& projectContext();
diff --git a/src/cpp/session/modules/SessionPlots.hpp b/src/cpp/session/modules/SessionPlots.hpp
index fac9748..81ed1d4 100644
--- a/src/cpp/session/modules/SessionPlots.hpp
+++ b/src/cpp/session/modules/SessionPlots.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_PLOTS_HPP
 #define SESSION_PLOTS_HPP
 
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 
 namespace rstudio {
 namespace core {
@@ -35,8 +35,8 @@ core::Error initialize();
 
 struct Events : boost::noncopyable
 {
-   boost::signal<void()> onBeforeNewPlot;
-   boost::signal<void()> onNewPlot;
+   boost::signals2::signal<void()> onBeforeNewPlot;
+   boost::signals2::signal<void()> onNewPlot;
 };
 
 Events& events();
diff --git a/src/cpp/session/modules/build/SessionSourceCpp.cpp b/src/cpp/session/modules/build/SessionSourceCpp.cpp
index a1c4919..e324588 100644
--- a/src/cpp/session/modules/build/SessionSourceCpp.cpp
+++ b/src/cpp/session/modules/build/SessionSourceCpp.cpp
@@ -15,7 +15,7 @@
 
 #include "SessionSourceCpp.hpp"
 
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 #include <boost/algorithm/string/trim.hpp>
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/join.hpp>
diff --git a/src/cpp/session/modules/rmarkdown/NotebookExec.cpp b/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
index a6be34d..9d80eec 100644
--- a/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
+++ b/src/cpp/session/modules/rmarkdown/NotebookExec.cpp
@@ -247,7 +247,7 @@ void ChunkExecContext::disconnect()
    }
 
    // unhook all our event handlers
-   BOOST_FOREACH(const boost::signals::connection connection, connections_) 
+   BOOST_FOREACH(const boost::signals2::connection connection, connections_) 
    {
       connection.disconnect();
    }
diff --git a/src/cpp/session/modules/rmarkdown/NotebookExec.hpp b/src/cpp/session/modules/rmarkdown/NotebookExec.hpp
index d6f082b..2338bf5 100644
--- a/src/cpp/session/modules/rmarkdown/NotebookExec.hpp
+++ b/src/cpp/session/modules/rmarkdown/NotebookExec.hpp
@@ -18,7 +18,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-#include <boost/signal.hpp>
+#include <boost/signals2/signal.hpp>
 
 namespace rstudio {
 namespace core {
@@ -69,7 +69,7 @@ private:
 
    bool connected_;
 
-   std::vector<boost::signals::connection> connections_;
+   std::vector<boost::signals2::connection> connections_;
 };
 
 } // namespace notebook
diff --git a/src/cpp/session/modules/rmarkdown/NotebookPlots.cpp b/src/cpp/session/modules/rmarkdown/NotebookPlots.cpp
index 818f2c3..9f8bbef 100644
--- a/src/cpp/session/modules/rmarkdown/NotebookPlots.cpp
+++ b/src/cpp/session/modules/rmarkdown/NotebookPlots.cpp
@@ -51,8 +51,8 @@ public:
 
    bool hasPlots;
    r::sexp::PreservedSEXP sexpMargins;
-   boost::signals::connection onConsolePrompt;
-   boost::signals::connection onNewPlot;
+   boost::signals2::connection onConsolePrompt;
+   boost::signals2::connection onNewPlot;
 };
 
 bool isPlotPath(const FilePath& path)
diff --git a/src/cpp/session/modules/rmarkdown/SessionRmdNotebook.hpp b/src/cpp/session/modules/rmarkdown/SessionRmdNotebook.hpp
index 2bce30b..ee2e674 100644
--- a/src/cpp/session/modules/rmarkdown/SessionRmdNotebook.hpp
+++ b/src/cpp/session/modules/rmarkdown/SessionRmdNotebook.hpp
@@ -18,7 +18,7 @@
 #define SESSION_RMARKDOWN_NOTEBOOK_HPP
 
 #include <ctime>
-#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
 #include <core/json/Json.hpp>
 
 #define kChunkLibDir "lib"
@@ -43,18 +43,18 @@ std::string notebookCtxId();
 struct Events : boost::noncopyable
 {
    // Document {0}, chunk {1} from context id {3} execution completed
-   boost::signal<void(const std::string&, const std::string&,
+   boost::signals2::signal<void(const std::string&, const std::string&,
                       const std::string&)> 
                 onChunkExecCompleted;
 
    // Document {0}, chunk {1} had console output of type {2} and text {3}
-   boost::signal<void(const std::string&, const std::string&, int, 
+   boost::signals2::signal<void(const std::string&, const std::string&, int, 
                 const std::string&)>
                 onChunkConsoleOutput;
 
-   boost::signal<void(const core::FilePath&)> onPlotOutput;
-   boost::signal<void(const core::FilePath&, const core::FilePath&)> onHtmlOutput;
-   boost::signal<void(const core::json::Object&)> onErrorOutput;
+   boost::signals2::signal<void(const core::FilePath&)> onPlotOutput;
+   boost::signals2::signal<void(const core::FilePath&, const core::FilePath&)> onHtmlOutput;
+   boost::signals2::signal<void(const core::json::Object&)> onErrorOutput;
 };
 
 Events& events();
