# First part by Witold @wdyrka in rstudio ghp#1063
diff --git a/src/cpp/core/http/SocketProxy.cpp b/src/cpp/core/http/SocketProxy.cpp
index 6d352b6e3b..0c78401c68 100644
--- a/src/cpp/core/http/SocketProxy.cpp
+++ b/src/cpp/core/http/SocketProxy.cpp
@@ -148,8 +148,12 @@ namespace {
 #ifndef _WIN32
 bool isSslShutdownError(const core::Error& error)
 {
+   #if defined SSL_R_SHORT_READ
    return error.code().category() == boost::asio::error::get_ssl_category() &&
           error.code().value() == ERR_PACK(ERR_LIB_SSL, 0, SSL_R_SHORT_READ);
+   #else
+   return error.code() == boost::asio::ssl::error::stream_truncated;  
+   #endif
 }
 #else
 bool isSslShutdownError(const core::Error& error)
diff --git a/src/cpp/core/system/PosixCrypto.cpp b/src/cpp/core/system/PosixCrypto.cpp
index 51c12e1f74..d036f6f4bd 100644
--- a/src/cpp/core/system/PosixCrypto.cpp
+++ b/src/cpp/core/system/PosixCrypto.cpp
@@ -257,6 +257,11 @@ core::Error rsaInit()
    const int KEY_SIZE = 1024;
    const int ENTROPY_BYTES = 4096;
 
+   BIGNUM *bn = BN_new();
+   BN_set_word(bn, RSA_F4);
+   const BIGNUM *bn_n;
+   const BIGNUM *bn_e;
+
    int rnd = ::open("/dev/urandom", O_RDONLY);
    if (rnd == -1)
       return systemError(errno, ERROR_LOCATION);
@@ -271,14 +276,18 @@ core::Error rsaInit()
 
    RAND_seed(entropy, ENTROPY_BYTES);
 
-   s_pRSA = ::RSA_generate_key(KEY_SIZE, 0x10001, NULL, NULL);
-   if (!s_pRSA)
+   s_pRSA = RSA_new();
+   int rc = ::RSA_generate_key_ex(s_pRSA, KEY_SIZE, bn, NULL);
+   if (rc == -1)
       return lastCryptoError(ERROR_LOCATION);
+   BN_clear_free(bn);
+   
+   RSA_get0_key(s_pRSA, &bn_n, &bn_e, NULL);
 
-   char* n = BN_bn2hex(s_pRSA->n);
+   char* n = BN_bn2hex(bn_n);
    s_modulo = n;
    OPENSSL_free(n);
-   char* e = BN_bn2hex(s_pRSA->e);
+   char* e = BN_bn2hex(bn_e);
    s_exponent = e;
    OPENSSL_free(e);
 
