diff --git a/src/cpp/core/Assert.cpp b/src/cpp/core/Assert.cpp
index e793ee9..c688f63 100644
--- a/src/cpp/core/Assert.cpp
+++ b/src/cpp/core/Assert.cpp
@@ -23,7 +23,7 @@
 #include <signal.h>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace boost
 {
@@ -37,7 +37,7 @@ void assertion_failed(char const * expr,
 
    // always log the failure
    std::string msg = "ASSERTION FAILED: " + std::string(expr);
-   core::log::logWarningMessage(msg, location);
+   rscore::log::logWarningMessage(msg, location);
 
 #ifndef NDEBUG
 #ifdef _WIN32
@@ -61,7 +61,7 @@ void assertion_failed_msg(char const * expr,
    // always log the failure
    std::string message = "ASSERTION FAILED: " + std::string(expr) +
                          " - " + std::string(msg);
-   core::log::logWarningMessage(message, location);
+   rscore::log::logWarningMessage(message, location);
 
 #ifndef NDEBUG
 #ifdef _WIN32
diff --git a/src/cpp/core/Base64.cpp b/src/cpp/core/Base64.cpp
index 53bf358..e75f3ac 100644
--- a/src/cpp/core/Base64.cpp
+++ b/src/cpp/core/Base64.cpp
@@ -25,7 +25,7 @@
 #include <core/Log.hpp>
 #include <core/FileSerializer.hpp>
 
-namespace core {
+namespace rscore {
 namespace base64 {
 
 Error encode(const std::string& input, std::string* pOutput)
@@ -61,7 +61,7 @@ Error encode(const std::string& input, std::string* pOutput)
 Error encode(const FilePath& inputFile, std::string* pOutput)
 {
    std::string contents;
-   Error error = core::readStringFromFile(inputFile, &contents);
+   Error error = rscore::readStringFromFile(inputFile, &contents);
    if (error)
       return error;
 
@@ -70,7 +70,7 @@ Error encode(const FilePath& inputFile, std::string* pOutput)
 
 
 } // namespace base64
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/BrowserUtils.cpp b/src/cpp/core/BrowserUtils.cpp
index b2d728b..fcac04d 100644
--- a/src/cpp/core/BrowserUtils.cpp
+++ b/src/cpp/core/BrowserUtils.cpp
@@ -21,7 +21,7 @@
 
 using namespace boost::algorithm;
 
-namespace core {
+namespace rscore {
 namespace browser_utils {
 
 namespace {
@@ -144,7 +144,7 @@ bool hasRequiredBrowser(const std::string& userAgent)
 
 
 } // namespace browser_utils
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/ConfigUtils.cpp b/src/cpp/core/ConfigUtils.cpp
index 6e6374d..a6d83b4 100644
--- a/src/cpp/core/ConfigUtils.cpp
+++ b/src/cpp/core/ConfigUtils.cpp
@@ -26,7 +26,7 @@
 #include <core/FilePath.hpp>
 #include <core/FileSerializer.hpp>
 
-namespace core {
+namespace rscore {
 namespace config_utils {
 
 namespace {
@@ -73,7 +73,7 @@ Error extractVariables(const FilePath& file, Variables* pVariables)
 }
 
 } // namespace config_utils
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/DateTime.cpp b/src/cpp/core/DateTime.cpp
index 8bcc493..5e4c391 100644
--- a/src/cpp/core/DateTime.cpp
+++ b/src/cpp/core/DateTime.cpp
@@ -15,7 +15,7 @@
 
 #include <core/DateTime.hpp>
 
-namespace core {
+namespace rscore {
 namespace date_time {   
 
 double secondsSinceEpoch()
@@ -89,7 +89,7 @@ std::string format(const boost::posix_time::ptime& datetime,
 }
    
 } // namespace date_time
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/Error.cpp b/src/cpp/core/Error.cpp
index 03b61ba..9594703 100644
--- a/src/cpp/core/Error.cpp
+++ b/src/cpp/core/Error.cpp
@@ -27,7 +27,7 @@
 #include <boost/system/windows_error.hpp>
 #endif
 
-namespace core {
+namespace rscore {
 
 struct Error::Impl
 {
@@ -311,6 +311,6 @@ std::ostream& operator<<(std::ostream& os, const ErrorLocation& location)
    
    
 
-} // namespace core 
+} // namespace rscore 
 
 
diff --git a/src/cpp/core/Exec.cpp b/src/cpp/core/Exec.cpp
index c84a7b2..afc462a 100644
--- a/src/cpp/core/Exec.cpp
+++ b/src/cpp/core/Exec.cpp
@@ -17,7 +17,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 
 ExecBlock& ExecBlock::add(Function function) 
 { 
@@ -42,7 +42,7 @@ Error ExecBlock::operator()() const
    return execute(); 
 }
    
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/FileInfo.cpp b/src/cpp/core/FileInfo.cpp
index 09db772..9d462b5 100644
--- a/src/cpp/core/FileInfo.cpp
+++ b/src/cpp/core/FileInfo.cpp
@@ -17,7 +17,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 FileInfo::FileInfo(const FilePath& filePath, bool isSymlink)
    :  absolutePath_(filePath.absolutePath()),
@@ -66,7 +66,7 @@ std::ostream& operator << (std::ostream& stream, const FileInfo& fileInfo)
    
 
    
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/FileLock.cpp b/src/cpp/core/FileLock.cpp
index de40f3e..36c57db 100644
--- a/src/cpp/core/FileLock.cpp
+++ b/src/cpp/core/FileLock.cpp
@@ -33,7 +33,7 @@
 #endif
 #include <boost/interprocess/sync/file_lock.hpp>
 
-namespace core {
+namespace rscore {
 
 bool FileLock::isLocked(const FilePath& lockFilePath)
 {
@@ -90,7 +90,7 @@ Error FileLock::acquire(const FilePath& lockFilePath)
    // make sure the lock file exists
    if (!lockFilePath.exists())
    {
-      Error error = core::writeStringToFile(lockFilePath, "");
+      Error error = rscore::writeStringToFile(lockFilePath, "");
       if (error)
          return error;
    }
@@ -169,7 +169,7 @@ FilePath FileLock::lockFilePath() const
 }
 
 
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/FileLogWriter.cpp b/src/cpp/core/FileLogWriter.cpp
index acad952..7cddff4 100644
--- a/src/cpp/core/FileLogWriter.cpp
+++ b/src/cpp/core/FileLogWriter.cpp
@@ -20,7 +20,7 @@
 #include <core/FileSerializer.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 
 FileLogWriter::FileLogWriter(const std::string& programIdentity,
                              int logLevel,
@@ -36,7 +36,7 @@ FileLogWriter::FileLogWriter(const std::string& programIdentity,
    if (!logFile_.exists())
    {
       // swallow errors -- we can't log so it doesn't matter
-      core::appendToFile(logFile_, "");
+      rscore::appendToFile(logFile_, "");
    }
 }
 
@@ -51,14 +51,14 @@ FileLogWriter::~FileLogWriter()
    }
 }
 
-void FileLogWriter::log(core::system::LogLevel logLevel,
+void FileLogWriter::log(rscore::system::LogLevel logLevel,
                         const std::string& message)
 {
    log(programIdentity_, logLevel, message);
 }
 
 void FileLogWriter::log(const std::string& programIdentity,
-                        core::system::LogLevel logLevel,
+                        rscore::system::LogLevel logLevel,
                         const std::string& message)
 {
    if (logLevel > logLevel_)
@@ -67,7 +67,7 @@ void FileLogWriter::log(const std::string& programIdentity,
    rotateLogFile();
 
    // Swallow errors--we can't do anything anyway
-   core::appendToFile(logFile_, formatLogEntry(programIdentity, message));
+   rscore::appendToFile(logFile_, formatLogEntry(programIdentity, message));
 }
 
 
@@ -90,4 +90,4 @@ bool FileLogWriter::rotateLogFile()
 }
 
 
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/FilePath.cpp b/src/cpp/core/FilePath.cpp
index 772ad48..98930be 100644
--- a/src/cpp/core/FilePath.cpp
+++ b/src/cpp/core/FilePath.cpp
@@ -39,7 +39,7 @@
 
 typedef boost::filesystem::path path_t;
 
-namespace core {
+namespace rscore {
 
 namespace {
 
@@ -159,7 +159,7 @@ FilePath FilePath::safeCurrentPath(const FilePath& revertToPath)
    // take the user home path from the system
    FilePath safePath = revertToPath;
    if (!safePath.exists())
-      safePath = core::system::userHomePath();
+      safePath = rscore::system::userHomePath();
 
    Error error = safePath.makeCurrentPath();
    if (error)
@@ -1155,11 +1155,11 @@ bool RecursiveDirectoryIterator::finished() const
 namespace {
 void logError(path_t path,
               const boost::filesystem::filesystem_error& e,
-              const core::ErrorLocation& errorLocation)
+              const rscore::ErrorLocation& errorLocation)
 {
    Error error(e.code(), errorLocation) ;
    addErrorProperties(path, &error) ;
-   core::log::logError(error, errorLocation) ;
+   rscore::log::logError(error, errorLocation) ;
 }
 
 void addErrorProperties(path_t path, Error* pError)
@@ -1168,4 +1168,4 @@ void addErrorProperties(path_t path, Error* pError)
 }
 }
 
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/FileSerializer.cpp b/src/cpp/core/FileSerializer.cpp
index 9660d45..7e8f0cc 100644
--- a/src/cpp/core/FileSerializer.cpp
+++ b/src/cpp/core/FileSerializer.cpp
@@ -27,14 +27,14 @@
 #include <core/FilePath.hpp>
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 
 std::string stringifyStringPair(const std::pair<std::string,std::string>& pair)
 {
    return pair.first + "=\"" + string_utils::jsonLiteralEscape(pair.second) + "\"" ;
 }
 
-Error writeStringMapToFile(const core::FilePath& filePath,
+Error writeStringMapToFile(const rscore::FilePath& filePath,
                            const std::map<std::string,std::string>& map)
 {
    return writeCollectionToFile<std::map<std::string,std::string> >(
@@ -74,7 +74,7 @@ ReadCollectionAction parseStringPair(
 }
 
 
-Error readStringMapFromFile(const core::FilePath& filePath,
+Error readStringMapFromFile(const rscore::FilePath& filePath,
                             std::map<std::string,std::string>* pMap)
 {
    return readCollectionFromFile<std::map<std::string,std::string> >(
@@ -90,7 +90,7 @@ std::string stringifyString(const std::string& str)
 }
    
    
-Error writeStringVectorToFile(const core::FilePath& filePath,
+Error writeStringVectorToFile(const rscore::FilePath& filePath,
                               const std::vector<std::string>& vector)
 {  
    return writeCollectionToFile<std::vector<std::string> >(filePath,
@@ -106,7 +106,7 @@ ReadCollectionAction parseString(const std::string& line, std::string* pStr)
    return ReadCollectionAddLine ;
 }
    
-Error readStringVectorFromFile(const core::FilePath& filePath,
+Error readStringVectorFromFile(const rscore::FilePath& filePath,
                                std::vector<std::string>* pVector,
                                bool trimAndIgnoreBlankLines)
 {
@@ -256,5 +256,5 @@ bool stripBOM(std::string* pStr)
    return false;
 }
 
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/FileUtils.cpp b/src/cpp/core/FileUtils.cpp
index 121b6e4..e7c7fad 100644
--- a/src/cpp/core/FileUtils.cpp
+++ b/src/cpp/core/FileUtils.cpp
@@ -18,7 +18,7 @@
 
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace file_utils {
 
 FilePath uniqueFilePath(const FilePath& parent, const std::string& prefix)
@@ -27,7 +27,7 @@ FilePath uniqueFilePath(const FilePath& parent, const std::string& prefix)
    for (int i=0; i<100; i++)
    {
       // get a shortened uuid
-      std::string shortentedUuid = core::system::generateShortenedUuid();
+      std::string shortentedUuid = rscore::system::generateShortenedUuid();
 
       // form full path
       FilePath uniqueDir = parent.childPath(prefix + shortentedUuid);
@@ -38,8 +38,8 @@ FilePath uniqueFilePath(const FilePath& parent, const std::string& prefix)
    }
 
    // if we didn't succeed then return prefix + uuid
-   return parent.childPath(prefix + core::system::generateUuid(false));
+   return parent.childPath(prefix + rscore::system::generateUuid(false));
 }
 
 } // namespace file_utils
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/GitGraph.cpp b/src/cpp/core/GitGraph.cpp
index a3764c9..f7b7ac2 100644
--- a/src/cpp/core/GitGraph.cpp
+++ b/src/cpp/core/GitGraph.cpp
@@ -23,7 +23,7 @@
 
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
 namespace gitgraph {
 
 namespace {
@@ -160,4 +160,4 @@ Line GitGraph::addCommit(const std::string& commit,
 }
 
 } // namespace gitgraph
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/Hash.cpp b/src/cpp/core/Hash.cpp
index bf97d26..43de05d 100644
--- a/src/cpp/core/Hash.cpp
+++ b/src/cpp/core/Hash.cpp
@@ -22,7 +22,7 @@
 
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
 namespace hash {   
 
 std::string crc32Hash(const std::string& content)
@@ -45,7 +45,7 @@ std::string crc32HexHash(const std::string& content)
 }
    
 } // namespace hash
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/HtmlUtils.cpp b/src/cpp/core/HtmlUtils.cpp
index d00335f..41a360e 100644
--- a/src/cpp/core/HtmlUtils.cpp
+++ b/src/cpp/core/HtmlUtils.cpp
@@ -23,7 +23,7 @@
 
 #include <core/http/Util.hpp>
 
-namespace core {
+namespace rscore {
 namespace html_utils {
 
 std::string defaultTitle(const std::string& htmlContent)
@@ -62,7 +62,7 @@ std::string Base64ImageFilter::toBase64Image(const boost::cmatch& match)
        boost::algorithm::starts_with(imagePath.mimeContentType(), "image/"))
    {     
       std::string imageBase64;
-      Error error = core::base64::encode(imagePath, &imageBase64);
+      Error error = rscore::base64::encode(imagePath, &imageBase64);
       if (!error)
       {
          imgRef = "data:" + imagePath.mimeContentType() + ";base64,";
@@ -97,7 +97,7 @@ std::string CssUrlFilter::toBase64Url(const boost::cmatch& match)
    if (urlPath.exists() && (ext == ".ttf" || ext == ".otf"))
    {
       std::string fontBase64;
-      Error error = core::base64::encode(urlPath, &fontBase64);
+      Error error = rscore::base64::encode(urlPath, &fontBase64);
       if (!error)
       {
          // return base64 encoded font
@@ -119,7 +119,7 @@ std::string CssUrlFilter::toBase64Url(const boost::cmatch& match)
 
 
 } // namespace html_utils
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/Log.cpp b/src/cpp/core/Log.cpp
index 164508d..0ef41fa 100644
--- a/src/cpp/core/Log.cpp
+++ b/src/cpp/core/Log.cpp
@@ -22,7 +22,7 @@
 #include <core/Error.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace log {
 
 namespace {   
@@ -166,7 +166,7 @@ std::string errorAsLogEntry(const Error& error)
    
 
 } // namespace log
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/LogWriter.cpp b/src/cpp/core/LogWriter.cpp
index ad151ae..35a7bba 100644
--- a/src/cpp/core/LogWriter.cpp
+++ b/src/cpp/core/LogWriter.cpp
@@ -20,7 +20,7 @@
 
 #include <core/DateTime.hpp>
 
-namespace core {
+namespace rscore {
 
 std::string LogWriter::formatLogEntry(const std::string& programIdentity,
                                       const std::string& message,
@@ -45,4 +45,4 @@ std::string LogWriter::formatLogEntry(const std::string& programIdentity,
    return ostr.str();
 }
 
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/PerformanceTimer.cpp b/src/cpp/core/PerformanceTimer.cpp
index c3232b7..6eb0734 100644
--- a/src/cpp/core/PerformanceTimer.cpp
+++ b/src/cpp/core/PerformanceTimer.cpp
@@ -20,7 +20,7 @@
 
 using namespace boost::posix_time;
 
-namespace core {
+namespace rscore {
    
 PerformanceTimer::PerformanceTimer()
    : startTime_(ptime(not_a_date_time))
@@ -127,7 +127,7 @@ std::ostream& operator << (std::ostream& os, const PerformanceTimer& t)
 }
          
 
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/PosixStringUtils.cpp b/src/cpp/core/PosixStringUtils.cpp
index e548052..a67cd50 100644
--- a/src/cpp/core/PosixStringUtils.cpp
+++ b/src/cpp/core/PosixStringUtils.cpp
@@ -34,7 +34,7 @@
 #pragma clang diagnostic pop
 #endif
 
-namespace core {
+namespace rscore {
 namespace string_utils {
 
 std::string wideToUtf8(const std::wstring& value)
@@ -82,7 +82,7 @@ std::wstring utf8ToWide(const std::string& value, const std::string& context)
 }
 
 } // namespace string_utils
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/ProgramOptions.cpp b/src/cpp/core/ProgramOptions.cpp
index 0c7577a..ad98a42 100644
--- a/src/cpp/core/ProgramOptions.cpp
+++ b/src/cpp/core/ProgramOptions.cpp
@@ -28,7 +28,7 @@
 
 using namespace boost::program_options ;
 
-namespace core {
+namespace rscore {
 
 namespace program_options {
  
@@ -60,19 +60,19 @@ bool validateOptionsProvided(const variables_map& vm,
   
 void reportError(const std::string& errorMessage, const ErrorLocation& location)
 {
-   if (core::system::stderrIsTerminal())
+   if (rscore::system::stderrIsTerminal())
       std::cerr << errorMessage << std::endl;
    else
-      core::log::logErrorMessage(errorMessage, location);
+      rscore::log::logErrorMessage(errorMessage, location);
 }
 
 void reportWarnings(const std::string& warningMessages,
                     const ErrorLocation& location)
 {
-   if (core::system::stderrIsTerminal())
+   if (rscore::system::stderrIsTerminal())
       std::cerr << "WARNINGS: " << warningMessages << std::endl;
    else
-      core::log::logWarningMessage(warningMessages, location);
+      rscore::log::logWarningMessage(warningMessages, location);
 }
 
 
@@ -190,4 +190,4 @@ ProgramStatus read(const OptionsDescription& optionsDescription,
 
    
 } // namespace program_options
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/RecursionGuard.cpp b/src/cpp/core/RecursionGuard.cpp
index 1e501e6..3f64c47 100644
--- a/src/cpp/core/RecursionGuard.cpp
+++ b/src/cpp/core/RecursionGuard.cpp
@@ -15,7 +15,7 @@
 
 #include <core/RecursionGuard.hpp>
 
-namespace core {
+namespace rscore {
 
 RecursionGuard::RecursionGuard (int* pCounter):
    pCounter_(pCounter)
@@ -28,5 +28,5 @@ RecursionGuard::~RecursionGuard()
    *pCounter_ = *pCounter_ - 1;
 }
 
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/RegexUtils.cpp b/src/cpp/core/RegexUtils.cpp
index e87d114..0565cc5 100644
--- a/src/cpp/core/RegexUtils.cpp
+++ b/src/cpp/core/RegexUtils.cpp
@@ -26,7 +26,7 @@
 
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace regex_utils {
 
 boost::regex wildcardPatternToRegex(const std::string& pattern)
@@ -111,7 +111,7 @@ Error filterString(const std::string& input,
 
 
 } // namespace regex_utils
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/SafeConvert.cpp b/src/cpp/core/SafeConvert.cpp
index 94e796e..885d3ba 100644
--- a/src/cpp/core/SafeConvert.cpp
+++ b/src/cpp/core/SafeConvert.cpp
@@ -16,12 +16,12 @@
 #include <core/SafeConvert.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace safe_convert {   
 
    
 } // namespace safe_convert
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/Settings.cpp b/src/cpp/core/Settings.cpp
index 4bf9f8d..3311d69 100644
--- a/src/cpp/core/Settings.cpp
+++ b/src/cpp/core/Settings.cpp
@@ -22,7 +22,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/FileSerializer.hpp>
 
-namespace core {
+namespace rscore {
 
 Settings::Settings()
    : updatePending_(false),
@@ -38,7 +38,7 @@ Error Settings::initialize(const FilePath& filePath)
 {
    settingsFile_ = filePath ;
    settingsMap_.clear() ;
-   Error error = core::readStringMapFromFile(settingsFile_, &settingsMap_) ;
+   Error error = rscore::readStringMapFromFile(settingsFile_, &settingsMap_) ;
    if (error)
    {
       // we don't consider file-not-found and error because it is a 
@@ -135,7 +135,7 @@ void Settings::endUpdate()
 void Settings::writeSettings() 
 {
    isDirty_ = false;
-   Error error = core::writeStringMapToFile(settingsFile_, settingsMap_) ; 
+   Error error = rscore::writeStringMapToFile(settingsFile_, settingsMap_) ; 
    if (error)
      LOG_ERROR(error);
 }
diff --git a/src/cpp/core/StderrLogWriter.cpp b/src/cpp/core/StderrLogWriter.cpp
index 5247c38..45b471b 100644
--- a/src/cpp/core/StderrLogWriter.cpp
+++ b/src/cpp/core/StderrLogWriter.cpp
@@ -23,7 +23,7 @@
 #include <core/FileSerializer.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 
 StderrLogWriter::StderrLogWriter(const std::string& programIdentity,
                                  int logLevel)
@@ -41,14 +41,14 @@ StderrLogWriter::~StderrLogWriter()
    }
 }
 
-void StderrLogWriter::log(core::system::LogLevel logLevel,
+void StderrLogWriter::log(rscore::system::LogLevel logLevel,
                           const std::string& message)
 {
    log(programIdentity_, logLevel, message);
 }
 
 void StderrLogWriter::log(const std::string& programIdentity,
-                          core::system::LogLevel logLevel,
+                          rscore::system::LogLevel logLevel,
                           const std::string& message)
 {
    if (logLevel > logLevel_)
@@ -58,4 +58,4 @@ void StderrLogWriter::log(const std::string& programIdentity,
 }
 
 
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/StringUtils.cpp b/src/cpp/core/StringUtils.cpp
index ed19792..03d1a44 100644
--- a/src/cpp/core/StringUtils.cpp
+++ b/src/cpp/core/StringUtils.cpp
@@ -33,7 +33,7 @@
 #include <winnls.h>
 #endif
 
-namespace core {
+namespace rscore {
 namespace string_utils {   
 
 void convertLineEndings(std::string* pStr, LineEnding type)
@@ -315,7 +315,7 @@ bool parseVersion(const std::string& str, uint64_t* pVersion)
 
    for (size_t i = 0; i < chunks.size() && i < 4; i++)
    {
-      uint16_t value = core::safe_convert::stringTo<uint16_t>(
+      uint16_t value = rscore::safe_convert::stringTo<uint16_t>(
             chunks[i], std::numeric_limits<uint16_t>::max());
       if (value == std::numeric_limits<uint16_t>::max())
          return false;
@@ -359,7 +359,7 @@ void stripQuotes(std::string* pStr)
 }
 
 } // namespace string_utils
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/SyslogLogWriter.cpp b/src/cpp/core/SyslogLogWriter.cpp
index 55e8693..fb7cbbc 100644
--- a/src/cpp/core/SyslogLogWriter.cpp
+++ b/src/cpp/core/SyslogLogWriter.cpp
@@ -27,7 +27,7 @@ namespace {
 
 int logPriority(int logLevel)
 {
-   using namespace core::system;
+   using namespace rscore::system;
 
    // map universal log entry type to posix constant
    switch(logLevel)
@@ -51,7 +51,7 @@ int logPriority(int logLevel)
 
 } // anonymous namespace
 
-namespace core {
+namespace rscore {
 
 SyslogLogWriter::~SyslogLogWriter()
 {
@@ -67,7 +67,7 @@ SyslogLogWriter::~SyslogLogWriter()
 SyslogLogWriter::SyslogLogWriter(const std::string& programIdentity,
                                  int logLevel)
    : programIdentity_(programIdentity),
-     logToStderr_(core::system::stderrIsTerminal())
+     logToStderr_(rscore::system::stderrIsTerminal())
 {
    // copy program identity into new string whose buffer will stay
    // around long enough to successfully register with openlog
@@ -82,7 +82,7 @@ SyslogLogWriter::SyslogLogWriter(const std::string& programIdentity,
    ::setlogmask(LOG_UPTO(logPriority(logLevel)));
 }
 
-void SyslogLogWriter::log(core::system::LogLevel logLevel,
+void SyslogLogWriter::log(rscore::system::LogLevel logLevel,
                           const std::string& message)
 {
    if (logToStderr_)
@@ -99,11 +99,11 @@ void SyslogLogWriter::log(core::system::LogLevel logLevel,
 }
 
 void SyslogLogWriter::log(const std::string&,
-                          core::system::LogLevel logLevel,
+                          rscore::system::LogLevel logLevel,
                           const std::string& message)
 {
    log(logLevel, message);
 }
 
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/Thread.cpp b/src/cpp/core/Thread.cpp
index 182eb60..7f2c713 100644
--- a/src/cpp/core/Thread.cpp
+++ b/src/cpp/core/Thread.cpp
@@ -17,7 +17,7 @@
 
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace thread {
 
 void safeLaunchThread(boost::function<void()> threadMain,
@@ -27,7 +27,7 @@ void safeLaunchThread(boost::function<void()> threadMain,
    {
       // block all signals for launch of background thread (will cause it
       // to never receive signals)
-      core::system::SignalBlocker signalBlocker;
+      rscore::system::SignalBlocker signalBlocker;
       Error error = signalBlocker.blockAll();
       if (error)
          LOG_ERROR(error);
@@ -44,7 +44,7 @@ void safeLaunchThread(boost::function<void()> threadMain,
    }
 }
 
-} // namespace core
+} // namespace rscore
 } // namespace thread
 
 
diff --git a/src/cpp/core/Trace.cpp b/src/cpp/core/Trace.cpp
index 28e45f5..f4d75c6 100644
--- a/src/cpp/core/Trace.cpp
+++ b/src/cpp/core/Trace.cpp
@@ -22,7 +22,7 @@
 
 #include <core/Thread.hpp>
 
-namespace core {
+namespace rscore {
 namespace trace {
 
 namespace {
@@ -42,4 +42,4 @@ void add(void* key, const std::string& functionName)
 }
 
 } // namespace trace
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/WaitUtils.cpp b/src/cpp/core/WaitUtils.cpp
index e633af3..341e0b4 100644
--- a/src/cpp/core/WaitUtils.cpp
+++ b/src/cpp/core/WaitUtils.cpp
@@ -18,7 +18,7 @@
 
 #include <core/BoostThread.hpp>
 
-namespace core {
+namespace rscore {
 
 Error waitWithTimeout(const boost::function<WaitResult()>& waitFunction,
                       int initialWaitMs,
@@ -62,4 +62,4 @@ Error waitWithTimeout(const boost::function<WaitResult()>& waitFunction,
    return systemError(boost::system::errc::timed_out, ERROR_LOCATION);
 }
 
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/Win32StringUtils.cpp b/src/cpp/core/Win32StringUtils.cpp
index ed1c01a..db4f131 100644
--- a/src/cpp/core/Win32StringUtils.cpp
+++ b/src/cpp/core/Win32StringUtils.cpp
@@ -20,7 +20,7 @@
 #include <core/Log.hpp>
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace string_utils {
 
 std::string wideToUtf8(const std::wstring& value)
@@ -76,7 +76,7 @@ std::wstring utf8ToWide(const std::string& value,
 
 
 } // namespace string_utils
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/dev/Main.cpp b/src/cpp/core/dev/Main.cpp
index b8f2bec..96e22b1 100644
--- a/src/cpp/core/dev/Main.cpp
+++ b/src/cpp/core/dev/Main.cpp
@@ -24,17 +24,17 @@
 
 #include <core/libclang/LibClang.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 int test_main(int argc, char * argv[])
 {
    try
    { 
       // setup log
-      initializeStderrLog("coredev", core::system::kLogLevelWarning);
+      initializeStderrLog("coredev", rscore::system::kLogLevelWarning);
 
       // ignore sigpipe
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
diff --git a/src/cpp/core/gwt/GwtFileHandler.cpp b/src/cpp/core/gwt/GwtFileHandler.cpp
index 343d195..eddc036 100644
--- a/src/cpp/core/gwt/GwtFileHandler.cpp
+++ b/src/cpp/core/gwt/GwtFileHandler.cpp
@@ -25,7 +25,7 @@
 #include <core/http/Response.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace gwt {   
    
 namespace {
@@ -45,7 +45,7 @@ FilePath requestedFile(const std::string& wwwLocalPath,
 
    // calculate "real" wwwPath
    FilePath wwwRealPath;
-   Error error = core::system::realPath(wwwLocalPath, &wwwRealPath);
+   Error error = rscore::system::realPath(wwwLocalPath, &wwwRealPath);
    if (error)
    {
       LOG_ERROR(error);
@@ -55,7 +55,7 @@ FilePath requestedFile(const std::string& wwwLocalPath,
    // calculate "real" requested path
    FilePath realRequestedPath;
    FilePath requestedPath = wwwRealPath.complete(relativePath);
-   error = core::system::realPath(requestedPath.absolutePath(),
+   error = rscore::system::realPath(requestedPath.absolutePath(),
                                   &realRequestedPath);
    if (error)
    {
@@ -91,7 +91,7 @@ FilePath requestedFile(const std::string& wwwLocalPath,
 
 void handleFileRequest(const std::string& wwwLocalPath,
                        const std::string& baseUri,
-                       core::http::UriFilterFunction mainPageFilter,
+                       rscore::http::UriFilterFunction mainPageFilter,
                        const std::string& initJs,
                        bool useEmulatedStack,
                        const http::Request& request, 
@@ -211,5 +211,5 @@ http::UriHandlerFunction fileHandlerFunction(
 }  
 
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/gwt/GwtLogHandler.cpp b/src/cpp/core/gwt/GwtLogHandler.cpp
index 80683fd..d089edc 100644
--- a/src/cpp/core/gwt/GwtLogHandler.cpp
+++ b/src/cpp/core/gwt/GwtLogHandler.cpp
@@ -30,7 +30,7 @@
 
 #include <core/gwt/GwtSymbolMaps.hpp>
 
-namespace core {
+namespace rscore {
 namespace gwt {
 
 namespace {
@@ -172,7 +172,7 @@ void handleLogExceptionRequest(const std::string& username,
                             % log::cleanDelims(userAgent));
 
    // log it
-   core::system::log(core::system::kLogLevelError, logEntry);
+   rscore::system::log(rscore::system::kLogLevelError, logEntry);
 
 
    // set void result
@@ -196,7 +196,7 @@ void handleLogMessageRequest(const std::string& username,
    }
    
    // convert level to appropriate enum and str
-   using namespace core::system;
+   using namespace rscore::system;
    LogLevel logLevel;
    std::string logLevelStr;
    switch(level)
@@ -231,7 +231,7 @@ void handleLogMessageRequest(const std::string& username,
    
                                            userAgent);
    // log it
-   core::system::log(logLevel, logEntry);
+   rscore::system::log(logLevel, logEntry);
    
    // set void result
    json::setVoidJsonRpcResult(pResponse);
@@ -240,7 +240,7 @@ void handleLogMessageRequest(const std::string& username,
 
 } // anonymous namespace
 
-void initializeSymbolMaps(const core::FilePath& symbolMapsPath)
+void initializeSymbolMaps(const rscore::FilePath& symbolMapsPath)
 {
    // allocate this on the heap so that order of C++ static destruction
    // issues don't cause a crash during shutdown
@@ -291,6 +291,6 @@ void handleLogRequest(const std::string& username,
 
 
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/gwt/GwtSymbolMaps.cpp b/src/cpp/core/gwt/GwtSymbolMaps.cpp
index 1b99e37..2f87ee6 100644
--- a/src/cpp/core/gwt/GwtSymbolMaps.cpp
+++ b/src/cpp/core/gwt/GwtSymbolMaps.cpp
@@ -35,7 +35,7 @@
 
 // https://code.google.com/p/google-web-toolkit/source/browse/trunk/user/src/com/google/gwt/core/server/impl/StackTraceDeobfuscator.java?r=11565
 
-namespace core {
+namespace rscore {
 namespace gwt {
 
 namespace {
@@ -360,6 +360,6 @@ StackElement SymbolMaps::resymbolize(const StackElement& se,
 }
 
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/http/Cookie.cpp b/src/cpp/core/http/Cookie.cpp
index 6137359..0b2ddde 100644
--- a/src/cpp/core/http/Cookie.cpp
+++ b/src/cpp/core/http/Cookie.cpp
@@ -21,7 +21,7 @@
 
 using namespace boost::gregorian ;
 
-namespace core {
+namespace rscore {
 namespace http {
 
 Cookie::Cookie(const Request& request,
@@ -102,4 +102,4 @@ std::string Cookie::cookieHeaderValue() const
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/Header.cpp b/src/cpp/core/http/Header.cpp
index 60d35b7..c9ad9d7 100644
--- a/src/cpp/core/http/Header.cpp
+++ b/src/cpp/core/http/Header.cpp
@@ -20,7 +20,7 @@
 
 #include <boost/algorithm/string.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
    
 bool HeaderNamePredicate::operator()(const Header& header) const
@@ -95,4 +95,4 @@ void parseHeaders(std::istream& is, Headers* pHeaders)
 }   
    
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/Message.cpp b/src/cpp/core/http/Message.cpp
index 27cbcbe..43dd57f 100644
--- a/src/cpp/core/http/Message.cpp
+++ b/src/cpp/core/http/Message.cpp
@@ -24,7 +24,7 @@
 
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
   
 // encodings
@@ -240,6 +240,6 @@ std::ostream& operator << (std::ostream& stream, const Message& m)
 
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/http/MultipartRelated.cpp b/src/cpp/core/http/MultipartRelated.cpp
index 015cf13..f9c56f3 100644
--- a/src/cpp/core/http/MultipartRelated.cpp
+++ b/src/cpp/core/http/MultipartRelated.cpp
@@ -22,7 +22,7 @@
 #define kTerminatingBoundary  "--END_OF_PART--"
 #define kContentType          "multipart/related; boundary=END_OF_PART"
 
-namespace core {
+namespace rscore {
 namespace http {
 
 void MultipartRelated::addPart(const std::string& contentType,
@@ -49,4 +49,4 @@ std::string MultipartRelated::body() const
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/NamedPipeProtocol.cpp b/src/cpp/core/http/NamedPipeProtocol.cpp
index e04d0f5..0527889 100644
--- a/src/cpp/core/http/NamedPipeProtocol.cpp
+++ b/src/cpp/core/http/NamedPipeProtocol.cpp
@@ -15,7 +15,7 @@
 
 #include <core/http/NamedPipeProtocol.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 
@@ -44,5 +44,5 @@ template<> Error closeSocket(boost::asio::windows::stream_handle& socket)
 
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/http/Request.cpp b/src/cpp/core/http/Request.cpp
index cfea658..6a09793 100644
--- a/src/cpp/core/http/Request.cpp
+++ b/src/cpp/core/http/Request.cpp
@@ -22,7 +22,7 @@
 #include <core/Log.hpp>
 #include <core/Thread.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 Request::Request() 
@@ -250,5 +250,5 @@ std::ostream& operator << (std::ostream& stream, const Request& r)
 }
 
 } // namespacce http
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/http/RequestParser.cpp b/src/cpp/core/http/RequestParser.cpp
index fb701d2..45b453c 100644
--- a/src/cpp/core/http/RequestParser.cpp
+++ b/src/cpp/core/http/RequestParser.cpp
@@ -18,7 +18,7 @@
 
 #include <boost/lexical_cast.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 RequestParser::RequestParser()
@@ -356,4 +356,4 @@ bool RequestParser::is_digit(int c)
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/Response.cpp b/src/cpp/core/http/Response.cpp
index b73d20c..d65df09 100644
--- a/src/cpp/core/http/Response.cpp
+++ b/src/cpp/core/http/Response.cpp
@@ -31,7 +31,7 @@
 
 #include <core/FileSerializer.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 Response::Response() 
@@ -128,7 +128,7 @@ Error Response::setCacheableBody(const FilePath& filePath,
                                  const Request& request)
 {
    std::string content;
-   Error error = core::readStringFromFile(filePath, &content);
+   Error error = rscore::readStringFromFile(filePath, &content);
    if (error)
       return error;
 
@@ -155,7 +155,7 @@ void Response::setRangeableFile(const FilePath& filePath,
 {
    // read the file in from disk
    std::string contents;
-   Error error = core::readStringFromFile(filePath, &contents);
+   Error error = rscore::readStringFromFile(filePath, &contents);
    if (error)
    {
       setError(error);
@@ -299,7 +299,7 @@ void Response::removeCachingHeaders()
    
 std::string Response::eTagForContent(const std::string& content)
 {
-   return core::hash::crc32Hash(content);
+   return rscore::hash::crc32Hash(content);
 }   
 
 void Response::appendFirstLineBuffers(
@@ -454,5 +454,5 @@ std::ostream& operator << (std::ostream& stream, const Response& r)
 
 
 } // namespacc http
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/http/SocketProxy.cpp b/src/cpp/core/http/SocketProxy.cpp
index 0cf2ff9..5a3b666 100644
--- a/src/cpp/core/http/SocketProxy.cpp
+++ b/src/cpp/core/http/SocketProxy.cpp
@@ -35,9 +35,9 @@
 
 #include <core/http/SocketUtils.hpp>
 
-using namespace core;
+using namespace rscore;
 
-namespace core {
+namespace rscore {
 namespace http {
 
 void SocketProxy::readClient()
@@ -145,13 +145,13 @@ void SocketProxy::handleServerWrite(const boost::system::error_code& e,
 namespace {
 
 #ifndef _WIN32
-bool isSslShutdownError(const core::Error& error)
+bool isSslShutdownError(const rscore::Error& error)
 {
    return error.code().category() == boost::asio::error::get_ssl_category() &&
           error.code().value() == ERR_PACK(ERR_LIB_SSL, 0, SSL_R_SHORT_READ);
 }
 #else
-bool isSslShutdownError(const core::Error& error)
+bool isSslShutdownError(const rscore::Error& error)
 {
    return false;
 }
@@ -159,7 +159,7 @@ bool isSslShutdownError(const core::Error& error)
 } // anonymous namespace
 
 void SocketProxy::handleError(const boost::system::error_code& e,
-                              const core::ErrorLocation& location)
+                              const rscore::ErrorLocation& location)
 {
    // log the error if it wasn't connection terminated
    Error error(e, location);
@@ -180,4 +180,4 @@ void SocketProxy::close()
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/URL.cpp b/src/cpp/core/http/URL.cpp
index 8ff0e92..e0f8e9b 100644
--- a/src/cpp/core/http/URL.cpp
+++ b/src/cpp/core/http/URL.cpp
@@ -20,7 +20,7 @@
 #include <boost/algorithm/string.hpp>
 #include <boost/regex.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 URL::URL(const std::string& absoluteURL)
@@ -305,4 +305,4 @@ void URL::test()
 }
  
 } // namespace http
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/http/UriHandler.cpp b/src/cpp/core/http/UriHandler.cpp
index cf9c1a8..3126335 100644
--- a/src/cpp/core/http/UriHandler.cpp
+++ b/src/cpp/core/http/UriHandler.cpp
@@ -22,7 +22,7 @@
 
 #include <core/http/Request.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 namespace {
@@ -94,5 +94,5 @@ UriAsyncHandlerFunction UriHandlers::handlerFor(const std::string& uri) const
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/http/Util.cpp b/src/cpp/core/http/Util.cpp
index de941f2..620228d 100644
--- a/src/cpp/core/http/Util.cpp
+++ b/src/cpp/core/http/Util.cpp
@@ -30,7 +30,7 @@
 #include <core/Log.hpp>
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 namespace util {
@@ -358,5 +358,5 @@ std::string pathAfterPrefix(const Request& request,
 } // namespace util
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/include/core/Algorithm.hpp b/src/cpp/core/include/core/Algorithm.hpp
index f3ebbd8..dc1050c 100644
--- a/src/cpp/core/include/core/Algorithm.hpp
+++ b/src/cpp/core/include/core/Algorithm.hpp
@@ -17,7 +17,7 @@
 #ifndef CORE_ALGORITHM_HPP
 #define CORE_ALGORITHM_HPP
 
-namespace core {
+namespace rscore {
 namespace algorithm {
 
 template<typename InputIterator, typename OutputIterator, typename Predicate>
@@ -56,7 +56,7 @@ OutputIterator copy_transformed_if(InputIterator begin,
 
 
 } // namespace algorithm
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_ALGORITHM_HPP
diff --git a/src/cpp/core/include/core/Base64.hpp b/src/cpp/core/include/core/Base64.hpp
index bba6176..0b36e7b 100644
--- a/src/cpp/core/include/core/Base64.hpp
+++ b/src/cpp/core/include/core/Base64.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -31,7 +31,7 @@ Error encode(const FilePath& inputFile, std::string* pOutput);
 
          
 } // namespace base64
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_BASE64_HPP
 
diff --git a/src/cpp/core/include/core/BrowserUtils.hpp b/src/cpp/core/include/core/BrowserUtils.hpp
index 6b5ceed..08ccfbf 100644
--- a/src/cpp/core/include/core/BrowserUtils.hpp
+++ b/src/cpp/core/include/core/BrowserUtils.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <boost/regex.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -39,7 +39,7 @@ bool isTridentOlderThan(const std::string& userAgent, double version);
 bool hasRequiredBrowser(const std::string& userAgent);
 
 } // namespace browser_utils
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_BROWSER_UTILS_HPP
diff --git a/src/cpp/core/include/core/ConfigUtils.hpp b/src/cpp/core/include/core/ConfigUtils.hpp
index a37ebf0..95771fe 100644
--- a/src/cpp/core/include/core/ConfigUtils.hpp
+++ b/src/cpp/core/include/core/ConfigUtils.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <map>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -32,7 +32,7 @@ void extractVariables(const std::string& vars, Variables* pVariables);
 Error extractVariables(const FilePath& file, Variables* pVariables);
 
 } // namespace config_utils
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_CONFIG_UTILS_HPP
diff --git a/src/cpp/core/include/core/DateTime.hpp b/src/cpp/core/include/core/DateTime.hpp
index c4ab8d1..02df1f6 100644
--- a/src/cpp/core/include/core/DateTime.hpp
+++ b/src/cpp/core/include/core/DateTime.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
 namespace date_time {
 
 double secondsSinceEpoch();   
@@ -38,7 +38,7 @@ std::string format(const boost::posix_time::ptime& datetime,
                    const std::string& format);
 
 } // namespace date_time
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_DATE_TIME_HPP
diff --git a/src/cpp/core/include/core/Error.hpp b/src/cpp/core/include/core/Error.hpp
index 944a0a6..64f6c6a 100644
--- a/src/cpp/core/include/core/Error.hpp
+++ b/src/cpp/core/include/core/Error.hpp
@@ -26,7 +26,7 @@
 
 #include <boost/current_function.hpp>
 
-namespace core {
+namespace rscore {
 
 class FilePath;
 class ErrorLocation ;
@@ -170,9 +170,9 @@ private:
    
 std::ostream& operator<<(std::ostream& os, const ErrorLocation& location);
    
-} // namespace core 
+} // namespace rscore 
 
-#define ERROR_LOCATION core::ErrorLocation( \
+#define ERROR_LOCATION rscore::ErrorLocation( \
       BOOST_CURRENT_FUNCTION,__FILE__,__LINE__)
 
 #define CATCH_UNEXPECTED_EXCEPTION \
diff --git a/src/cpp/core/include/core/Exec.hpp b/src/cpp/core/include/core/Exec.hpp
index 68771b3..8e9244d 100644
--- a/src/cpp/core/include/core/Exec.hpp
+++ b/src/cpp/core/include/core/Exec.hpp
@@ -20,14 +20,14 @@
 
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error ;   
    
 class ExecBlock
 {
 public:
-   typedef boost::function<core::Error()> Function ; 
+   typedef boost::function<rscore::Error()> Function ; 
 
 public:
    ExecBlock() {}
@@ -42,10 +42,10 @@ public:
    EasyInit addFunctions() { return EasyInit(this); }
    
    // execute the block
-   core::Error execute() const;
+   rscore::Error execute() const;
    
-   // allow an ExecBlock to act as a boost::function<core::Error()>
-   core::Error operator()() const;
+   // allow an ExecBlock to act as a boost::function<rscore::Error()>
+   rscore::Error operator()() const;
    
 public:
    // easy init helper class
@@ -66,7 +66,7 @@ private:
 };
    
 
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_EXEC_HPP
 
diff --git a/src/cpp/core/include/core/FileInfo.hpp b/src/cpp/core/include/core/FileInfo.hpp
index 25acdc9..a5bdc4c 100644
--- a/src/cpp/core/include/core/FileInfo.hpp
+++ b/src/cpp/core/include/core/FileInfo.hpp
@@ -28,7 +28,7 @@
 // TODO: satisfy outselves that it is safe to query for symlink status
 // in all cases and eliminate its "optional" semantics
 
-namespace core {
+namespace rscore {
 
 class FileInfo
 {
@@ -142,7 +142,7 @@ inline FileInfo toFileInfo(const FilePath& filePath)
 std::ostream& operator << (std::ostream& stream, const FileInfo& fileInfo) ;
 
    
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_FILE_INFO_HPP
diff --git a/src/cpp/core/include/core/FileLock.hpp b/src/cpp/core/include/core/FileLock.hpp
index b0705df..a11e3ca 100644
--- a/src/cpp/core/include/core/FileLock.hpp
+++ b/src/cpp/core/include/core/FileLock.hpp
@@ -19,7 +19,7 @@
 #include <boost/utility.hpp>
 #include <boost/scoped_ptr.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -45,7 +45,7 @@ private:
    boost::scoped_ptr<Impl> pImpl_;
 };
 
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_FILE_LOCK_HPP
diff --git a/src/cpp/core/include/core/FileLogWriter.hpp b/src/cpp/core/include/core/FileLogWriter.hpp
index ab45cd0..13d37be 100644
--- a/src/cpp/core/include/core/FileLogWriter.hpp
+++ b/src/cpp/core/include/core/FileLogWriter.hpp
@@ -19,7 +19,7 @@
 #include <core/FilePath.hpp>
 #include <core/LogWriter.hpp>
 
-namespace core {
+namespace rscore {
 
 class FileLogWriter : public LogWriter
 {
@@ -29,10 +29,10 @@ public:
                   const FilePath& logDir);
     virtual ~FileLogWriter();
 
-    virtual void log(core::system::LogLevel level,
+    virtual void log(rscore::system::LogLevel level,
                      const std::string& message);
     virtual void log(const std::string& programIdentity,
-                     core::system::LogLevel level,
+                     rscore::system::LogLevel level,
                      const std::string& message);
 
 
@@ -45,6 +45,6 @@ private:
     FilePath rotatedLogFile_;
 };
 
-} // namespace core
+} // namespace rscore
 
 #endif // FILE_LOG_WRITER_HPP
diff --git a/src/cpp/core/include/core/FilePath.hpp b/src/cpp/core/include/core/FilePath.hpp
index df83ddd..0af2051 100644
--- a/src/cpp/core/include/core/FilePath.hpp
+++ b/src/cpp/core/include/core/FilePath.hpp
@@ -32,7 +32,7 @@
 #include <core/Error.hpp>
 #include <core/Log.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error ;
 
@@ -49,7 +49,7 @@ public:
    
    static Error makeCurrent(const std::string& path);
 
-   static std::string createAliasedPath(const core::FilePath& path,
+   static std::string createAliasedPath(const rscore::FilePath& path,
                                         const FilePath& userHomePath);
    static FilePath resolveAliasedPath(const std::string& aliasedPath,
                                       const FilePath& userHomePath) ;
diff --git a/src/cpp/core/include/core/FileSerializer.hpp b/src/cpp/core/include/core/FileSerializer.hpp
index 9c16f15..67aaf7b 100644
--- a/src/cpp/core/include/core/FileSerializer.hpp
+++ b/src/cpp/core/include/core/FileSerializer.hpp
@@ -33,11 +33,11 @@
 #include <core/FilePath.hpp>
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 
 template <typename CollectionType>
 Error writeCollectionToFile(
-         const core::FilePath& filePath, 
+         const rscore::FilePath& filePath, 
          const CollectionType& collection,
          boost::function<std::string(
                                  const typename CollectionType::value_type&)>
@@ -86,7 +86,7 @@ enum ReadCollectionAction
    
 template <typename CollectionType>
 Error readCollectionFromFile(
-         const core::FilePath& filePath,
+         const rscore::FilePath& filePath,
          CollectionType* pCollection,
          boost::function<ReadCollectionAction(const std::string& line, 
                                  typename CollectionType::value_type* pValue)>
@@ -156,7 +156,7 @@ Error readCollectionFromFile(
 }
 
 template <typename ContentType>
-Error appendToFile(const core::FilePath& filePath,
+Error appendToFile(const rscore::FilePath& filePath,
                        const ContentType& content)
 {
    using namespace boost::system::errc ;
@@ -189,7 +189,7 @@ Error appendToFile(const core::FilePath& filePath,
 }
 
 template <typename T>
-Error appendStructToFile(const core::FilePath& filePath,
+Error appendStructToFile(const rscore::FilePath& filePath,
                          const T& data)
 {
    using namespace boost::system::errc ;
@@ -222,7 +222,7 @@ Error appendStructToFile(const core::FilePath& filePath,
 }
 
 template <typename T>
-Error readStructVectorFromFile(const core::FilePath& filePath,
+Error readStructVectorFromFile(const rscore::FilePath& filePath,
                                std::vector<T>* pVector)
 {
    using namespace boost::system::errc ;
@@ -266,26 +266,26 @@ ReadCollectionAction parseString(const std::string& line, std::string* pStr);
 std::string stringifyString(const std::string& str);
 
       
-Error writeStringMapToFile(const core::FilePath& filePath,
+Error writeStringMapToFile(const rscore::FilePath& filePath,
                            const std::map<std::string,std::string>& map) ;
 
-Error readStringMapFromFile(const core::FilePath& filePath,
+Error readStringMapFromFile(const rscore::FilePath& filePath,
                             std::map<std::string,std::string>* pMap) ;
    
-Error writeStringVectorToFile(const core::FilePath& filePath,
+Error writeStringVectorToFile(const rscore::FilePath& filePath,
                               const std::vector<std::string>& vector);
    
-Error readStringVectorFromFile(const core::FilePath& filePath,
+Error readStringVectorFromFile(const rscore::FilePath& filePath,
                                std::vector<std::string>* pVector,
                                bool trimAndIgnoreBlankLines=true);
 
 // lineEnding is the type of line ending you want to end up on disk
-Error writeStringToFile(const core::FilePath& filePath,
+Error writeStringToFile(const rscore::FilePath& filePath,
                         const std::string& str,
                         string_utils::LineEnding lineEnding=string_utils::LineEndingPassthrough);
 
 // lineEnding is the type of line ending you want the resulting string to have
-Error readStringFromFile(const core::FilePath& filePath,
+Error readStringFromFile(const rscore::FilePath& filePath,
                          std::string* pStr,
                          string_utils::LineEnding lineEnding=string_utils::LineEndingPassthrough,
                          int startLine = 0,
@@ -296,7 +296,7 @@ Error readStringFromFile(const core::FilePath& filePath,
 // read a string from a file with a filter
 template <typename Filter>
 Error readStringFromFile(
-   const core::FilePath& filePath,
+   const rscore::FilePath& filePath,
    const Filter& filter,
    std::string* pContents,
    string_utils::LineEnding lineEnding=string_utils::LineEndingPassthrough)
@@ -342,7 +342,7 @@ Error readStringFromFile(
 
 bool stripBOM(std::string* pStr);
 
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_FILE_SERIALIZER_HPP
diff --git a/src/cpp/core/include/core/FileUtils.hpp b/src/cpp/core/include/core/FileUtils.hpp
index 239ee48..78de2aa 100644
--- a/src/cpp/core/include/core/FileUtils.hpp
+++ b/src/cpp/core/include/core/FileUtils.hpp
@@ -20,17 +20,17 @@
 
 
 
-namespace core {
+namespace rscore {
 
 class FilePath;
 
 namespace file_utils {
 
-FilePath uniqueFilePath(const core::FilePath& parent,
+FilePath uniqueFilePath(const rscore::FilePath& parent,
                         const std::string& prefix = "");
 
 
 } // namespace file_utils
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_FILEUTILS_HPP
diff --git a/src/cpp/core/include/core/GitGraph.hpp b/src/cpp/core/include/core/GitGraph.hpp
index 8966ce8..039e29f 100644
--- a/src/cpp/core/include/core/GitGraph.hpp
+++ b/src/cpp/core/include/core/GitGraph.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/noncopyable.hpp>
 
-namespace core {
+namespace rscore {
 namespace gitgraph {
 
 struct Column
@@ -82,6 +82,6 @@ private:
 };
 
 } // namespace gitgraph
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_GITGRAPH_HPP
diff --git a/src/cpp/core/include/core/Hash.hpp b/src/cpp/core/include/core/Hash.hpp
index 6e6f29c..ce91f7b 100644
--- a/src/cpp/core/include/core/Hash.hpp
+++ b/src/cpp/core/include/core/Hash.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 namespace hash {
    
 std::string crc32Hash(const std::string& content);
@@ -26,7 +26,7 @@ std::string crc32Hash(const std::string& content);
 std::string crc32HexHash(const std::string& content);
 
 } // namespace hash
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_HASH_HPP
diff --git a/src/cpp/core/include/core/HtmlUtils.hpp b/src/cpp/core/include/core/HtmlUtils.hpp
index 14a9485..133a394 100644
--- a/src/cpp/core/include/core/HtmlUtils.hpp
+++ b/src/cpp/core/include/core/HtmlUtils.hpp
@@ -23,7 +23,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 namespace html_utils {
    
 std::string defaultTitle(const std::string& htmlContent);
@@ -56,7 +56,7 @@ private:
 
 
 } // namespace regex_utils
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_HTML_UTILS_HPP
diff --git a/src/cpp/core/include/core/IncrementalCommand.hpp b/src/cpp/core/include/core/IncrementalCommand.hpp
index 623b2cd..2cc2781 100644
--- a/src/cpp/core/include/core/IncrementalCommand.hpp
+++ b/src/cpp/core/include/core/IncrementalCommand.hpp
@@ -20,7 +20,7 @@
 
 #include <core/ScheduledCommand.hpp>
 
-namespace core {
+namespace rscore {
 
 class IncrementalCommand : public ScheduledCommand
 {
@@ -64,7 +64,7 @@ private:
 
 
 
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_INCREMENTAL_COMMAND_HPP
diff --git a/src/cpp/core/include/core/Log.hpp b/src/cpp/core/include/core/Log.hpp
index a27c7d7..5b8a226 100644
--- a/src/cpp/core/include/core/Log.hpp
+++ b/src/cpp/core/include/core/Log.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 
 class Error ;
 class ErrorLocation ;
@@ -44,23 +44,23 @@ void logDebugMessage(const std::string& message);
 std::string errorAsLogEntry(const Error& error);  
   
 } // namespace log
-} // namespace core 
+} // namespace rscore 
 
 // Macros for automatic inclusion of ERROR_LOCATION and easy ability to 
 // compile out logging calls
 
-#define LOG_ERROR(error) core::log::logError(error, ERROR_LOCATION) 
+#define LOG_ERROR(error) rscore::log::logError(error, ERROR_LOCATION) 
 
-#define LOG_ERROR_MESSAGE(message) core::log::logErrorMessage(message, \
+#define LOG_ERROR_MESSAGE(message) rscore::log::logErrorMessage(message, \
                                                               ERROR_LOCATION)
 
-#define LOG_WARNING_MESSAGE(message) core::log::logWarningMessage( \
+#define LOG_WARNING_MESSAGE(message) rscore::log::logWarningMessage( \
                                                                message, \
                                                                ERROR_LOCATION)
 
-#define LOG_INFO_MESSAGE(message) core::log::logInfoMessage(message)
+#define LOG_INFO_MESSAGE(message) rscore::log::logInfoMessage(message)
 
-#define LOG_DEBUG_MESSAGE(message) core::log::logDebugMessage(message)
+#define LOG_DEBUG_MESSAGE(message) rscore::log::logDebugMessage(message)
 
 #endif // CORE_LOG_HPP
 
diff --git a/src/cpp/core/include/core/LogWriter.hpp b/src/cpp/core/include/core/LogWriter.hpp
index c3dba6d..631b9d0 100644
--- a/src/cpp/core/include/core/LogWriter.hpp
+++ b/src/cpp/core/include/core/LogWriter.hpp
@@ -18,18 +18,18 @@
 
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 
 class LogWriter
 {
 public:
    virtual ~LogWriter() {}
 
-   virtual void log(core::system::LogLevel level,
+   virtual void log(rscore::system::LogLevel level,
                     const std::string& message) = 0;
 
    virtual void log(const std::string& programIdentity,
-                    core::system::LogLevel level,
+                    rscore::system::LogLevel level,
                     const std::string& message) = 0;
 
    // for subclasses that can do automatic chaining to stderr
@@ -47,10 +47,10 @@ namespace system {
 
 void setLogToStderr(bool logToStderr);
 
-void addLogWriter(boost::shared_ptr<core::LogWriter> pLogWriter);
+void addLogWriter(boost::shared_ptr<rscore::LogWriter> pLogWriter);
 
 } // namespace system
 
-} // namespace core
+} // namespace rscore
 
 #endif // LOG_WRITER_HPP
diff --git a/src/cpp/core/include/core/PerformanceTimer.hpp b/src/cpp/core/include/core/PerformanceTimer.hpp
index cdf2276..d1bc638 100644
--- a/src/cpp/core/include/core/PerformanceTimer.hpp
+++ b/src/cpp/core/include/core/PerformanceTimer.hpp
@@ -23,7 +23,7 @@
 #include <boost/utility.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
    
 class PerformanceTimer : boost::noncopyable
 {
@@ -56,9 +56,9 @@ private:
 
 std::ostream& operator << (std::ostream& os, const PerformanceTimer& t) ;
 
-} // namespace core 
+} // namespace rscore 
 
-#define TIME_FUNCTION core::PerformanceTimer t(BOOST_CURRENT_FUNCTION);
+#define TIME_FUNCTION rscore::PerformanceTimer t(BOOST_CURRENT_FUNCTION);
 
 #endif // CORE_PERFORMANCE_TIMER_HPP
 
diff --git a/src/cpp/core/include/core/PeriodicCommand.hpp b/src/cpp/core/include/core/PeriodicCommand.hpp
index d1200e0..3553fe4 100644
--- a/src/cpp/core/include/core/PeriodicCommand.hpp
+++ b/src/cpp/core/include/core/PeriodicCommand.hpp
@@ -19,7 +19,7 @@
 
 #include <core/ScheduledCommand.hpp>
 
-namespace core {
+namespace rscore {
 
 class PeriodicCommand : public ScheduledCommand
 {
@@ -64,7 +64,7 @@ private:
 
 
 
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_PERIODIC_COMMAND_HPP
diff --git a/src/cpp/core/include/core/Predicate.hpp b/src/cpp/core/include/core/Predicate.hpp
index cbb4cf4..08ba90c 100644
--- a/src/cpp/core/include/core/Predicate.hpp
+++ b/src/cpp/core/include/core/Predicate.hpp
@@ -19,7 +19,7 @@
 #include <boost/bind.hpp>
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 namespace predicate {
 
 template <typename T>
@@ -36,7 +36,7 @@ boost::function<bool(T)> range(const T& min, const T& max)
    
    
 } // namespace predicate
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_PREDICATE_HPP
diff --git a/src/cpp/core/include/core/ProgramOptions.hpp b/src/cpp/core/include/core/ProgramOptions.hpp
index 4f0f8d6..ced3af3 100644
--- a/src/cpp/core/include/core/ProgramOptions.hpp
+++ b/src/cpp/core/include/core/ProgramOptions.hpp
@@ -24,7 +24,7 @@
 
 #include <core/ProgramStatus.hpp>
 
-namespace core {
+namespace rscore {
    
 class Error;
 class ErrorLocation;
@@ -70,7 +70,7 @@ void reportWarnings(const std::string& warningMessages,
                     const ErrorLocation& location);
    
 } // namespace program_options
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_PROGRAM_OPTIONS_HPP
 
diff --git a/src/cpp/core/include/core/ProgramStatus.hpp b/src/cpp/core/include/core/ProgramStatus.hpp
index 66928ae..d4d6cd3 100644
--- a/src/cpp/core/include/core/ProgramStatus.hpp
+++ b/src/cpp/core/include/core/ProgramStatus.hpp
@@ -18,7 +18,7 @@
 
 #include <cstdlib>
 
-namespace core {
+namespace rscore {
 
 class ProgramStatus
 {  
@@ -51,7 +51,7 @@ private:
    int exitCode_ ;
 };
    
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_PROGRAM_STATUS_HPP
diff --git a/src/cpp/core/include/core/Random.hpp b/src/cpp/core/include/core/Random.hpp
index 9481eca..39b27d0 100644
--- a/src/cpp/core/include/core/Random.hpp
+++ b/src/cpp/core/include/core/Random.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/random.hpp>
 
-namespace core {
+namespace rscore {
 namespace random {
 
 template <typename T>
@@ -43,7 +43,7 @@ T uniformRandomInteger()
 }
 
 } // namespace random
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_RANDOM_HPP
diff --git a/src/cpp/core/include/core/RecursionGuard.hpp b/src/cpp/core/include/core/RecursionGuard.hpp
index 14fefa9..30952e4 100644
--- a/src/cpp/core/include/core/RecursionGuard.hpp
+++ b/src/cpp/core/include/core/RecursionGuard.hpp
@@ -21,7 +21,7 @@
       return; \
    RecursionGuard rg(&recursionCount)
 
-namespace core {
+namespace rscore {
 
 // RecursionGuard is a simple class intended to prevent reentrancy for a 
 // single function or other scoped block.  Given a reference to an appropriately
diff --git a/src/cpp/core/include/core/RegexUtils.hpp b/src/cpp/core/include/core/RegexUtils.hpp
index 507fa1d..6055c1c 100644
--- a/src/cpp/core/include/core/RegexUtils.hpp
+++ b/src/cpp/core/include/core/RegexUtils.hpp
@@ -22,7 +22,7 @@
 #include <boost/regex_fwd.hpp>
 #include <boost/iostreams/filter/regex.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -39,19 +39,19 @@ bool textMatches(const std::string& text,
                  bool prefixOnly,
                  bool caseSensitive);
 
-core::Error filterString(
+rscore::Error filterString(
                 const std::string& input,
                 const std::vector<boost::iostreams::regex_filter>& filters,
                 std::string* pOutput);
 
-core::Error filterString(
+rscore::Error filterString(
                 const std::string& input,
                 const boost::iostreams::regex_filter& filter,
                 std::string* pOutput);
 
 
 } // namespace regex_utils
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_REGEX_UTILS_HPP
diff --git a/src/cpp/core/include/core/SafeConvert.hpp b/src/cpp/core/include/core/SafeConvert.hpp
index 6d9aa57..d133e23 100644
--- a/src/cpp/core/include/core/SafeConvert.hpp
+++ b/src/cpp/core/include/core/SafeConvert.hpp
@@ -27,7 +27,7 @@
 #include <core/Log.hpp>
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace safe_convert {
    
 template <typename T>
@@ -86,7 +86,7 @@ TOutput numberTo(TInput input, TOutput defaultValue)
 }
 
 } // namespace safe_convert
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SAFE_CONVERT_HPP
diff --git a/src/cpp/core/include/core/ScheduledCommand.hpp b/src/cpp/core/include/core/ScheduledCommand.hpp
index e89fd1e..e0baaff 100644
--- a/src/cpp/core/include/core/ScheduledCommand.hpp
+++ b/src/cpp/core/include/core/ScheduledCommand.hpp
@@ -22,7 +22,7 @@
 
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
 
 // NOTE: execute function should return true if it has more work to do
 // or false to indicate all work is completed
@@ -57,7 +57,7 @@ protected:
 
 
 
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_SCHEDULED_COMMAND_HPP
diff --git a/src/cpp/core/include/core/Scope.hpp b/src/cpp/core/include/core/Scope.hpp
index 099939a..760037a 100644
--- a/src/cpp/core/include/core/Scope.hpp
+++ b/src/cpp/core/include/core/Scope.hpp
@@ -19,7 +19,7 @@
 #include <boost/function.hpp>
 #include <boost/noncopyable.hpp>
 
-namespace core {
+namespace rscore {
 namespace scope {
 
 template <class T>
@@ -66,7 +66,7 @@ private:
 };
 
 } // namespace scope
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SCOPE_HPP
diff --git a/src/cpp/core/include/core/Settings.hpp b/src/cpp/core/include/core/Settings.hpp
index 2c3b028..a61c2f4 100644
--- a/src/cpp/core/include/core/Settings.hpp
+++ b/src/cpp/core/include/core/Settings.hpp
@@ -24,7 +24,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error ;
 
diff --git a/src/cpp/core/include/core/StderrLogWriter.hpp b/src/cpp/core/include/core/StderrLogWriter.hpp
index 462c184..b365ab4 100644
--- a/src/cpp/core/include/core/StderrLogWriter.hpp
+++ b/src/cpp/core/include/core/StderrLogWriter.hpp
@@ -18,7 +18,7 @@
 
 #include <core/LogWriter.hpp>
 
-namespace core {
+namespace rscore {
 
 class StderrLogWriter : public LogWriter
 {
@@ -26,11 +26,11 @@ public:
     StderrLogWriter(const std::string& programIdentity, int logLevel);
     virtual ~StderrLogWriter();
 
-    virtual void log(core::system::LogLevel level,
+    virtual void log(rscore::system::LogLevel level,
                      const std::string& message);
 
     virtual void log(const std::string& programIdentity,
-                     core::system::LogLevel level,
+                     rscore::system::LogLevel level,
                      const std::string& message);
 
 private:
@@ -38,6 +38,6 @@ private:
     int logLevel_;
 };
 
-} // namespace core
+} // namespace rscore
 
 #endif // STDERR_LOG_WRITER_HPP
diff --git a/src/cpp/core/include/core/StringUtils.hpp b/src/cpp/core/include/core/StringUtils.hpp
index 3aea432..ed2a563 100644
--- a/src/cpp/core/include/core/StringUtils.hpp
+++ b/src/cpp/core/include/core/StringUtils.hpp
@@ -20,7 +20,7 @@
 #include <core/Error.hpp>
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 namespace string_utils {
 
 enum LineEnding {
@@ -175,7 +175,7 @@ void trimLeadingLines(int maxLines, std::string* pLines);
 void stripQuotes(std::string* pStr);
 
 } // namespace string_utils
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_STRING_UTILS_HPP
 
diff --git a/src/cpp/core/include/core/SyslogLogWriter.hpp b/src/cpp/core/include/core/SyslogLogWriter.hpp
index b424f3b..f460efd 100644
--- a/src/cpp/core/include/core/SyslogLogWriter.hpp
+++ b/src/cpp/core/include/core/SyslogLogWriter.hpp
@@ -18,17 +18,17 @@
 
 #include <core/LogWriter.hpp>
 
-namespace core {
+namespace rscore {
 
 class SyslogLogWriter : public LogWriter
 {
 public:
     SyslogLogWriter(const std::string& programIdentity, int logLevel);
     virtual ~SyslogLogWriter();
-    virtual void log(core::system::LogLevel level,
+    virtual void log(rscore::system::LogLevel level,
                      const std::string& message);
     virtual void log(const std::string& programIdentity,
-                     core::system::LogLevel level,
+                     rscore::system::LogLevel level,
                      const std::string& message);
 
     virtual void setLogToStderr(bool logToStderr)
@@ -41,6 +41,6 @@ private:
     bool logToStderr_;
 };
 
-} // namespace core
+} // namespace rscore
 
 #endif // SYSLOG_LOG_WRITER_HPP
diff --git a/src/cpp/core/include/core/Thread.hpp b/src/cpp/core/include/core/Thread.hpp
index 81cfcd6..3d000a6 100644
--- a/src/cpp/core/include/core/Thread.hpp
+++ b/src/cpp/core/include/core/Thread.hpp
@@ -39,7 +39,7 @@
       LOG_ERROR(threadError); \
    }
 
-namespace core {
+namespace rscore {
 namespace thread {
       
 template <typename T>
@@ -286,7 +286,7 @@ void safeLaunchThread(boost::function<void()> threadMain,
                       boost::thread* pThread = NULL);
       
 } // namespace thread
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_THREAD_HPP
 
diff --git a/src/cpp/core/include/core/Trace.hpp b/src/cpp/core/include/core/Trace.hpp
index ce2b7a9..23e4271 100644
--- a/src/cpp/core/include/core/Trace.hpp
+++ b/src/cpp/core/include/core/Trace.hpp
@@ -21,16 +21,16 @@
 
 #include <boost/current_function.hpp>
 
-namespace core { 
+namespace rscore { 
 namespace trace {
 
 void add(void* key, const std::string& functionName);
 
 } // namespace trace
-} // namespace core 
+} // namespace rscore 
 
 #define TRACE_CURRENT_METHOD \
-   core::trace::add(this, BOOST_CURRENT_FUNCTION);
+   rscore::trace::add(this, BOOST_CURRENT_FUNCTION);
 
 #endif // CORE_PERFORMANCE_TIMER_HPP
 
diff --git a/src/cpp/core/include/core/WaitUtils.hpp b/src/cpp/core/include/core/WaitUtils.hpp
index f20a86c..1b9b355 100644
--- a/src/cpp/core/include/core/WaitUtils.hpp
+++ b/src/cpp/core/include/core/WaitUtils.hpp
@@ -20,7 +20,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 
 
 enum WaitResultType {
@@ -45,6 +45,6 @@ Error waitWithTimeout(const boost::function<WaitResult()>& connectFunction,
                       int incrementWaitMs = 10,
                       int maxWaitSec = 10);
 
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_WAITUTILS_HPP
diff --git a/src/cpp/core/include/core/gwt/GwtFileHandler.hpp b/src/cpp/core/include/core/gwt/GwtFileHandler.hpp
index 4801e15..92726e5 100644
--- a/src/cpp/core/include/core/gwt/GwtFileHandler.hpp
+++ b/src/cpp/core/include/core/gwt/GwtFileHandler.hpp
@@ -18,7 +18,7 @@
 
 #include <core/http/UriHandler.hpp>
 
-namespace core {
+namespace rscore {
 namespace gwt {
       
 http::UriHandlerFunction fileHandlerFunction(
@@ -29,7 +29,7 @@ http::UriHandlerFunction fileHandlerFunction(
       bool useEmulatedStack = false);
    
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_GWT_FILE_HANDLER_HPP
 
diff --git a/src/cpp/core/include/core/gwt/GwtLogHandler.hpp b/src/cpp/core/include/core/gwt/GwtLogHandler.hpp
index 570f45a..f3fee23 100644
--- a/src/cpp/core/include/core/gwt/GwtLogHandler.hpp
+++ b/src/cpp/core/include/core/gwt/GwtLogHandler.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 
 class FilePath;
 
@@ -30,14 +30,14 @@ namespace http {
 namespace gwt {
    
 
-void initializeSymbolMaps(const core::FilePath& symbolMapsPath);
+void initializeSymbolMaps(const rscore::FilePath& symbolMapsPath);
 
 void handleLogRequest(const std::string& username,
                       const http::Request& request, 
                       http::Response* pResponse);
                            
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_GWT_LOG_HANDLER_HPP
 
diff --git a/src/cpp/core/include/core/gwt/GwtSymbolMaps.hpp b/src/cpp/core/include/core/gwt/GwtSymbolMaps.hpp
index fdf48f9..397dcbf 100644
--- a/src/cpp/core/include/core/gwt/GwtSymbolMaps.hpp
+++ b/src/cpp/core/include/core/gwt/GwtSymbolMaps.hpp
@@ -23,7 +23,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -59,6 +59,6 @@ private:
 };
 
 } // namespace gwt
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_GWT_SYMBOL_MAPS_HPP
diff --git a/src/cpp/core/include/core/http/AsyncClient.hpp b/src/cpp/core/include/core/http/AsyncClient.hpp
index c9a15df..9130bd9 100644
--- a/src/cpp/core/include/core/http/AsyncClient.hpp
+++ b/src/cpp/core/include/core/http/AsyncClient.hpp
@@ -52,11 +52,11 @@
       handleUnexpectedError("Unknown exception", ERROR_LOCATION); \
    }
 
-namespace core {
+namespace rscore {
 namespace http {
 
 typedef boost::function<void(const http::Response&)> ResponseHandler;
-typedef boost::function<void(const core::Error&)> ErrorHandler;
+typedef boost::function<void(const rscore::Error&)> ErrorHandler;
 
 
 template <typename SocketService>
@@ -136,7 +136,7 @@ public:
    void close()
    {
       Error error = closeSocket(socket().lowest_layer());
-      if (error && !core::http::isConnectionTerminatedError(error))
+      if (error && !rscore::http::isConnectionTerminatedError(error))
          logError(error);
    }
 
@@ -490,7 +490,7 @@ private:
    
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_ASYNC_CLIENT_HPP
 
diff --git a/src/cpp/core/include/core/http/AsyncConnection.hpp b/src/cpp/core/include/core/http/AsyncConnection.hpp
index 1d1fd68..1430661 100644
--- a/src/cpp/core/include/core/http/AsyncConnection.hpp
+++ b/src/cpp/core/include/core/http/AsyncConnection.hpp
@@ -21,7 +21,7 @@
 
 #include <core/http/Socket.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -53,6 +53,6 @@ public:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_ASYNC_CONNECTION_HPP
diff --git a/src/cpp/core/include/core/http/AsyncConnectionImpl.hpp b/src/cpp/core/include/core/http/AsyncConnectionImpl.hpp
index e12ca8b..c3ffd5a 100644
--- a/src/cpp/core/include/core/http/AsyncConnectionImpl.hpp
+++ b/src/cpp/core/include/core/http/AsyncConnectionImpl.hpp
@@ -34,7 +34,7 @@
 #include <core/http/RequestParser.hpp>
 #include <core/http/AsyncConnection.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
    
 template <typename ProtocolType>
@@ -143,7 +143,7 @@ public:
    virtual void close()
    {
       Error error = closeSocket(socket_);
-      if (error && !core::http::isConnectionTerminatedError(error))
+      if (error && !rscore::http::isConnectionTerminatedError(error))
          LOG_ERROR(error);
    }
    
@@ -257,7 +257,7 @@ private:
    
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_ASYNC_CONNECTION_IMPL_HPP
 
diff --git a/src/cpp/core/include/core/http/AsyncServer.hpp b/src/cpp/core/include/core/http/AsyncServer.hpp
index adb1564..cd7c001 100644
--- a/src/cpp/core/include/core/http/AsyncServer.hpp
+++ b/src/cpp/core/include/core/http/AsyncServer.hpp
@@ -27,7 +27,7 @@
 #include <core/http/UriHandler.hpp>
 #include <core/http/AsyncUriHandler.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class AsyncServer
@@ -68,7 +68,7 @@ public:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_ASYNC_SERVER_HPP
 
diff --git a/src/cpp/core/include/core/http/AsyncServerImpl.hpp b/src/cpp/core/include/core/http/AsyncServerImpl.hpp
index 1fd708c..6c59ad5 100644
--- a/src/cpp/core/include/core/http/AsyncServerImpl.hpp
+++ b/src/cpp/core/include/core/http/AsyncServerImpl.hpp
@@ -45,7 +45,7 @@
 #include <core/http/SocketAcceptorService.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace http {
 
 template <typename ProtocolType>
@@ -156,7 +156,7 @@ public:
          
          // block all signals for the creation of the thread pool
          // (prevents signals from occurring on any of the handler threads)
-         core::system::SignalBlocker signalBlocker;
+         rscore::system::SignalBlocker signalBlocker;
          Error error = signalBlocker.blockAll();
          if (error)
             return error ;
@@ -410,23 +410,23 @@ private:
    }
    
    void maybeAbortServer(const std::string& message, 
-                         const core::ErrorLocation& location)
+                         const rscore::ErrorLocation& location)
    {
       if (abortOnResourceError_)
       {
-         core::log::logErrorMessage("(ABORTING SERVER): " + message, location);
+         rscore::log::logErrorMessage("(ABORTING SERVER): " + message, location);
          ::abort();
       }
       else
       {
-         core::log::logWarningMessage(
+         rscore::log::logWarningMessage(
                   "Resource exhaustion error occurred (continuing to run)",
                   location);
       }
    }
    
    void checkForResourceExhaustion(const boost::system::error_code& ec,
-                                   const core::ErrorLocation& location)
+                                   const rscore::ErrorLocation& location)
    {
       if ( ec.category() == boost::system::get_system_category() &&
           (ec.value() == boost::system::errc::too_many_files_open ||
@@ -463,7 +463,7 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_ASYNC_SERVER_IMPL_HPP
 
diff --git a/src/cpp/core/include/core/http/AsyncUriHandler.hpp b/src/cpp/core/include/core/http/AsyncUriHandler.hpp
index 9a64b5c..8593d40 100644
--- a/src/cpp/core/include/core/http/AsyncUriHandler.hpp
+++ b/src/cpp/core/include/core/http/AsyncUriHandler.hpp
@@ -29,7 +29,7 @@
 #include <core/http/AsyncConnection.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace http {
 
 // AsyncUriHandlerFunction concept
@@ -104,7 +104,7 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_HTTP_ASYNC_URI_HANDLER_HPP
diff --git a/src/cpp/core/include/core/http/BlockingClient.hpp b/src/cpp/core/include/core/http/BlockingClient.hpp
index e7a1c16..ec34ba5 100644
--- a/src/cpp/core/include/core/http/BlockingClient.hpp
+++ b/src/cpp/core/include/core/http/BlockingClient.hpp
@@ -23,7 +23,7 @@
 
 #include <core/http/AsyncClient.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 namespace {
@@ -68,6 +68,6 @@ Error sendRequest(boost::asio::io_service& ioService,
    
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_BLOCKING_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/ConnectionRetryProfile.hpp b/src/cpp/core/include/core/http/ConnectionRetryProfile.hpp
index bb421a2..d1879d9 100644
--- a/src/cpp/core/include/core/http/ConnectionRetryProfile.hpp
+++ b/src/cpp/core/include/core/http/ConnectionRetryProfile.hpp
@@ -19,7 +19,7 @@
 #include <boost/function.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -55,6 +55,6 @@ struct ConnectionRetryProfile
 
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_CONNECTION_RETRY_PROFILE_HPP
diff --git a/src/cpp/core/include/core/http/Cookie.hpp b/src/cpp/core/include/core/http/Cookie.hpp
index f4087f5..ba6a903 100644
--- a/src/cpp/core/include/core/http/Cookie.hpp
+++ b/src/cpp/core/include/core/http/Cookie.hpp
@@ -21,7 +21,7 @@
 #include <boost/date_time/gregorian/gregorian.hpp>
 #include "Request.hpp"
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class Cookie
@@ -68,7 +68,7 @@ private:
 
 
 } // namespace http
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_HTTP_COOKIE_HTTP
diff --git a/src/cpp/core/include/core/http/Header.hpp b/src/cpp/core/include/core/http/Header.hpp
index c680d7a..8d3b61c 100644
--- a/src/cpp/core/include/core/http/Header.hpp
+++ b/src/cpp/core/include/core/http/Header.hpp
@@ -20,7 +20,7 @@
 #include <vector>
 #include <iosfwd>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 struct Header
@@ -65,6 +65,6 @@ void parseHeaders(std::istream& is, Headers* pHeaders);
 
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_HEADER_HPP
diff --git a/src/cpp/core/include/core/http/LocalStreamAsyncClient.hpp b/src/cpp/core/include/core/http/LocalStreamAsyncClient.hpp
index a81e386..a6c6185 100644
--- a/src/cpp/core/include/core/http/LocalStreamAsyncClient.hpp
+++ b/src/cpp/core/include/core/http/LocalStreamAsyncClient.hpp
@@ -26,7 +26,7 @@
 #include <core/http/AsyncClient.hpp>
 #include <core/http/LocalStreamSocketUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 class LocalStreamAsyncClient
@@ -97,11 +97,11 @@ private:
 
 private:
    boost::asio::local::stream_protocol::socket socket_;
-   core::FilePath localStreamPath_;
+   rscore::FilePath localStreamPath_;
 };
    
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_ASYNC_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/LocalStreamAsyncServer.hpp b/src/cpp/core/include/core/http/LocalStreamAsyncServer.hpp
index 475a8bb..5ff2e41 100644
--- a/src/cpp/core/include/core/http/LocalStreamAsyncServer.hpp
+++ b/src/cpp/core/include/core/http/LocalStreamAsyncServer.hpp
@@ -23,7 +23,7 @@
 
 #include <core/system/PosixUser.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class LocalStreamAsyncServer
@@ -32,7 +32,7 @@ class LocalStreamAsyncServer
 public:
    LocalStreamAsyncServer(const std::string& serverName,
                           const std::string& baseUri,
-                          core::system::FileMode fileMode)
+                          rscore::system::FileMode fileMode)
       : AsyncServerImpl<boost::asio::local::stream_protocol>(serverName, baseUri),
         fileMode_(fileMode)
    {
@@ -60,7 +60,7 @@ public:
    
    
 public:
-   Error init(const core::FilePath& localStreamPath)
+   Error init(const rscore::FilePath& localStreamPath)
    {
       // set stream path
       localStreamPath_ = localStreamPath;
@@ -86,8 +86,8 @@ private:
                           http::Request* pRequest)
    {
       // get peer identity
-      core::system::user::UserIdentity peerIdentity;
-      Error error = core::system::user::socketPeerIdentity(pSocket->native(), 
+      rscore::system::user::UserIdentity peerIdentity;
+      Error error = rscore::system::user::socketPeerIdentity(pSocket->native(), 
                                                            &peerIdentity);
       if (error)
       {
@@ -114,13 +114,13 @@ private:
    }
    
 private:
-   core::system::FileMode fileMode_;
-   core::FilePath localStreamPath_;
+   rscore::system::FileMode fileMode_;
+   rscore::FilePath localStreamPath_;
 
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_ASYNC_SERVER_HPP
 
diff --git a/src/cpp/core/include/core/http/LocalStreamBlockingClient.hpp b/src/cpp/core/include/core/http/LocalStreamBlockingClient.hpp
index 15b5aa5..79e0145 100644
--- a/src/cpp/core/include/core/http/LocalStreamBlockingClient.hpp
+++ b/src/cpp/core/include/core/http/LocalStreamBlockingClient.hpp
@@ -21,7 +21,7 @@
 
 #include <core/http/LocalStreamAsyncClient.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 inline Error sendRequest(const FilePath& localStreamPath,
@@ -41,6 +41,6 @@ inline Error sendRequest(const FilePath& localStreamPath,
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_BLOCKING_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/LocalStreamSocketUtils.hpp b/src/cpp/core/include/core/http/LocalStreamSocketUtils.hpp
index 5accb0b..9d09837 100644
--- a/src/cpp/core/include/core/http/LocalStreamSocketUtils.hpp
+++ b/src/cpp/core/include/core/http/LocalStreamSocketUtils.hpp
@@ -25,7 +25,7 @@
 
 #include <core/http/SocketAcceptorService.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 inline Error initializeStreamDir(const FilePath& streamDir)
@@ -48,8 +48,8 @@ inline Error initializeStreamDir(const FilePath& streamDir)
    
 inline Error initLocalStreamAcceptor(
    SocketAcceptorService<boost::asio::local::stream_protocol>& acceptorService,
-   const core::FilePath& localStreamPath,
-   core::system::FileMode fileMode)
+   const rscore::FilePath& localStreamPath,
+   rscore::system::FileMode fileMode)
 {
    // initialize endpoint
    using boost::asio::local::stream_protocol;
@@ -83,6 +83,6 @@ inline Error initLocalStreamAcceptor(
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_SOCKET_UTILS_HPP
diff --git a/src/cpp/core/include/core/http/Message.hpp b/src/cpp/core/include/core/http/Message.hpp
index 6fcd1c2..571b966 100644
--- a/src/cpp/core/include/core/http/Message.hpp
+++ b/src/cpp/core/include/core/http/Message.hpp
@@ -31,7 +31,7 @@ namespace asio {
 
 #include "Header.hpp"
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -159,6 +159,6 @@ private:
 std::ostream& operator << (std::ostream& stream, const Message& m) ;
 
 } // namespace http
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_HTTP_MESSAGE_HPP
diff --git a/src/cpp/core/include/core/http/MultipartRelated.hpp b/src/cpp/core/include/core/http/MultipartRelated.hpp
index 1b3f5d5..adac38b 100644
--- a/src/cpp/core/include/core/http/MultipartRelated.hpp
+++ b/src/cpp/core/include/core/http/MultipartRelated.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class MultipartRelated : boost::noncopyable
@@ -44,7 +44,7 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_HTTP_MULTIPART_RELATED_HPP
diff --git a/src/cpp/core/include/core/http/NamedPipeAsyncClient.hpp b/src/cpp/core/include/core/http/NamedPipeAsyncClient.hpp
index 047378a..fd36fae 100644
--- a/src/cpp/core/include/core/http/NamedPipeAsyncClient.hpp
+++ b/src/cpp/core/include/core/http/NamedPipeAsyncClient.hpp
@@ -28,7 +28,7 @@
 
 #include <core/http/NamedPipeProtocol.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class NamedPipeAsyncClient
@@ -129,6 +129,6 @@ private:
    
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_LOCAL_STREAM_ASYNC_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/NamedPipeBlockingClient.hpp b/src/cpp/core/include/core/http/NamedPipeBlockingClient.hpp
index dd2e2c6..29bf78f 100644
--- a/src/cpp/core/include/core/http/NamedPipeBlockingClient.hpp
+++ b/src/cpp/core/include/core/http/NamedPipeBlockingClient.hpp
@@ -21,7 +21,7 @@
 
 #include <core/http/NamedPipeAsyncClient.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 inline Error sendRequest(const std::string& pipeName,
@@ -42,6 +42,6 @@ inline Error sendRequest(const std::string& pipeName,
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_NAMED_PIPE_BLOCKING_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/NamedPipeProtocol.hpp b/src/cpp/core/include/core/http/NamedPipeProtocol.hpp
index 68344cc..591c4bd 100644
--- a/src/cpp/core/include/core/http/NamedPipeProtocol.hpp
+++ b/src/cpp/core/include/core/http/NamedPipeProtocol.hpp
@@ -23,7 +23,7 @@
 #include <core/http/SocketUtils.hpp>
 #include <core/http/AsyncConnectionImpl.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class NamedPipeProtocol
@@ -40,6 +40,6 @@ template<> Error closeSocket(
 template<> Error closeSocket(boost::asio::windows::stream_handle& socket);
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_NAMED_PIPE_PROTOCOL_HPP
diff --git a/src/cpp/core/include/core/http/Request.hpp b/src/cpp/core/include/core/http/Request.hpp
index feeeaed..7481311 100644
--- a/src/cpp/core/include/core/http/Request.hpp
+++ b/src/cpp/core/include/core/http/Request.hpp
@@ -22,7 +22,7 @@
 
 #include "Util.hpp"
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class Request : public Message
@@ -155,6 +155,6 @@ private:
 std::ostream& operator << (std::ostream& stream, const Request& r) ;
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_REQUEST_HPP
diff --git a/src/cpp/core/include/core/http/RequestParser.hpp b/src/cpp/core/include/core/http/RequestParser.hpp
index 0e17101..aafc073 100644
--- a/src/cpp/core/include/core/http/RequestParser.hpp
+++ b/src/cpp/core/include/core/http/RequestParser.hpp
@@ -19,7 +19,7 @@
 
 #include <core/http/Request.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 /// Parser for incoming requests.
@@ -126,6 +126,6 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_REQUEST_PARSER_HPP
diff --git a/src/cpp/core/include/core/http/Response.hpp b/src/cpp/core/include/core/http/Response.hpp
index a15bec3..2a872f0 100644
--- a/src/cpp/core/include/core/http/Response.hpp
+++ b/src/cpp/core/include/core/http/Response.hpp
@@ -34,7 +34,7 @@
 #include "Request.hpp"
 #include "Util.hpp"
 
-namespace core {
+namespace rscore {
    
 class ErrorLocation;
    
@@ -357,6 +357,6 @@ private:
 std::ostream& operator << (std::ostream& stream, const Response& r) ;
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_RESPONSE_HPP
diff --git a/src/cpp/core/include/core/http/ResponseParser.hpp b/src/cpp/core/include/core/http/ResponseParser.hpp
index f280c65..c5588cb 100644
--- a/src/cpp/core/include/core/http/ResponseParser.hpp
+++ b/src/cpp/core/include/core/http/ResponseParser.hpp
@@ -28,7 +28,7 @@
 #include <core/Error.hpp>
 #include <core/http/Response.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 // we use a class rather than a namespace so we can grant friendship
@@ -147,6 +147,6 @@ public:
 
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_RESPONSE_PARSER_HPP
diff --git a/src/cpp/core/include/core/http/Socket.hpp b/src/cpp/core/include/core/http/Socket.hpp
index 82fd02f..b9e82de 100644
--- a/src/cpp/core/include/core/http/Socket.hpp
+++ b/src/cpp/core/include/core/http/Socket.hpp
@@ -23,7 +23,7 @@
 
 #include <boost/asio/buffer.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 class Socket
@@ -44,6 +44,6 @@ public:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_SOCKET_HPP
diff --git a/src/cpp/core/include/core/http/SocketAcceptorService.hpp b/src/cpp/core/include/core/http/SocketAcceptorService.hpp
index b679e0c..0cc5cfd 100644
--- a/src/cpp/core/include/core/http/SocketAcceptorService.hpp
+++ b/src/cpp/core/include/core/http/SocketAcceptorService.hpp
@@ -28,7 +28,7 @@
 #include <core/Log.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace http {
 
 typedef boost::function<void(const boost::system::error_code& ec)> 
@@ -101,6 +101,6 @@ private:
 
 
 } // namespace http
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_HTTP_SOCKET_ACCEPTOR_SERVICE_HPP
diff --git a/src/cpp/core/include/core/http/SocketProxy.hpp b/src/cpp/core/include/core/http/SocketProxy.hpp
index 622c167..56fb6db 100644
--- a/src/cpp/core/include/core/http/SocketProxy.hpp
+++ b/src/cpp/core/include/core/http/SocketProxy.hpp
@@ -26,14 +26,14 @@
 #include <core/Error.hpp>
 #include <core/http/Socket.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class SocketProxy : public boost::enable_shared_from_this<SocketProxy>
 {
 public:
-   static void create(boost::shared_ptr<core::http::Socket> ptrClient,
-                      boost::shared_ptr<core::http::Socket> ptrServer)
+   static void create(boost::shared_ptr<rscore::http::Socket> ptrClient,
+                      boost::shared_ptr<rscore::http::Socket> ptrServer)
    {
       boost::shared_ptr<SocketProxy> pProxy(new SocketProxy(ptrClient,
                                                             ptrServer));
@@ -42,8 +42,8 @@ public:
    }
 
 private:
-   SocketProxy(boost::shared_ptr<core::http::Socket> ptrClient,
-               boost::shared_ptr<core::http::Socket> ptrServer)
+   SocketProxy(boost::shared_ptr<rscore::http::Socket> ptrClient,
+               boost::shared_ptr<rscore::http::Socket> ptrServer)
       : ptrClient_(ptrClient), ptrServer_(ptrServer)
    {
    }
@@ -60,20 +60,20 @@ private:
    void handleServerWrite(const boost::system::error_code& e,
                           std::size_t bytesTransferred);
    void handleError(const boost::system::error_code& e,
-                    const core::ErrorLocation& location);
+                    const rscore::ErrorLocation& location);
 
    void close();
 
 private:
-   boost::shared_ptr<core::http::Socket> ptrClient_;
-   boost::shared_ptr<core::http::Socket> ptrServer_;
+   boost::shared_ptr<rscore::http::Socket> ptrClient_;
+   boost::shared_ptr<rscore::http::Socket> ptrServer_;
    boost::array<char, 8192> clientBuffer_;
    boost::array<char, 8192> serverBuffer_;
    boost::mutex socketMutex_;
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_SOCKET_PROXY_HPP
 
diff --git a/src/cpp/core/include/core/http/SocketUtils.hpp b/src/cpp/core/include/core/http/SocketUtils.hpp
index 93e6be8..786760d 100644
--- a/src/cpp/core/include/core/http/SocketUtils.hpp
+++ b/src/cpp/core/include/core/http/SocketUtils.hpp
@@ -25,7 +25,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 template <typename SocketService>
@@ -47,7 +47,7 @@ Error closeSocket(SocketService& socket)
    return Success() ; 
 }
 
-inline bool isConnectionTerminatedError(const core::Error& error)
+inline bool isConnectionTerminatedError(const rscore::Error& error)
 {
    // look for errors that indicate the client closing the connection
    bool timedOut = error.code() == boost::asio::error::timed_out;
@@ -92,6 +92,6 @@ inline bool isConnectionUnavailableError(const Error& error)
 }
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_SOCKET_UTILS_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpAsyncClient.hpp b/src/cpp/core/include/core/http/TcpIpAsyncClient.hpp
index 76ee5e6..c4dc79b 100644
--- a/src/cpp/core/include/core/http/TcpIpAsyncClient.hpp
+++ b/src/cpp/core/include/core/http/TcpIpAsyncClient.hpp
@@ -27,7 +27,7 @@
 #include <core/http/TcpIpSocketUtils.hpp>
 #include <core/http/TcpIpAsyncConnector.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 class TcpIpAsyncClient :
@@ -84,6 +84,6 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_ASYNC_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp b/src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp
index 9188167..7c4dbf8 100644
--- a/src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp
+++ b/src/cpp/core/include/core/http/TcpIpAsyncClientSsl.hpp
@@ -29,7 +29,7 @@
 #include <core/http/AsyncClient.hpp>
 #include <core/http/TcpIpAsyncConnector.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 class TcpIpAsyncClientSsl
@@ -151,6 +151,6 @@ private:
    
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_ASYNC_CLIENT_SSL_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpAsyncConnector.hpp b/src/cpp/core/include/core/http/TcpIpAsyncConnector.hpp
index 31b0d69..a522604 100644
--- a/src/cpp/core/include/core/http/TcpIpAsyncConnector.hpp
+++ b/src/cpp/core/include/core/http/TcpIpAsyncConnector.hpp
@@ -39,7 +39,7 @@
       handleUnexpectedError("Unknown exception", ERROR_LOCATION); \
    }
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 class TcpIpAsyncConnector :
@@ -48,7 +48,7 @@ class TcpIpAsyncConnector :
 {
 public:
    typedef boost::function<void()> ConnectedHandler;
-   typedef boost::function<void(const core::Error&)> ErrorHandler;
+   typedef boost::function<void(const rscore::Error&)> ErrorHandler;
 
 public:
    TcpIpAsyncConnector(boost::asio::io_service& ioService,
@@ -166,6 +166,6 @@ private:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_ASYNC_CONNECTOR_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpAsyncServer.hpp b/src/cpp/core/include/core/http/TcpIpAsyncServer.hpp
index c0e06fd..48cfe70 100644
--- a/src/cpp/core/include/core/http/TcpIpAsyncServer.hpp
+++ b/src/cpp/core/include/core/http/TcpIpAsyncServer.hpp
@@ -21,7 +21,7 @@
 #include <core/http/AsyncServerImpl.hpp>
 #include <core/http/TcpIpSocketUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class TcpIpAsyncServer : public AsyncServerImpl<boost::asio::ip::tcp>
@@ -41,7 +41,7 @@ public:
 };
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_ASYNC_SERVER_HPP
 
diff --git a/src/cpp/core/include/core/http/TcpIpBlockingClient.hpp b/src/cpp/core/include/core/http/TcpIpBlockingClient.hpp
index 98490f7..efdfc1d 100644
--- a/src/cpp/core/include/core/http/TcpIpBlockingClient.hpp
+++ b/src/cpp/core/include/core/http/TcpIpBlockingClient.hpp
@@ -21,7 +21,7 @@
 
 #include <core/http/TcpIpAsyncClient.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 inline Error sendRequest(const std::string& address,
@@ -43,6 +43,6 @@ inline Error sendRequest(const std::string& address,
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_BLOCKING_CLIENT_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpBlockingClientSsl.hpp b/src/cpp/core/include/core/http/TcpIpBlockingClientSsl.hpp
index 0263083..35f609e 100644
--- a/src/cpp/core/include/core/http/TcpIpBlockingClientSsl.hpp
+++ b/src/cpp/core/include/core/http/TcpIpBlockingClientSsl.hpp
@@ -20,7 +20,7 @@
 
 #include <core/http/TcpIpAsyncClientSsl.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
 
 inline Error sendSslRequest(const std::string& address,
@@ -43,6 +43,6 @@ inline Error sendSslRequest(const std::string& address,
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_BLOCKING_CLIENT_SSL_HPP
diff --git a/src/cpp/core/include/core/http/TcpIpSocketUtils.hpp b/src/cpp/core/include/core/http/TcpIpSocketUtils.hpp
index 750cb5b..6a7b720 100644
--- a/src/cpp/core/include/core/http/TcpIpSocketUtils.hpp
+++ b/src/cpp/core/include/core/http/TcpIpSocketUtils.hpp
@@ -22,7 +22,7 @@
 
 #include <core/http/SocketAcceptorService.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {  
      
 template <typename SocketType>
@@ -109,6 +109,6 @@ inline Error initTcpIpAcceptor(
 }
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_TCP_IP_SOCKET_UTILS_HPP
diff --git a/src/cpp/core/include/core/http/URL.hpp b/src/cpp/core/include/core/http/URL.hpp
index 7a3d9a7..5088cb5 100644
--- a/src/cpp/core/include/core/http/URL.hpp
+++ b/src/cpp/core/include/core/http/URL.hpp
@@ -21,7 +21,7 @@
 
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 // NOTE: The URL class is a part of shared endpoint and association caches
@@ -130,7 +130,7 @@ std::ostream& operator << (std::ostream& stream, const URL& url);
    
 
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_HTTP_URL_HPP
diff --git a/src/cpp/core/include/core/http/UriHandler.hpp b/src/cpp/core/include/core/http/UriHandler.hpp
index 1858a9f..fa7ffdd 100644
--- a/src/cpp/core/include/core/http/UriHandler.hpp
+++ b/src/cpp/core/include/core/http/UriHandler.hpp
@@ -23,7 +23,7 @@
 
 #include <core/http/Response.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
 
 class Request;
@@ -84,7 +84,7 @@ inline void notFoundHandler(const Request& request, Response* pResponse)
 
    
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_HTTP_URI_HANDLER_HPP
 
diff --git a/src/cpp/core/include/core/http/Util.hpp b/src/cpp/core/include/core/http/Util.hpp
index 6bd779a..390ed6c 100644
--- a/src/cpp/core/include/core/http/Util.hpp
+++ b/src/cpp/core/include/core/http/Util.hpp
@@ -23,7 +23,7 @@
 #include <boost/lexical_cast.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
    
 class Error;
 
@@ -153,6 +153,6 @@ std::string pathAfterPrefix(const Request& request,
 } // namespace util
 
 } // namespace http
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_HTTP_UTIL_HPP
diff --git a/src/cpp/core/include/core/json/Json.hpp b/src/cpp/core/include/core/json/Json.hpp
index e501418..dce81c7 100644
--- a/src/cpp/core/include/core/json/Json.hpp
+++ b/src/cpp/core/include/core/json/Json.hpp
@@ -24,7 +24,7 @@
 
 #include <core/json/spirit/json_spirit_value.h>
 
-namespace core {
+namespace rscore {
 namespace json {
    
 // alias json_spirit type constants 
@@ -85,7 +85,7 @@ void write(const Value& value, std::ostream& os);
 void writeFormatted(const Value& value, std::ostream& os);
    
 } // namespace json
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_JSON_HPP
 
diff --git a/src/cpp/core/include/core/json/JsonRpc.hpp b/src/cpp/core/include/core/json/JsonRpc.hpp
index 5e2bab4..b4d4022 100644
--- a/src/cpp/core/include/core/json/JsonRpc.hpp
+++ b/src/cpp/core/include/core/json/JsonRpc.hpp
@@ -18,7 +18,7 @@
 
 #include <boost/system/error_code.hpp>
 
-namespace core {
+namespace rscore {
 namespace json {
 namespace errc {
 
@@ -57,12 +57,12 @@ enum errc_t {
 
 } // namespace errc
 } // namespace json
-} // namespace core
+} // namespace rscore
 
 namespace boost {
 namespace system {
 template <>
-struct is_error_code_enum<core::json::errc::errc_t>
+struct is_error_code_enum<rscore::json::errc::errc_t>
  { static const bool value = true; };
 } // namespace system
 } // namespace boost
@@ -79,13 +79,13 @@ struct is_error_code_enum<core::json::errc::errc_t>
 #include <core/Error.hpp>
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
    class Response ;
 }
 }
 
-namespace core {
+namespace rscore {
 namespace json {
 
 // constants
@@ -114,9 +114,9 @@ inline boost::system::error_condition make_error_condition( errc_t e )
 
 } // namespace errc
 } // namespace json
-} // namespace core
+} // namespace rscore
 
-namespace core {
+namespace rscore {
 namespace json {
 
 struct JsonRpcRequest
@@ -157,25 +157,25 @@ bool parseJsonRpcRequestForMethod(const std::string& input,
 //
    
 
-inline core::Error readParam(const json::Array& params, 
+inline rscore::Error readParam(const json::Array& params, 
                              unsigned int index, 
                              json::Value* pValue)
 {
    if (index >= params.size())
-      return core::Error(errc::ParamMissing, ERROR_LOCATION);
+      return rscore::Error(errc::ParamMissing, ERROR_LOCATION);
    
    *pValue = params[index] ;
    return Success();
 }
 
 template <typename T>
-core::Error readParam(const json::Array& params, unsigned int index, T* pValue)
+rscore::Error readParam(const json::Array& params, unsigned int index, T* pValue)
 {
    if (index >= params.size())
-      return core::Error(errc::ParamMissing, ERROR_LOCATION);
+      return rscore::Error(errc::ParamMissing, ERROR_LOCATION);
 
    if (!isType<T>(params[index]))
-      return core::Error(errc::ParamTypeMismatch, ERROR_LOCATION) ;
+      return rscore::Error(errc::ParamTypeMismatch, ERROR_LOCATION) ;
 
    *pValue = params[index].get_value<T>();
 
@@ -183,15 +183,15 @@ core::Error readParam(const json::Array& params, unsigned int index, T* pValue)
 }
    
 template <typename T1>
-core::Error readParams(const json::Array& params, T1* pValue1)
+rscore::Error readParams(const json::Array& params, T1* pValue1)
 {
    return readParam(params, 0, pValue1) ;
 }
 
 template <typename T1, typename T2>
-core::Error readParams(const json::Array& params, T1* pValue1, T2* pValue2)
+rscore::Error readParams(const json::Array& params, T1* pValue1, T2* pValue2)
 {
-   core::Error error = readParam(params, 0, pValue1) ;
+   rscore::Error error = readParam(params, 0, pValue1) ;
    if (error)
       return error ;
 
@@ -199,12 +199,12 @@ core::Error readParams(const json::Array& params, T1* pValue1, T2* pValue2)
 }
 
 template <typename T1, typename T2, typename T3>
-core::Error readParams(const json::Array& params, 
+rscore::Error readParams(const json::Array& params, 
                         T1* pValue1, 
                         T2* pValue2, 
                         T3* pValue3)
 {
-   core::Error error = readParams(params, pValue1, pValue2) ;
+   rscore::Error error = readParams(params, pValue1, pValue2) ;
    if (error)
       return error ;
 
@@ -212,13 +212,13 @@ core::Error readParams(const json::Array& params,
 }
 
 template <typename T1, typename T2, typename T3, typename T4>
-core::Error readParams(const json::Array& params, 
+rscore::Error readParams(const json::Array& params, 
                        T1* pValue1, 
                        T2* pValue2, 
                        T3* pValue3,
                        T4* pValue4)
 {
-   core::Error error = readParams(params, pValue1, pValue2, pValue3) ;
+   rscore::Error error = readParams(params, pValue1, pValue2, pValue3) ;
    if (error)
       return error ;
    
@@ -227,14 +227,14 @@ core::Error readParams(const json::Array& params,
 
    
 template <typename T1, typename T2, typename T3, typename T4, typename T5>
-core::Error readParams(const json::Array& params, 
+rscore::Error readParams(const json::Array& params, 
                        T1* pValue1, 
                        T2* pValue2, 
                        T3* pValue3,
                        T4* pValue4,
                        T5* pValue5)
 {
-   core::Error error = readParams(params, pValue1, pValue2, pValue3, pValue4) ;
+   rscore::Error error = readParams(params, pValue1, pValue2, pValue3, pValue4) ;
    if (error)
       return error ;
    
@@ -243,7 +243,7 @@ core::Error readParams(const json::Array& params,
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
           typename T6>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -251,7 +251,7 @@ core::Error readParams(const json::Array& params,
                        T5* pValue5,
                        T6* pValue6)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3, 
@@ -265,7 +265,7 @@ core::Error readParams(const json::Array& params,
    
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
 typename T6, typename T7>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -274,7 +274,7 @@ core::Error readParams(const json::Array& params,
                        T6* pValue6,
                        T7* pValue7)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3,
@@ -289,7 +289,7 @@ core::Error readParams(const json::Array& params,
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
 typename T6, typename T7, typename T8>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -299,7 +299,7 @@ core::Error readParams(const json::Array& params,
                        T7* pValue7,
                        T8* pValue8)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3,
@@ -315,7 +315,7 @@ core::Error readParams(const json::Array& params,
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
 typename T6, typename T7, typename T8, typename T9>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -326,7 +326,7 @@ core::Error readParams(const json::Array& params,
                        T8* pValue8,
                        T9* pValue9)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3,
@@ -343,7 +343,7 @@ core::Error readParams(const json::Array& params,
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
 typename T6, typename T7, typename T8, typename T9, typename T10>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -355,7 +355,7 @@ core::Error readParams(const json::Array& params,
                        T9* pValue9,
                        T10* pValue10)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3,
@@ -373,7 +373,7 @@ core::Error readParams(const json::Array& params,
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5,
 typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
-core::Error readParams(const json::Array& params,
+rscore::Error readParams(const json::Array& params,
                        T1* pValue1,
                        T2* pValue2,
                        T3* pValue3,
@@ -386,7 +386,7 @@ core::Error readParams(const json::Array& params,
                        T10* pValue10,
                        T11* pValue11)
 {
-   core::Error error = readParams(params,
+   rscore::Error error = readParams(params,
                                   pValue1,
                                   pValue2,
                                   pValue3,
@@ -404,7 +404,7 @@ core::Error readParams(const json::Array& params,
 }
 
 template <typename T>
-core::Error readObject(const json::Object& object, 
+rscore::Error readObject(const json::Object& object, 
                        const std::string& name, 
                        T* pValue)
 {
@@ -421,7 +421,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name,
                        const T& defaultValue,
                        T* pValue)
@@ -442,7 +442,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index, 
                             const std::string& name, 
                             T* pValue)
@@ -457,7 +457,7 @@ core::Error readObjectParam(const json::Array& params,
    
 
 template <typename T1, typename T2>
-core::Error readObject(const json::Object& object, 
+rscore::Error readObject(const json::Object& object, 
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2)
 {
@@ -469,7 +469,7 @@ core::Error readObject(const json::Object& object,
 }
    
 template <typename T1, typename T2>
-core::Error readObjectParam(const json::Array& params, 
+rscore::Error readObjectParam(const json::Array& params, 
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2)
@@ -483,7 +483,7 @@ core::Error readObjectParam(const json::Array& params,
 }
 
 template <typename T1, typename T2, typename T3>
-core::Error readObject(const json::Object& object, 
+rscore::Error readObject(const json::Object& object, 
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3)
@@ -496,7 +496,7 @@ core::Error readObject(const json::Object& object,
 }
    
 template <typename T1, typename T2, typename T3>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -511,7 +511,7 @@ core::Error readObjectParam(const json::Array& params,
 }
    
 template <typename T1, typename T2, typename T3, typename T4>
-core::Error readObject(const json::Object& object, 
+rscore::Error readObject(const json::Object& object, 
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -528,7 +528,7 @@ core::Error readObject(const json::Object& object,
 }
    
 template <typename T1, typename T2, typename T3, typename T4>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -549,7 +549,7 @@ core::Error readObjectParam(const json::Array& params,
 
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -568,7 +568,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -591,7 +591,7 @@ core::Error readObjectParam(const json::Array& params,
 
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -613,7 +613,7 @@ core::Error readObject(const json::Object& object,
 
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -638,7 +638,7 @@ core::Error readObjectParam(const json::Array& params,
 
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -661,7 +661,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -687,7 +687,7 @@ core::Error readObjectParam(const json::Array& params,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -712,7 +712,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -740,7 +740,7 @@ core::Error readObjectParam(const json::Array& params,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -767,7 +767,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -797,7 +797,7 @@ core::Error readObjectParam(const json::Array& params,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -826,7 +826,7 @@ core::Error readObject(const json::Object& object,
 }
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
-core::Error readObjectParam(const json::Array& params,
+rscore::Error readObjectParam(const json::Array& params,
                             unsigned int index,
                             const std::string& name1, T1* pValue1,
                             const std::string& name2, T2* pValue2,
@@ -859,7 +859,7 @@ core::Error readObjectParam(const json::Array& params,
 
 
 template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
-core::Error readObject(const json::Object& object,
+rscore::Error readObject(const json::Object& object,
                        const std::string& name1, T1* pValue1,
                        const std::string& name2, T2* pValue2,
                        const std::string& name3, T3* pValue3,
@@ -914,9 +914,9 @@ public:
       return response_[kRpcResult];
    }
    
-   void setError(const core::Error& error);
+   void setError(const rscore::Error& error);
 
-   void setError(const core::Error& error, const json::Value& clientInfo);
+   void setError(const rscore::Error& error, const json::Value& clientInfo);
 
    void setError(const boost::system::error_code& ec);
 
@@ -983,7 +983,7 @@ void setJsonRpcResult(const T& result, http::Response* pResponse)
 }   
 
 template <typename T>
-void setJsonRpcError(const T& error, core::http::Response* pResponse)
+void setJsonRpcError(const T& error, rscore::http::Response* pResponse)
 {   
    JsonRpcResponse jsonRpcResponse ;
    jsonRpcResponse.setError(error);
@@ -992,9 +992,9 @@ void setJsonRpcError(const T& error, core::http::Response* pResponse)
 
 
 // convenience typedefs for managing a map of json rpc functions
-typedef boost::function<core::Error(const core::json::JsonRpcRequest&, core::json::JsonRpcResponse*)>
+typedef boost::function<rscore::Error(const rscore::json::JsonRpcRequest&, rscore::json::JsonRpcResponse*)>
       JsonRpcFunction ;
-typedef std::pair<std::string,core::json::JsonRpcFunction>
+typedef std::pair<std::string,rscore::json::JsonRpcFunction>
       JsonRpcMethod ;
 typedef boost::unordered_map<std::string,JsonRpcFunction>
       JsonRpcMethods;
@@ -1009,9 +1009,9 @@ typedef boost::unordered_map<std::string,JsonRpcFunction>
 
 // JsonRpcFunctionContinuation is what a JsonRpcAsyncFunction needs to call
 // when its work is complete
-typedef boost::function<void(const core::Error&, core::json::JsonRpcResponse*)>
+typedef boost::function<void(const rscore::Error&, rscore::json::JsonRpcResponse*)>
       JsonRpcFunctionContinuation ;
-typedef boost::function<void(const core::json::JsonRpcRequest&, const JsonRpcFunctionContinuation&)>
+typedef boost::function<void(const rscore::json::JsonRpcRequest&, const JsonRpcFunctionContinuation&)>
       JsonRpcAsyncFunction ;
 // The bool in the next two typedefs specifies whether the function wants the
 // HTTP connection to stay open until the method finishes executing (direct return),
@@ -1020,7 +1020,7 @@ typedef boost::function<void(const core::json::JsonRpcRequest&, const JsonRpcFun
 // return). Direct return provides lower latency for short operations, and indirect
 // return must be used for longer-running operations to prevent the browser from
 // being starved of available HTTP connections to the server.
-typedef std::pair<std::string,std::pair<bool, core::json::JsonRpcAsyncFunction> >
+typedef std::pair<std::string,std::pair<bool, rscore::json::JsonRpcAsyncFunction> >
       JsonRpcAsyncMethod ;
 typedef boost::unordered_map<std::string,std::pair<bool, JsonRpcAsyncFunction> >
       JsonRpcAsyncMethods ;
@@ -1029,7 +1029,7 @@ JsonRpcAsyncFunction adaptToAsync(JsonRpcFunction synchronousFunction);
 JsonRpcAsyncMethod adaptMethodToAsync(JsonRpcMethod synchronousMethod);
 
 } // namespace json
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/include/core/libclang/CodeCompleteResults.hpp b/src/cpp/core/include/core/libclang/CodeCompleteResults.hpp
index 1fc9100..ca67891 100644
--- a/src/cpp/core/include/core/libclang/CodeCompleteResults.hpp
+++ b/src/cpp/core/include/core/libclang/CodeCompleteResults.hpp
@@ -22,7 +22,7 @@
 
 #include "Diagnostic.hpp"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class CodeCompleteResult
@@ -72,7 +72,7 @@ private:
 };
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_LIBCLANG_HPP
diff --git a/src/cpp/core/include/core/libclang/Cursor.hpp b/src/cpp/core/include/core/libclang/Cursor.hpp
index 6391277..5454c94 100644
--- a/src/cpp/core/include/core/libclang/Cursor.hpp
+++ b/src/cpp/core/include/core/libclang/Cursor.hpp
@@ -22,7 +22,7 @@
 
 #include "SourceLocation.hpp"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class Cursor
@@ -58,6 +58,6 @@ private:
 };
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_LIBCLANG_CURSOR_HPP
diff --git a/src/cpp/core/include/core/libclang/Diagnostic.hpp b/src/cpp/core/include/core/libclang/Diagnostic.hpp
index fde8b35..6cd6122 100644
--- a/src/cpp/core/include/core/libclang/Diagnostic.hpp
+++ b/src/cpp/core/include/core/libclang/Diagnostic.hpp
@@ -22,7 +22,7 @@
 
 #include "SourceLocation.hpp"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class Diagnostic
@@ -50,6 +50,6 @@ private:
 };
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_LIBCLANG_DIAGNOSTIC_HPP
diff --git a/src/cpp/core/include/core/libclang/LibClang.hpp b/src/cpp/core/include/core/libclang/LibClang.hpp
index 3d31534..37156b5 100644
--- a/src/cpp/core/include/core/libclang/LibClang.hpp
+++ b/src/cpp/core/include/core/libclang/LibClang.hpp
@@ -34,7 +34,7 @@
 #include "clang-c/Index.h"
 #include "clang-c/CXCompilationDatabase.h"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 struct LibraryVersion
@@ -108,7 +108,7 @@ public:
              LibraryVersion requiredVersion = LibraryVersion(3,4,0),
              std::string* pDiagnostics = NULL);
 
-   core::Error unload();
+   rscore::Error unload();
    bool isLoaded() const { return pLib_ != NULL; }
 
    // version
@@ -625,7 +625,7 @@ public:
    CXString (*CompileCommand_getArg)(CXCompileCommand, unsigned I);
 
 private:
-   core::Error tryLoad(const std::string& libraryPath,
+   rscore::Error tryLoad(const std::string& libraryPath,
                        LibraryVersion requiredVersion);
 
 private:
@@ -637,7 +637,7 @@ private:
 LibClang& clang();
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_LIBCLANG_LIBCLANG_HPP
diff --git a/src/cpp/core/include/core/libclang/SourceIndex.hpp b/src/cpp/core/include/core/libclang/SourceIndex.hpp
index ebbf3da..7de3467 100644
--- a/src/cpp/core/include/core/libclang/SourceIndex.hpp
+++ b/src/cpp/core/include/core/libclang/SourceIndex.hpp
@@ -27,7 +27,7 @@
 
 #include "TranslationUnit.hpp"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 struct CompilationDatabase
@@ -101,6 +101,6 @@ private:
 };
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_LIBCLANG_SOURCE_INDEX_HPP
diff --git a/src/cpp/core/include/core/libclang/SourceLocation.hpp b/src/cpp/core/include/core/libclang/SourceLocation.hpp
index fdbaa6a..43473d5 100644
--- a/src/cpp/core/include/core/libclang/SourceLocation.hpp
+++ b/src/cpp/core/include/core/libclang/SourceLocation.hpp
@@ -20,7 +20,7 @@
 
 #include "clang-c/Index.h"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class SourceLocation
@@ -57,6 +57,6 @@ private:
 
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_LIBCLANG_SOURCE_LOCATION_HPP
diff --git a/src/cpp/core/include/core/libclang/TranslationUnit.hpp b/src/cpp/core/include/core/libclang/TranslationUnit.hpp
index fa0648b..7a0931c 100644
--- a/src/cpp/core/include/core/libclang/TranslationUnit.hpp
+++ b/src/cpp/core/include/core/libclang/TranslationUnit.hpp
@@ -26,7 +26,7 @@
 #include "CodeCompleteResults.hpp"
 #include "UnsavedFiles.hpp"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class TranslationUnit
@@ -76,7 +76,7 @@ private:
 };
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_LIBCLANG_TRANSLATION_UNIT_HPP
diff --git a/src/cpp/core/include/core/libclang/UnsavedFiles.hpp b/src/cpp/core/include/core/libclang/UnsavedFiles.hpp
index 76ded7b..c703fa0 100644
--- a/src/cpp/core/include/core/libclang/UnsavedFiles.hpp
+++ b/src/cpp/core/include/core/libclang/UnsavedFiles.hpp
@@ -24,7 +24,7 @@
 
 #include "clang-c/Index.h"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 class UnsavedFiles : boost::noncopyable
@@ -52,7 +52,7 @@ std::ostream& operator << (std::ostream& ostr, UnsavedFiles& unsaved);
 
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_LIBCLANG_UNSAVED_FILES_HPP
diff --git a/src/cpp/core/include/core/libclang/Utils.hpp b/src/cpp/core/include/core/libclang/Utils.hpp
index f5f6f8e..83eb525 100644
--- a/src/cpp/core/include/core/libclang/Utils.hpp
+++ b/src/cpp/core/include/core/libclang/Utils.hpp
@@ -20,7 +20,7 @@
 
 #include "clang-c/CXString.h"
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 // note that this function disposes the underlying CXString so it
@@ -28,6 +28,6 @@ namespace libclang {
 std::string toStdString(CXString cxStr);
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_LIBCLANG_UTILS_HPP
diff --git a/src/cpp/core/include/core/markdown/Markdown.hpp b/src/cpp/core/include/core/markdown/Markdown.hpp
index 83e9f97..2adac01 100644
--- a/src/cpp/core/include/core/markdown/Markdown.hpp
+++ b/src/cpp/core/include/core/markdown/Markdown.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -102,7 +102,7 @@ Error markdownToHTML(const std::string& markdownInput,
 bool isMathJaxRequired(const std::string& htmlOutput);
 
 } // namespace markdown
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_MARKDOWN_MARKDOWN_HPP
 
diff --git a/src/cpp/core/include/core/r_util/REnvironment.hpp b/src/cpp/core/include/core/r_util/REnvironment.hpp
index 5495c0b..65e38c4 100644
--- a/src/cpp/core/include/core/r_util/REnvironment.hpp
+++ b/src/cpp/core/include/core/r_util/REnvironment.hpp
@@ -21,7 +21,7 @@
 
 #include <core/system/Types.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -40,7 +40,7 @@ bool detectREnvironment(const FilePath& whichRScript,
 
 void setREnvironmentVars(const EnvironmentVars& vars);
 void setREnvironmentVars(const EnvironmentVars& vars,
-                         core::system::Options* pEnv);
+                         rscore::system::Options* pEnv);
 
 std::string rLibraryPath(const FilePath& rHomePath,
                          const FilePath& rLibPath,
@@ -52,7 +52,7 @@ Error rVersion(const FilePath& rHomePath,
                std::string* pVersion);
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_ENVIRONMENT_HPP
diff --git a/src/cpp/core/include/core/r_util/RPackageInfo.hpp b/src/cpp/core/include/core/r_util/RPackageInfo.hpp
index fbaf2a5..67493fc 100644
--- a/src/cpp/core/include/core/r_util/RPackageInfo.hpp
+++ b/src/cpp/core/include/core/r_util/RPackageInfo.hpp
@@ -20,7 +20,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -66,7 +66,7 @@ private:
 bool isPackageDirectory(const FilePath& dir);
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_PACKAGE_INFO_HPP
diff --git a/src/cpp/core/include/core/r_util/RProjectFile.hpp b/src/cpp/core/include/core/r_util/RProjectFile.hpp
index b395cf5..bceba3e 100644
--- a/src/cpp/core/include/core/r_util/RProjectFile.hpp
+++ b/src/cpp/core/include/core/r_util/RProjectFile.hpp
@@ -21,7 +21,7 @@
 
 #include <core/r_util/RVersionInfo.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -133,7 +133,7 @@ FilePath projectFromDirectory(const FilePath& directoryPath);
 bool updateSetPackageInstallArgsDefault(RProjectConfig* pConfig);
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_PROJECT_FILE_HPP
diff --git a/src/cpp/core/include/core/r_util/RSessionContext.hpp b/src/cpp/core/include/core/r_util/RSessionContext.hpp
index 3b91b35..ea42df4 100644
--- a/src/cpp/core/include/core/r_util/RSessionContext.hpp
+++ b/src/cpp/core/include/core/r_util/RSessionContext.hpp
@@ -34,7 +34,7 @@
 #define kRStudioInitialEnvironment     "RS_INITIAL_ENV"
 #define kRStudioInitialProject         "RS_INITIAL_PROJECT"
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 enum SessionType
@@ -69,7 +69,7 @@ RVersionInfo nextSessionRVersion(SessionType sessionType,
                                  const std::string& homePath = std::string());
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_SESSION_CONTEXT_HPP
diff --git a/src/cpp/core/include/core/r_util/RSessionLaunchProfile.hpp b/src/cpp/core/include/core/r_util/RSessionLaunchProfile.hpp
index a950e38..2fe54ae 100644
--- a/src/cpp/core/include/core/r_util/RSessionLaunchProfile.hpp
+++ b/src/cpp/core/include/core/r_util/RSessionLaunchProfile.hpp
@@ -22,7 +22,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 struct SessionLaunchProfile
@@ -30,7 +30,7 @@ struct SessionLaunchProfile
    std::string username;
    std::string password;
    std::string executablePath;
-   core::system::ProcessConfig config;
+   rscore::system::ProcessConfig config;
 };
 
 json::Object sessionLaunchProfileToJson(const SessionLaunchProfile& profile);
@@ -39,7 +39,7 @@ SessionLaunchProfile sessionLaunchProfileFromJson(
                                            const json::Object& jsonProfile);
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_SESSION_LAUNCH_PROFILE_HPP
diff --git a/src/cpp/core/include/core/r_util/RSourceIndex.hpp b/src/cpp/core/include/core/r_util/RSourceIndex.hpp
index 19537ee..c743615 100644
--- a/src/cpp/core/include/core/r_util/RSourceIndex.hpp
+++ b/src/cpp/core/include/core/r_util/RSourceIndex.hpp
@@ -33,7 +33,7 @@
 
 #include <core/r_util/RTokenizer.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 class RS4MethodParam
@@ -120,8 +120,8 @@ public:
    const std::string& name() const { return name_; }
    const std::vector<RS4MethodParam>& signature() const { return signature_; }
    const int braceLevel() const { return braceLevel_; }
-   int line() const { return core::safe_convert::numberTo<int>(line_,0); }
-   int column() const { return core::safe_convert::numberTo<int>(column_,0); }
+   int line() const { return rscore::safe_convert::numberTo<int>(line_,0); }
+   int column() const { return rscore::safe_convert::numberTo<int>(column_,0); }
 
    // support for RSourceIndex::search
 
@@ -192,7 +192,7 @@ public:
                   OutputIterator out) const
    {
       // perform the copy and transform to include context
-      core::algorithm::copy_transformed_if(
+      rscore::algorithm::copy_transformed_if(
                 items_.begin(),
                 items_.end(),
                 out,
@@ -263,7 +263,7 @@ private:
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_SOURCE_INDEX_HPP
diff --git a/src/cpp/core/include/core/r_util/RTokenizer.hpp b/src/cpp/core/include/core/r_util/RTokenizer.hpp
index f35f94f..070ddb7 100644
--- a/src/cpp/core/include/core/r_util/RTokenizer.hpp
+++ b/src/cpp/core/include/core/r_util/RTokenizer.hpp
@@ -29,7 +29,7 @@
    #error "wchar_t is not Unicode"
 #endif
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -214,7 +214,7 @@ private:
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_ENVIRONMENT_HPP
diff --git a/src/cpp/core/include/core/r_util/RToolsInfo.hpp b/src/cpp/core/include/core/r_util/RToolsInfo.hpp
index 71fd111..36d4b36 100644
--- a/src/cpp/core/include/core/r_util/RToolsInfo.hpp
+++ b/src/cpp/core/include/core/r_util/RToolsInfo.hpp
@@ -25,7 +25,7 @@
 #include <core/FilePath.hpp>
 #include <core/system/Environment.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 class RToolsInfo
@@ -68,13 +68,13 @@ void prependToSystemPath(const RToolsInfo& toolsInfo, T* pTarget)
    {
       std::string path = it->absolutePath();
       boost::algorithm::replace_all(path, "/", "\\");
-      core::system::addToPath(pTarget, path, true);
+      rscore::system::addToPath(pTarget, path, true);
    }
 }
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_TOOLS_INFO_HPP
diff --git a/src/cpp/core/include/core/r_util/RVersionInfo.hpp b/src/cpp/core/include/core/r_util/RVersionInfo.hpp
index 9b018dd..81da541 100644
--- a/src/cpp/core/include/core/r_util/RVersionInfo.hpp
+++ b/src/cpp/core/include/core/r_util/RVersionInfo.hpp
@@ -28,7 +28,7 @@
 #define kRVersionArch32    "32"
 #define kRVersionArch64    "64"
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 struct RVersionInfo
@@ -115,7 +115,7 @@ inline std::ostream& operator<<(std::ostream& os, const RVersionNumber& ver)
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_R_UTIL_R_VERSION_INFO_HPP
diff --git a/src/cpp/core/include/core/r_util/RVersionsPosix.hpp b/src/cpp/core/include/core/r_util/RVersionsPosix.hpp
index 8e147c0..9f0abe8 100644
--- a/src/cpp/core/include/core/r_util/RVersionsPosix.hpp
+++ b/src/cpp/core/include/core/r_util/RVersionsPosix.hpp
@@ -25,7 +25,7 @@
 
 #include <core/r_util/RVersionInfo.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 struct RVersion
@@ -33,11 +33,11 @@ struct RVersion
    RVersion() : isDefault(false) {}
    bool isDefault;
    std::string number;
-   core::system::Options environment;
+   rscore::system::Options environment;
 
    FilePath homeDir() const
    {
-      return FilePath(core::system::getenv(environment, "R_HOME"));
+      return FilePath(rscore::system::getenv(environment, "R_HOME"));
    }
 };
 
@@ -53,7 +53,7 @@ RVersion selectVersion(const RVersionInfo& matchVersion,
                        std::vector<RVersion> versions);
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_R_UTIL_R_VERSIONS_HPP
 
diff --git a/src/cpp/core/include/core/spelling/HunspellCustomDictionaries.hpp b/src/cpp/core/include/core/spelling/HunspellCustomDictionaries.hpp
index 7358262..ef27c09 100644
--- a/src/cpp/core/include/core/spelling/HunspellCustomDictionaries.hpp
+++ b/src/cpp/core/include/core/spelling/HunspellCustomDictionaries.hpp
@@ -21,7 +21,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -48,11 +48,11 @@ public:
    Error remove(const std::string& name) const;
 
 private:
-   core::FilePath customDictionariesDir_;
+   rscore::FilePath customDictionariesDir_;
 };
 
 } // namespace spelling
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SPELLING_HUNSPELL_CUSTOM_DICTIONARIES_HPP
diff --git a/src/cpp/core/include/core/spelling/HunspellDictionaryManager.hpp b/src/cpp/core/include/core/spelling/HunspellDictionaryManager.hpp
index 6e7a5b8..0adcf8c 100644
--- a/src/cpp/core/include/core/spelling/HunspellDictionaryManager.hpp
+++ b/src/cpp/core/include/core/spelling/HunspellDictionaryManager.hpp
@@ -23,7 +23,7 @@
 
 #include <core/spelling/HunspellCustomDictionaries.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -83,7 +83,7 @@ public:
 
    bool allLanguagesInstalled() const { return allLanguagesDir().exists(); }
 
-   core::Error availableLanguages(
+   rscore::Error availableLanguages(
                      std::vector<HunspellDictionary>* pDictionaries) const;
 
    HunspellDictionary dictionaryForLanguageId(const std::string& langId) const;
@@ -91,17 +91,17 @@ public:
    const HunspellCustomDictionaries& custom() const;
 
 private:
-   core::FilePath allLanguagesDir() const;
-   core::FilePath userLanguagesDir() const;
+   rscore::FilePath allLanguagesDir() const;
+   rscore::FilePath userLanguagesDir() const;
 
 private:
-   core::FilePath coreLanguagesDir_;
-   core::FilePath userDir_;
+   rscore::FilePath coreLanguagesDir_;
+   rscore::FilePath userDir_;
    HunspellCustomDictionaries customDicts_;
 };
 
 } // namespace spelling
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SPELLING_HUNSPELL_DICTIONARY_MANAGER_HPP
diff --git a/src/cpp/core/include/core/spelling/HunspellSpellingEngine.hpp b/src/cpp/core/include/core/spelling/HunspellSpellingEngine.hpp
index 8fc4412..5780b79 100644
--- a/src/cpp/core/include/core/spelling/HunspellSpellingEngine.hpp
+++ b/src/cpp/core/include/core/spelling/HunspellSpellingEngine.hpp
@@ -23,13 +23,13 @@
 
 #include <core/spelling/HunspellDictionaryManager.hpp>
 
-namespace core {
+namespace rscore {
 
 class FilePath;
 
 namespace spelling {
 
-typedef boost::function<core::Error(const std::string&,
+typedef boost::function<rscore::Error(const std::string&,
                                     const std::string&,
                                     const std::string&,
                                     bool,
@@ -60,7 +60,7 @@ private:
 };
 
 } // namespace spelling
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SPELLING_HUNSPELL_SPELLING_ENGINE_HPP
diff --git a/src/cpp/core/include/core/spelling/SpellingEngine.hpp b/src/cpp/core/include/core/spelling/SpellingEngine.hpp
index 289b62f..2f0e4f5 100644
--- a/src/cpp/core/include/core/spelling/SpellingEngine.hpp
+++ b/src/cpp/core/include/core/spelling/SpellingEngine.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -44,7 +44,7 @@ public:
 };
 
 } // namespace spelling
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_SPELLING_SPELLING_ENGINE_HPP
diff --git a/src/cpp/core/include/core/system/Crypto.hpp b/src/cpp/core/include/core/system/Crypto.hpp
index 09c00b5..1293a62 100644
--- a/src/cpp/core/include/core/system/Crypto.hpp
+++ b/src/cpp/core/include/core/system/Crypto.hpp
@@ -21,40 +21,40 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace crypto {
       
 void initialize();   
 
-core::Error HMAC_SHA1(const std::string& data, 
+rscore::Error HMAC_SHA1(const std::string& data, 
                       const std::string& key,
                       std::vector<unsigned char>* pHMAC);
 
-core::Error HMAC_SHA1(const std::string& data, 
+rscore::Error HMAC_SHA1(const std::string& data, 
                       const std::vector<unsigned char>& key,
                       std::vector<unsigned char>* pHMAC);   
    
-core::Error base64Encode(const std::vector<unsigned char>& data, 
+rscore::Error base64Encode(const std::vector<unsigned char>& data, 
                          std::string* pEncoded);   
    
-core::Error base64Encode(const unsigned char* pData, 
+rscore::Error base64Encode(const unsigned char* pData, 
                          int len, 
                          std::string* pEncoded);
    
-core::Error base64Decode(const std::string& data, 
+rscore::Error base64Decode(const std::string& data, 
                          std::vector<unsigned char>* pDecoded);
 
-core::Error rsaInit();
+rscore::Error rsaInit();
 
 void rsaPublicKey(std::string* pExponent, std::string* pModulo);
 
-core::Error rsaPrivateDecrypt(const std::string& pCipherText, std::string* pPlainText);
+rscore::Error rsaPrivateDecrypt(const std::string& pCipherText, std::string* pPlainText);
 
          
 } // namespace crypto
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_CRYPTO_HPP
 
diff --git a/src/cpp/core/include/core/system/Environment.hpp b/src/cpp/core/include/core/system/Environment.hpp
index bb5236d..0bf54ae 100644
--- a/src/cpp/core/include/core/system/Environment.hpp
+++ b/src/cpp/core/include/core/system/Environment.hpp
@@ -20,7 +20,7 @@
 
 #include <core/system/Types.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 // NOTE: all environment variables are UTF8-encoded
@@ -82,6 +82,6 @@ void addToPath(Options* pEnvironment,
 bool parseEnvVar(const std::string envVar, Option* pEnvVar);
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_ENVIRONMENT_HPP
diff --git a/src/cpp/core/include/core/system/FileChangeEvent.hpp b/src/cpp/core/include/core/system/FileChangeEvent.hpp
index 33edb95..c210854 100644
--- a/src/cpp/core/include/core/system/FileChangeEvent.hpp
+++ b/src/cpp/core/include/core/system/FileChangeEvent.hpp
@@ -24,7 +24,7 @@
 
 #include <core/FileInfo.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
    
@@ -44,7 +44,7 @@ public:
    };
    
 public:
-   FileChangeEvent(Type type, const core::FileInfo& fileInfo)
+   FileChangeEvent(Type type, const rscore::FileInfo& fileInfo)
       : type_(type), fileInfo_(fileInfo)
    {
    }
@@ -67,7 +67,7 @@ public:
    
 private:
    Type type_;
-   core::FileInfo fileInfo_;
+   rscore::FileInfo fileInfo_;
 };
 
 inline std::ostream& operator << (std::ostream& ostr, 
@@ -172,7 +172,7 @@ void collectFileChangeEvents(PreviousIterator prevBegin,
 }
   
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_SYSTEM_FILE_CHANGE_EVENT_HPP
 
diff --git a/src/cpp/core/include/core/system/FileMode.hpp b/src/cpp/core/include/core/system/FileMode.hpp
index 5933a67..211d39c 100644
--- a/src/cpp/core/include/core/system/FileMode.hpp
+++ b/src/cpp/core/include/core/system/FileMode.hpp
@@ -26,7 +26,7 @@
 #include <core/Error.hpp>
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 enum FileMode
@@ -147,6 +147,6 @@ inline Error getFileMode(const FilePath& filePath, FileMode* pFileMode)
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_FILE_MODE_HPP
diff --git a/src/cpp/core/include/core/system/FileMonitor.hpp b/src/cpp/core/include/core/system/FileMonitor.hpp
index 72f3215..ba9e861 100644
--- a/src/cpp/core/include/core/system/FileMonitor.hpp
+++ b/src/cpp/core/include/core/system/FileMonitor.hpp
@@ -34,7 +34,7 @@
 // both extremely large trees and or self-referential (and thus infinitely
 // recursive) trees.
 
-namespace core {   
+namespace rscore {   
 namespace system {
 namespace file_monitor {
 
@@ -59,7 +59,7 @@ struct Handle
    }
 
    explicit Handle(void* pData)
-      : id(core::system::generateUuid()),
+      : id(rscore::system::generateUuid()),
         pData(pData)
    {
    }
@@ -89,11 +89,11 @@ struct Callbacks
    boost::function<void(Handle, const tree<FileInfo>&)> onRegistered;
 
    // callback which occurs if a registration error occurs
-   boost::function<void(const core::Error&)> onRegistrationError;
+   boost::function<void(const rscore::Error&)> onRegistrationError;
 
    // callback which occurs if an error occurs during monitoring (the
    // monitor is automatically unregistered if a monitoring error occurs)
-   boost::function<void(const core::Error&)> onMonitoringError;
+   boost::function<void(const rscore::Error&)> onMonitoringError;
 
    // callback which occurs when files change
    boost::function<void(const std::vector<FileChangeEvent>&)> onFilesChanged;
@@ -115,7 +115,7 @@ struct Callbacks
 // guarantee that the deletion of your shared_ptr object is invoked on the same
 // thread that called registerMonitor you should also bind a function to
 // onUnregistered (otherwise the delete will occur on the file monitoring thread)
-void registerMonitor(const core::FilePath& filePath,
+void registerMonitor(const rscore::FilePath& filePath,
                      bool recursive,
                      const boost::function<bool(const FileInfo&)>& filter,
                      const Callbacks& callbacks);
@@ -153,7 +153,7 @@ boost::function<bool(const FileInfo&)> excludeHiddenFilter();
 
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_SYSTEM_FILE_MONITOR_HPP
 
diff --git a/src/cpp/core/include/core/system/FileScanner.hpp b/src/cpp/core/include/core/system/FileScanner.hpp
index 501c78e..ae1863e 100644
--- a/src/cpp/core/include/core/system/FileScanner.hpp
+++ b/src/cpp/core/include/core/system/FileScanner.hpp
@@ -25,7 +25,7 @@
 #include <core/collection/Tree.hpp>
 
 
-namespace core {
+namespace rscore {
 
 // recursively enumerate files from the specified root. these functions
 // are symlink aware -- this has two implications:
@@ -61,6 +61,6 @@ inline Error scanFiles(const FileInfo& fromRoot,
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_FILE_SCANNER_HPP
diff --git a/src/cpp/core/include/core/system/LibraryLoader.hpp b/src/cpp/core/include/core/system/LibraryLoader.hpp
index 9fd006e..0b77877 100644
--- a/src/cpp/core/include/core/system/LibraryLoader.hpp
+++ b/src/cpp/core/include/core/system/LibraryLoader.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -29,6 +29,6 @@ Error loadSymbol(void* pLib, const std::string& name, void** ppSymbol);
 Error closeLibrary(void* pLib);
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_LIBRARY_LOADER_HPP
diff --git a/src/cpp/core/include/core/system/OutputCapture.hpp b/src/cpp/core/include/core/system/OutputCapture.hpp
index 74c3c8a..560ed43 100644
--- a/src/cpp/core/include/core/system/OutputCapture.hpp
+++ b/src/cpp/core/include/core/system/OutputCapture.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -31,7 +31,7 @@ Error captureStandardStreams(
          const boost::function<void(const std::string&)>& stderrHandler);
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_OUTPUT_CAPTURE_HPP
 
diff --git a/src/cpp/core/include/core/system/Pam.hpp b/src/cpp/core/include/core/system/Pam.hpp
index 676c465..5ec302e 100644
--- a/src/cpp/core/include/core/system/Pam.hpp
+++ b/src/cpp/core/include/core/system/Pam.hpp
@@ -19,7 +19,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 // NOTE: Mac OS X supports PAM but ships with it in a locked-down config
@@ -55,4 +55,4 @@ protected:
 };
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/include/core/system/ParentProcessMonitor.hpp b/src/cpp/core/include/core/system/ParentProcessMonitor.hpp
index 2067d01..38e4871 100644
--- a/src/cpp/core/include/core/system/ParentProcessMonitor.hpp
+++ b/src/cpp/core/include/core/system/ParentProcessMonitor.hpp
@@ -19,7 +19,7 @@
 #include <core/Error.hpp>
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 namespace parent_process_monitor {
 
 Error wrapFork(boost::function<void()> func);
@@ -34,6 +34,6 @@ enum ParentTermination {
 ParentTermination waitForParentTermination();
 
 } // namespace parent_process_monitor
-} // namespace core
+} // namespace rscore
 
 #endif // PARENT_PROCESS_MONITOR_HPP
diff --git a/src/cpp/core/include/core/system/PosixChildProcessTracker.hpp b/src/cpp/core/include/core/system/PosixChildProcessTracker.hpp
index 93de356..72ec548 100644
--- a/src/cpp/core/include/core/system/PosixChildProcessTracker.hpp
+++ b/src/cpp/core/include/core/system/PosixChildProcessTracker.hpp
@@ -24,7 +24,7 @@
 #include <core/Thread.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -53,7 +53,7 @@ private:
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_CHILD_PROCESS_TRACKER_HPP
 
diff --git a/src/cpp/core/include/core/system/PosixSched.hpp b/src/cpp/core/include/core/system/PosixSched.hpp
index 7d9342c..152898a 100644
--- a/src/cpp/core/include/core/system/PosixSched.hpp
+++ b/src/cpp/core/include/core/system/PosixSched.hpp
@@ -18,7 +18,7 @@
 
 #include <vector>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -33,7 +33,7 @@ Error getCpuAffinity(CpuAffinity* pCpus);
 Error setCpuAffinity(const CpuAffinity& cpus);
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_POSIX_SCHED_HPP
 
diff --git a/src/cpp/core/include/core/system/PosixSystem.hpp b/src/cpp/core/include/core/system/PosixSystem.hpp
index 736740f..39d6cc6 100644
--- a/src/cpp/core/include/core/system/PosixSystem.hpp
+++ b/src/cpp/core/include/core/system/PosixSystem.hpp
@@ -26,11 +26,11 @@ typedef pid_t PidType;
 typedef rlim_t RLimitType;
 
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace user {
@@ -38,7 +38,7 @@ namespace user {
 }
 
 // daemonize the process
-core::Error daemonize();
+rscore::Error daemonize();
 
 // umask
 // file creation masks and file modes
@@ -65,13 +65,13 @@ enum ResourceLimit
 
 bool resourceIsUnlimited(RLimitType limitValue);
 
-core::Error getResourceLimit(ResourceLimit resourcelimit,
+rscore::Error getResourceLimit(ResourceLimit resourcelimit,
                              RLimitType* pSoft,
                              RLimitType* pHard);
 
-core::Error setResourceLimit(ResourceLimit resourceLimit, RLimitType limit);
+rscore::Error setResourceLimit(ResourceLimit resourceLimit, RLimitType limit);
 
-core::Error setResourceLimit(ResourceLimit resourceLimit,
+rscore::Error setResourceLimit(ResourceLimit resourceLimit,
                              RLimitType soft,
                              RLimitType hard);
 
@@ -85,9 +85,9 @@ struct SysInfo
    double load15;
 };
 
-core::Error systemInformation(SysInfo* pSysInfo);
+rscore::Error systemInformation(SysInfo* pSysInfo);
 
-core::Error pidof(const std::string& process, std::vector<PidType>* pPids);
+rscore::Error pidof(const std::string& process, std::vector<PidType>* pPids);
 
 struct ProcessInfo
 {
@@ -96,7 +96,7 @@ struct ProcessInfo
    std::string username;
 };
 
-core::Error processInfo(const std::string& process,
+rscore::Error processInfo(const std::string& process,
                         std::vector<ProcessInfo>* pInfo);
 
 std::ostream& operator<<(std::ostream& os, const ProcessInfo& info);
@@ -107,10 +107,10 @@ struct IpAddress
    std::string addr;
 };
 
-core::Error ipAddresses(std::vector<IpAddress>* pAddresses);
+rscore::Error ipAddresses(std::vector<IpAddress>* pAddresses);
 
 // core dump restriction
-core::Error restrictCoreDumps();
+rscore::Error restrictCoreDumps();
 void printCoreDumpable(const std::string& context);
 
 // launching child processes
@@ -151,23 +151,23 @@ struct ProcessConfig
       : stdStreamBehavior(StdStreamInherit)
    {
    }
-   core::system::Options args;
-   core::system::Options environment;
+   rscore::system::Options args;
+   rscore::system::Options environment;
    std::string stdInput;
    StdStreamBehavior stdStreamBehavior;
    ProcessLimits limits;
 };
 
-core::Error waitForProcessExit(PidType processId);
+rscore::Error waitForProcessExit(PidType processId);
 
-core::Error launchChildProcess(std::string path,
+rscore::Error launchChildProcess(std::string path,
                                std::string runAsUser,
                                ProcessConfig config,
                                PidType* pProcessId ) ;
 
-bool isUserNotFoundError(const core::Error& error);
+bool isUserNotFoundError(const rscore::Error& error);
 
-core::Error userBelongsToGroup(const user::User& user,
+rscore::Error userBelongsToGroup(const user::User& user,
                                const std::string& groupName,
                                bool* pBelongs);
 
@@ -177,13 +177,13 @@ bool effectiveUserIsRoot();
 
 // privillege management (not thread safe, call from main thread at app startup
 // or just after fork() prior to exec() for new processes)
-core::Error temporarilyDropPriv(const std::string& newUsername);
-core::Error permanentlyDropPriv(const std::string& newUsername);
-core::Error restorePriv();
+rscore::Error temporarilyDropPriv(const std::string& newUsername);
+rscore::Error permanentlyDropPriv(const std::string& newUsername);
+rscore::Error restorePriv();
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_POSIX_SYSTEM_HPP
 
diff --git a/src/cpp/core/include/core/system/PosixUser.hpp b/src/cpp/core/include/core/system/PosixUser.hpp
index 9467d94..06ace76 100644
--- a/src/cpp/core/include/core/system/PosixUser.hpp
+++ b/src/cpp/core/include/core/system/PosixUser.hpp
@@ -23,12 +23,12 @@
 typedef uid_t  UidType;
 typedef gid_t  GidType;
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace user {
 
@@ -40,7 +40,7 @@ struct UserIdentity
 
 UserIdentity currentUserIdentity();
    
-core::Error socketPeerIdentity(int socket, UserIdentity* pIdentity);
+rscore::Error socketPeerIdentity(int socket, UserIdentity* pIdentity);
 
 struct User
 {
@@ -50,16 +50,16 @@ struct User
    std::string homeDirectory;
 };
 
-core::Error currentUser(User* pUser);
+rscore::Error currentUser(User* pUser);
 
 bool exists(const std::string& username);
-core::Error userFromUsername(const std::string& username, User* pUser);
-core::Error userFromId(UidType uid, User* pUser);
+rscore::Error userFromUsername(const std::string& username, User* pUser);
+rscore::Error userFromId(UidType uid, User* pUser);
 
    
 } // namespace user
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_POSIX_USER_HPP
 
diff --git a/src/cpp/core/include/core/system/Process.hpp b/src/cpp/core/include/core/system/Process.hpp
index 299ae50..e40e90d 100644
--- a/src/cpp/core/include/core/system/Process.hpp
+++ b/src/cpp/core/include/core/system/Process.hpp
@@ -28,7 +28,7 @@
 #include <core/system/Types.hpp>
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -110,14 +110,14 @@ struct ProcessOptions
    // (respectively) should be redirected to. Note that this ONLY works
    // if you use runCommand, not runProgram, as we use the shell to do
    // the redirection.
-   core::FilePath stdOutFile;
-   core::FilePath stdErrFile;
+   rscore::FilePath stdOutFile;
+   rscore::FilePath stdErrFile;
 
    // function to run within the child process immediately after the fork
    // NOTE: only supported on posix as there is no fork on Win32
    boost::function<void()> onAfterFork;
 
-   core::FilePath workingDir;
+   rscore::FilePath workingDir;
 };
 
 // Struct for returning output and exit status from a process
@@ -245,7 +245,7 @@ ProcessCallbacks createProcessCallbacks(
                const std::string& input,
                const boost::function<void(const ProcessResult&)>& onCompleted,
                const boost::function<void(const Error&)>& onError=
-                                  boost::function<void(const core::Error&)>());
+                                  boost::function<void(const rscore::Error&)>());
 
 // Process supervisor
 class ProcessSupervisor : boost::noncopyable
@@ -323,6 +323,6 @@ private:
 };
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_PROCESS_HPP
diff --git a/src/cpp/core/include/core/system/ProcessArgs.hpp b/src/cpp/core/include/core/system/ProcessArgs.hpp
index 09cb3e9..e4ce29f 100644
--- a/src/cpp/core/include/core/system/ProcessArgs.hpp
+++ b/src/cpp/core/include/core/system/ProcessArgs.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 // helper class used to manage argument memory during child spawn
@@ -90,7 +90,7 @@ private:
 };
 
 } // namespace system 
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_PROCESS_ARGS_HPP
 
diff --git a/src/cpp/core/include/core/system/RecycleBin.hpp b/src/cpp/core/include/core/system/RecycleBin.hpp
index 6f473af..1a91e23 100644
--- a/src/cpp/core/include/core/system/RecycleBin.hpp
+++ b/src/cpp/core/include/core/system/RecycleBin.hpp
@@ -17,7 +17,7 @@
 #define CORE_SYSTEM_RECYCLE_BIN_HPP
 
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -29,7 +29,7 @@ Error sendTo(const FilePath& filePath);
 
 } // namespace recycle_bin
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_RECYCLE_BIN_HPP
 
diff --git a/src/cpp/core/include/core/system/RegistryKey.hpp b/src/cpp/core/include/core/system/RegistryKey.hpp
index 178fa06..4fae76c 100644
--- a/src/cpp/core/include/core/system/RegistryKey.hpp
+++ b/src/cpp/core/include/core/system/RegistryKey.hpp
@@ -28,7 +28,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 class RegistryKey : boost::noncopyable
@@ -37,12 +37,12 @@ public:
     RegistryKey();
     virtual ~RegistryKey();
 
-    core::Error open(HKEY hKey, std::string subKey, REGSAM samDesired);
+    rscore::Error open(HKEY hKey, std::string subKey, REGSAM samDesired);
     bool isOpen();
 
     HKEY handle();
 
-    core::Error getStringValue(std::string name, std::string* pValue);
+    rscore::Error getStringValue(std::string name, std::string* pValue);
     std::string getStringValue(std::string name, std::string defaultValue);
 
     std::vector<std::string> keyNames();
@@ -52,6 +52,6 @@ private:
 };
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // REGISTRYKEY_HPP
diff --git a/src/cpp/core/include/core/system/ShellUtils.hpp b/src/cpp/core/include/core/system/ShellUtils.hpp
index f72db49..dc32adb 100644
--- a/src/cpp/core/include/core/system/ShellUtils.hpp
+++ b/src/cpp/core/include/core/system/ShellUtils.hpp
@@ -24,7 +24,7 @@
 #include <core/FilePath.hpp>
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 
 namespace shell_utils {
 
@@ -53,7 +53,7 @@ enum EscapeMode
 class ShellCommand
 {
 public:
-   explicit ShellCommand(const core::FilePath& filePath)
+   explicit ShellCommand(const rscore::FilePath& filePath)
       : escapeMode_(EscapeAll)
    {
       output_ = escape(string_utils::utf8ToSystem(filePath.absolutePath()));
diff --git a/src/cpp/core/include/core/system/System.hpp b/src/cpp/core/include/core/system/System.hpp
index 1ec8b44..4fc2856 100644
--- a/src/cpp/core/include/core/system/System.hpp
+++ b/src/cpp/core/include/core/system/System.hpp
@@ -39,7 +39,7 @@ typedef pid_t PidType;
 
 #include <core/system/Types.hpp>
 
-namespace core {
+namespace rscore {
 
 class FileInfo;
 class FilePath;
@@ -213,11 +213,11 @@ private:
    boost::shared_ptr<Impl> pImpl_;
 };
    
-core::Error clearSignalMask();
+rscore::Error clearSignalMask();
 
-core::Error handleSignal(SignalType signal, void (*handler)(int));
-core::Error ignoreSignal(SignalType signal);   
-core::Error useDefaultSignalHandler(SignalType signal);
+rscore::Error handleSignal(SignalType signal, void (*handler)(int));
+rscore::Error ignoreSignal(SignalType signal);   
+rscore::Error useDefaultSignalHandler(SignalType signal);
 
 void sendSignalToSelf(SignalType signal);
 
@@ -266,7 +266,7 @@ void abort();
 Error terminateProcess(PidType pid);
    
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_SYSTEM_SYSTEM_HPP
 
diff --git a/src/cpp/core/include/core/system/Types.hpp b/src/cpp/core/include/core/system/Types.hpp
index bd044fc..800f7ae 100644
--- a/src/cpp/core/include/core/system/Types.hpp
+++ b/src/cpp/core/include/core/system/Types.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <vector>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 typedef std::pair<std::string,std::string> Option;
diff --git a/src/cpp/core/include/core/tex/TexLogParser.hpp b/src/cpp/core/include/core/tex/TexLogParser.hpp
index 2075349..d946dbf 100644
--- a/src/cpp/core/include/core/tex/TexLogParser.hpp
+++ b/src/cpp/core/include/core/tex/TexLogParser.hpp
@@ -21,7 +21,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 
 class Error;
 
@@ -79,7 +79,7 @@ Error parseLatexLog(const FilePath& logFilePath, LogEntries* pLogEntries);
 Error parseBibtexLog(const FilePath& logFilePath, LogEntries* pLogEntries);
 
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_TEX_TEX_LOG_PARSER_HPP
diff --git a/src/cpp/core/include/core/tex/TexMagicComment.hpp b/src/cpp/core/include/core/tex/TexMagicComment.hpp
index ce3ba69..eee0103 100644
--- a/src/cpp/core/include/core/tex/TexMagicComment.hpp
+++ b/src/cpp/core/include/core/tex/TexMagicComment.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <vector>
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -54,7 +54,7 @@ Error parseMagicComments(const FilePath& texFile, TexMagicComments* pComments);
 
 
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_TEX_TEX_MAGIC_COMMENT_HPP
diff --git a/src/cpp/core/include/core/tex/TexSynctex.hpp b/src/cpp/core/include/core/tex/TexSynctex.hpp
index c7c26b1..f55ed36 100644
--- a/src/cpp/core/include/core/tex/TexSynctex.hpp
+++ b/src/cpp/core/include/core/tex/TexSynctex.hpp
@@ -31,7 +31,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 namespace tex {
 
 class SourceLocation
@@ -136,7 +136,7 @@ std::string normalizeSynctexName(const std::string& name);
 
 
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 #endif // CORE_TEX_TEX_SYNCTEX_HPP
diff --git a/src/cpp/core/include/core/text/CsvParser.hpp b/src/cpp/core/include/core/text/CsvParser.hpp
index 2dfb0e9..c1243d0 100644
--- a/src/cpp/core/include/core/text/CsvParser.hpp
+++ b/src/cpp/core/include/core/text/CsvParser.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <vector>
 
-namespace core {
+namespace rscore {
 namespace text {
 
 /*
@@ -127,6 +127,6 @@ std::pair<std::vector<std::string>, InputIterator> parseCsvLine(InputIterator be
 }
 
 } // namespace text
-} // namespace core
+} // namespace rscore
 
 #endif // CSV_PARSER_HPP
diff --git a/src/cpp/core/include/core/text/DcfParser.hpp b/src/cpp/core/include/core/text/DcfParser.hpp
index eea7797..829965f 100644
--- a/src/cpp/core/include/core/text/DcfParser.hpp
+++ b/src/cpp/core/include/core/text/DcfParser.hpp
@@ -22,7 +22,7 @@
 #include <boost/function.hpp>
 
 
-namespace core {
+namespace rscore {
 
 class Error;
 class FilePath;
@@ -49,6 +49,6 @@ std::string dcfMultilineAsFolded(const std::string& line);
 
 
 } // namespace text
-} // namespace core
+} // namespace rscore
 
 #endif // DCF_PARSER_HPP
diff --git a/src/cpp/core/include/core/text/TemplateFilter.hpp b/src/cpp/core/include/core/text/TemplateFilter.hpp
index cc54d25..f0a9283 100644
--- a/src/cpp/core/include/core/text/TemplateFilter.hpp
+++ b/src/cpp/core/include/core/text/TemplateFilter.hpp
@@ -28,7 +28,7 @@
 
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 
 class FilePath;
 namespace http {
@@ -90,7 +90,7 @@ void handleSecureTemplateRequest(const std::string& username,
                                  http::Response* pResponse);
 
 } // namespace text
-} // namespace core
+} // namespace rscore
 
 
 #endif // CORE_TEXT_TEMPLATE_FILTER_HPP
diff --git a/src/cpp/core/json/Json.cpp b/src/cpp/core/json/Json.cpp
index 16bc993..de2237e 100644
--- a/src/cpp/core/json/Json.cpp
+++ b/src/cpp/core/json/Json.cpp
@@ -26,7 +26,7 @@
 
 #include "spirit/json_spirit.h"
 
-namespace core {
+namespace rscore {
 namespace json {
 
 json_spirit::Value_type ObjectType = json_spirit::obj_type;
@@ -73,7 +73,7 @@ void writeFormatted(const Value& value, std::ostream& os)
 }   
    
 } // namespace json
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/json/JsonRpc.cpp b/src/cpp/core/json/JsonRpc.cpp
index 1672d60..74fea12 100644
--- a/src/cpp/core/json/JsonRpc.cpp
+++ b/src/cpp/core/json/JsonRpc.cpp
@@ -21,7 +21,7 @@
 #include <core/http/Response.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace json {
 
 const char * const kRpcResult = "result";
@@ -242,8 +242,8 @@ void JsonRpcResponse::setAsyncHandle(const std::string& handle)
    setField(kRpcAsyncHandle, handle);
 }
 
-void setJsonRpcResponse(const core::json::JsonRpcResponse& jsonRpcResponse,
-                        core::http::Response* pResponse)
+void setJsonRpcResponse(const rscore::json::JsonRpcResponse& jsonRpcResponse,
+                        rscore::http::Response* pResponse)
 {
    // no cache!
    pResponse->setNoCacheHeaders();
@@ -349,13 +349,13 @@ std::string JsonRpcErrorCategory::message( int ev ) const
 namespace {
 
 void runSynchronousFunction(const JsonRpcFunction& func,
-                            const core::json::JsonRpcRequest& request,
+                            const rscore::json::JsonRpcRequest& request,
                             const JsonRpcFunctionContinuation& continuation)
 {
-   core::json::JsonRpcResponse response;
+   rscore::json::JsonRpcResponse response;
    if (request.isBackgroundConnection)
       response.setSuppressDetectChanges(true);
-   core::Error error = func(request, &response);
+   rscore::Error error = func(request, &response);
    continuation(error, &response);
 }
 
@@ -374,7 +374,7 @@ JsonRpcAsyncMethod adaptMethodToAsync(JsonRpcMethod synchronousMethod)
 }
 
 } // namespace json
-} // namespace core
+} // namespace rscore
 
 
 
diff --git a/src/cpp/core/libclang/CodeCompleteResults.cpp b/src/cpp/core/libclang/CodeCompleteResults.cpp
index 38fc98d..fcec5a2 100644
--- a/src/cpp/core/libclang/CodeCompleteResults.cpp
+++ b/src/cpp/core/libclang/CodeCompleteResults.cpp
@@ -20,7 +20,7 @@
 #include <core/libclang/UnsavedFiles.hpp>
 #include <core/libclang/Utils.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 // NOTE: this is a toy version of inspecting completion chunks just
@@ -87,6 +87,6 @@ unsigned long long CodeCompleteResults::getContexts() const
 
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/libclang/Cursor.cpp b/src/cpp/core/libclang/Cursor.cpp
index 9600518..27c1fa5 100644
--- a/src/cpp/core/libclang/Cursor.cpp
+++ b/src/cpp/core/libclang/Cursor.cpp
@@ -18,7 +18,7 @@
 
 #include <core/libclang/LibClang.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 Cursor::~Cursor()
@@ -62,5 +62,5 @@ bool Cursor::isNull() const
 }
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/libclang/Diagnostic.cpp b/src/cpp/core/libclang/Diagnostic.cpp
index d010168..da5842f 100644
--- a/src/cpp/core/libclang/Diagnostic.cpp
+++ b/src/cpp/core/libclang/Diagnostic.cpp
@@ -21,7 +21,7 @@
 
 #include <core/libclang/LibClang.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 Diagnostic::~Diagnostic()
@@ -61,5 +61,5 @@ std::string Diagnostic::getSpelling() const
 }
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/libclang/LibClang.cpp b/src/cpp/core/libclang/LibClang.cpp
index f7edbe3..1414982 100644
--- a/src/cpp/core/libclang/LibClang.cpp
+++ b/src/cpp/core/libclang/LibClang.cpp
@@ -28,7 +28,7 @@
 #include <core/system/LibraryLoader.hpp>
 
 #define LOAD_CLANG_SYMBOL(name) \
-   error = core::system::loadSymbol(pLib_, "clang_" #name, (void**)&name); \
+   error = rscore::system::loadSymbol(pLib_, "clang_" #name, (void**)&name); \
    if (error) \
    { \
       Error unloadError = unload(); \
@@ -37,7 +37,7 @@
       return error; \
    }
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 namespace {
@@ -141,7 +141,7 @@ Error LibClang::tryLoad(const std::string& libraryPath,
                              LibraryVersion requiredVersion)
 {
    // load the library
-   Error error = core::system::loadLibrary(libraryPath, &pLib_);
+   Error error = rscore::system::loadLibrary(libraryPath, &pLib_);
    if (error)
       return error;
 
@@ -479,7 +479,7 @@ Error LibClang::unload()
 {
    if (pLib_ != NULL)
    {
-      Error error = core::system::closeLibrary(pLib_);
+      Error error = rscore::system::closeLibrary(pLib_);
       if (error)
       {
          return error;
@@ -547,5 +547,5 @@ LibClang& clang()
 }
 
 } // namesapce libclang
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/libclang/SourceIndex.cpp b/src/cpp/core/libclang/SourceIndex.cpp
index 5f29a2c..19f3492 100644
--- a/src/cpp/core/libclang/SourceIndex.cpp
+++ b/src/cpp/core/libclang/SourceIndex.cpp
@@ -25,7 +25,7 @@
 #include <core/libclang/LibClang.hpp>
 #include <core/libclang/UnsavedFiles.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 bool SourceIndex::isSourceFile(const std::string& filename)
@@ -132,11 +132,11 @@ TranslationUnit SourceIndex::getTranslationUnit(const std::string& filename,
 
    FilePath filePath(filename);
 
-   boost::scoped_ptr<core::PerformanceTimer> pTimer;
+   boost::scoped_ptr<rscore::PerformanceTimer> pTimer;
    if (verbose_ > 0)
    {
       std::cerr << "CLANG INDEXING: " << filePath.absolutePath() << std::endl;
-      pTimer.reset(new core::PerformanceTimer(filePath.filename()));
+      pTimer.reset(new rscore::PerformanceTimer(filePath.filename()));
    }
 
    // get the arguments and last write time for this file
@@ -205,7 +205,7 @@ TranslationUnit SourceIndex::getTranslationUnit(const std::string& filename,
      args.push_back("-v");
 
    // get the args in the fashion libclang expects (char**)
-   core::system::ProcessArgs argsArray(args);
+   rscore::system::ProcessArgs argsArray(args);
 
    if (verbose_ > 0)
       std::cerr << "  (Creating new index)" << std::endl;
@@ -279,6 +279,6 @@ TranslationUnit SourceIndex::getHeaderTranslationUnit(
 }
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/libclang/SourceLocation.cpp b/src/cpp/core/libclang/SourceLocation.cpp
index c4dbfb3..9f63393 100644
--- a/src/cpp/core/libclang/SourceLocation.cpp
+++ b/src/cpp/core/libclang/SourceLocation.cpp
@@ -17,7 +17,7 @@
 
 #include <core/libclang/LibClang.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 SourceLocation::SourceLocation()
@@ -66,4 +66,4 @@ bool SourceLocation::operator!=(const SourceLocation& other) const
 }
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/libclang/TranslationUnit.cpp b/src/cpp/core/libclang/TranslationUnit.cpp
index 133ad34..d0e2358 100644
--- a/src/cpp/core/libclang/TranslationUnit.cpp
+++ b/src/cpp/core/libclang/TranslationUnit.cpp
@@ -21,7 +21,7 @@
 #include <core/libclang/LibClang.hpp>
 #include <core/libclang/UnsavedFiles.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 namespace  {
@@ -145,6 +145,6 @@ void TranslationUnit::printResourceUsage(std::ostream& ostr, bool detailed)
 
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/libclang/UnsavedFiles.cpp b/src/cpp/core/libclang/UnsavedFiles.cpp
index a258105..88078d0 100644
--- a/src/cpp/core/libclang/UnsavedFiles.cpp
+++ b/src/cpp/core/libclang/UnsavedFiles.cpp
@@ -17,7 +17,7 @@
 
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 namespace {
@@ -105,6 +105,6 @@ std::ostream& operator << (std::ostream& ostr, UnsavedFiles& unsaved)
 
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/libclang/Utils.cpp b/src/cpp/core/libclang/Utils.cpp
index 981cf08..4791e52 100644
--- a/src/cpp/core/libclang/Utils.cpp
+++ b/src/cpp/core/libclang/Utils.cpp
@@ -17,7 +17,7 @@
 
 #include <core/libclang/LibClang.hpp>
 
-namespace core {
+namespace rscore {
 namespace libclang {
 
 // note that this function disposes the underlying CXString so it
@@ -30,5 +30,5 @@ std::string toStdString(CXString cxStr)
 }
 
 } // namespace libclang
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/markdown/Markdown.cpp b/src/cpp/core/markdown/Markdown.cpp
index 6a1c9c2..bfc8f9a 100644
--- a/src/cpp/core/markdown/Markdown.cpp
+++ b/src/cpp/core/markdown/Markdown.cpp
@@ -34,7 +34,7 @@
 #include "sundown/markdown.h"
 #include "sundown/html.h"
 
-namespace core {
+namespace rscore {
 namespace markdown {
 
 namespace {
@@ -321,7 +321,7 @@ Error markdownToHTML(const FilePath& markdownFile,
    if (error)
       return error;
 
-   return core::writeStringToFile(htmlFile,
+   return rscore::writeStringToFile(htmlFile,
                                   markdownOutput,
                                   string_utils::LineEndingNative);
 }
@@ -333,7 +333,7 @@ Error markdownToHTML(const FilePath& markdownFile,
                      std::string* pHTMLOutput)
 {
    std::string markdownInput;
-   Error error = core::readStringFromFile(markdownFile,
+   Error error = rscore::readStringFromFile(markdownFile,
                                           &markdownInput,
                                           string_utils::LineEndingPosix);
    if (error)
@@ -454,7 +454,7 @@ bool isMathJaxRequired(const std::string& htmlOutput)
 }
 
 } // namespace markdown
-} // namespace core
+} // namespace rscore
    
 
 
diff --git a/src/cpp/core/markdown/MathJax.cpp b/src/cpp/core/markdown/MathJax.cpp
index 9d4478e..d2724c7 100644
--- a/src/cpp/core/markdown/MathJax.cpp
+++ b/src/cpp/core/markdown/MathJax.cpp
@@ -24,7 +24,7 @@
 
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace markdown {
 
 namespace {
@@ -228,7 +228,7 @@ std::string MathJaxFilter::substitute(
    }
    else
    {
-      std::string guid = core::system::generateUuid(false);
+      std::string guid = rscore::system::generateUuid(false);
       std::string suffix = (match.size() > 2) ? std::string(match[2]) : "";
       pMathBlocks->insert(std::make_pair(guid, MathBlock(equation,suffix)));
       return guid;
@@ -265,7 +265,7 @@ bool requiresMathjax(const std::string& htmlOutput)
 }
 
 } // namespace markdown
-} // namespace core
+} // namespace rscore
    
 
 
diff --git a/src/cpp/core/markdown/MathJax.hpp b/src/cpp/core/markdown/MathJax.hpp
index bc937c4..00bcd18 100644
--- a/src/cpp/core/markdown/MathJax.hpp
+++ b/src/cpp/core/markdown/MathJax.hpp
@@ -21,7 +21,7 @@
 #include <boost/regex.hpp>
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 namespace markdown {
 
 struct ExcludePattern
@@ -97,7 +97,7 @@ bool requiresMathjax(const std::string& htmlOutput);
 
 
 } // namespace markdown
-} // namespace core
+} // namespace rscore
    
 
 
diff --git a/src/cpp/core/r_util/REnvironmentPosix.cpp b/src/cpp/core/r_util/REnvironmentPosix.cpp
index bd9832f..479479c 100644
--- a/src/cpp/core/r_util/REnvironmentPosix.cpp
+++ b/src/cpp/core/r_util/REnvironmentPosix.cpp
@@ -32,7 +32,7 @@
 #include <core/system/Process.hpp>
 #include <core/system/Environment.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -49,7 +49,7 @@ FilePath scanForRScript(const std::vector<std::string>& rScriptPaths,
       if (rScriptPath.exists() && !rScriptPath.isDirectory())
       {
          // verify that the alias points to a real version of R
-         Error error = core::system::realPath(*it, &rScriptPath);
+         Error error = rscore::system::realPath(*it, &rScriptPath);
          if (!error)
          {
             return rScriptPath;
@@ -192,7 +192,7 @@ std::string extraLibraryPaths(const FilePath& ldPathsScript,
    // run script to capture paths
    std::string command = ldPathsScript.absolutePath() + " " + rHome;
    system::ProcessResult result;
-   Error error = runCommand(command, core::system::ProcessOptions(), &result);
+   Error error = runCommand(command, rscore::system::ProcessOptions(), &result);
    if (error)
       LOG_ERROR(error);
    std::string libraryPaths = result.stdOut;
@@ -204,8 +204,8 @@ FilePath systemDefaultRScript(std::string* pErrMsg)
 {
    // ask system which R to use
    system::ProcessResult result;
-   Error error = core::system::runCommand("which R",
-                                          core::system::ProcessOptions(),
+   Error error = rscore::system::runCommand("which R",
+                                          rscore::system::ProcessOptions(),
                                           &result);
    std::string whichR = result.stdOut;
    boost::algorithm::trim(whichR);
@@ -255,12 +255,12 @@ bool getRHomeAndLibPath(const FilePath& rScriptPath,
    // (the normal semantics of invoking the R script are that it overwrites
    // R_HOME and prints a warning -- this warning is co-mingled with the
    // output of "R RHOME" and messes up our parsing)
-   core::system::setenv("R_HOME", "");
+   rscore::system::setenv("R_HOME", "");
 
    // run R script to detect R home
    std::string command = rScriptPath.absolutePath() + " RHOME";
    system::ProcessResult result;
-   Error error = runCommand(command, core::system::ProcessOptions(), &result);
+   Error error = runCommand(command, rscore::system::ProcessOptions(), &result);
    if (error)
    {
       *pErrMsg = "Error running R (" + rScriptPath.absolutePath() + "): " +
@@ -288,7 +288,7 @@ bool validateRScriptPath(const std::string& rScriptPath,
 {
    // get realpath
    FilePath rBinaryPath;
-   Error error = core::system::realPath(rScriptPath, &rBinaryPath);
+   Error error = rscore::system::realPath(rScriptPath, &rBinaryPath);
    if (error)
    {
       *pErrMsg = "Unable to determine real path of R script " +
@@ -461,7 +461,7 @@ bool detectRLocationsUsingR(const std::string& rScriptPath,
    // (the normal semantics of invoking the R script are that it overwrites
    // R_HOME and prints a warning -- this warning is co-mingled with the
    // output of R and messes up our parsing)
-   core::system::setenv("R_HOME", "");
+   rscore::system::setenv("R_HOME", "");
 
    // call R to determine the locations
    std::string command = rScriptPath +
@@ -692,18 +692,18 @@ void setREnvironmentVars(const EnvironmentVars& vars)
         it != vars.end();
         ++it)
    {
-      core::system::setenv(it->first, it->second);
+      rscore::system::setenv(it->first, it->second);
    }
 }
 
 void setREnvironmentVars(const EnvironmentVars& vars,
-                         core::system::Options* pEnv)
+                         rscore::system::Options* pEnv)
 {
    for (EnvironmentVars::const_iterator it = vars.begin();
         it != vars.end();
         ++it)
    {
-      core::system::setenv(pEnv, it->first, it->second);
+      rscore::system::setenv(pEnv, it->first, it->second);
    }
 }
 
@@ -713,7 +713,7 @@ std::string rLibraryPath(const FilePath& rHomePath,
                          const std::string& ldLibraryPath)
 {
    // determine library path (existing + r lib dir + r extra lib dirs)
-   std::string libraryPath = core::system::getenv(kLibraryPathEnvVariable);
+   std::string libraryPath = rscore::system::getenv(kLibraryPathEnvVariable);
 #ifdef __APPLE__
    // if this isn't set explicitly then initalize it with the default
    // of $HOME/lib:/usr/local/lib:/usr/lib. See documentation here:
@@ -721,7 +721,7 @@ std::string rLibraryPath(const FilePath& rHomePath,
    if (libraryPath.empty())
    {
       boost::format fmt("%1%/lib:/usr/local/lib:/usr/lib");
-      libraryPath = boost::str(fmt % core::system::getenv("HOME"));
+      libraryPath = boost::str(fmt % rscore::system::getenv("HOME"));
    }
 #endif
    if (!libraryPath.empty())
@@ -742,13 +742,13 @@ Error rVersion(const FilePath& rHomePath,
                std::string* pVersion)
 {
    // determine the R version
-   core::system::ProcessOptions options;
-   core::system::Options env;
-   core::system::environment(&env);
-   core::system::setenv(&env, "R_HOME", rHomePath.absolutePath());
+   rscore::system::ProcessOptions options;
+   rscore::system::Options env;
+   rscore::system::environment(&env);
+   rscore::system::setenv(&env, "R_HOME", rHomePath.absolutePath());
    options.environment = env;
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(rScriptPath.absolutePath() +
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(rScriptPath.absolutePath() +
                                           " --slave --vanilla --version",
                                           options,
                                           &result);
@@ -779,7 +779,7 @@ Error rVersion(const FilePath& rHomePath,
 }
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RPackageInfo.cpp b/src/cpp/core/r_util/RPackageInfo.cpp
index e03d491..0abfdac 100644
--- a/src/cpp/core/r_util/RPackageInfo.cpp
+++ b/src/cpp/core/r_util/RPackageInfo.cpp
@@ -21,7 +21,7 @@
 
 #include <core/text/DcfParser.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -46,7 +46,7 @@ Error RPackageInfo::read(const FilePath& packageDir)
    // parse DCF file
    FilePath descFilePath = packageDir.childPath("DESCRIPTION");
    if (!descFilePath.exists())
-      return core::fileNotFoundError(descFilePath, ERROR_LOCATION);
+      return rscore::fileNotFoundError(descFilePath, ERROR_LOCATION);
    std::string errMsg;
    std::map<std::string,std::string> fields;
    Error error = text::parseDcfFile(descFilePath, true, &fields, &errMsg);
@@ -122,7 +122,7 @@ bool isPackageDirectory(const FilePath& dir)
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RProjectFile.cpp b/src/cpp/core/r_util/RProjectFile.cpp
index 05410cb..426f0d6 100644
--- a/src/cpp/core/r_util/RProjectFile.cpp
+++ b/src/cpp/core/r_util/RProjectFile.cpp
@@ -31,7 +31,7 @@
 #include <core/r_util/RPackageInfo.hpp>
 #include <core/r_util/RVersionInfo.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 const char * const kBuildTypeNone = "None";
@@ -854,7 +854,7 @@ bool updateSetPackageInstallArgsDefault(RProjectConfig* pConfig)
 }
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RSessionContext.cpp b/src/cpp/core/r_util/RSessionContext.cpp
index 0f82fa4..ca3321a 100644
--- a/src/cpp/core/r_util/RSessionContext.cpp
+++ b/src/cpp/core/r_util/RSessionContext.cpp
@@ -28,7 +28,7 @@
 
 #include <core/r_util/RProjectFile.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -44,7 +44,7 @@ UserDirectories userDirectories(SessionType sessionType,
    if (!homePath.empty())
       dirs.homePath = homePath;
    else
-      dirs.homePath = core::system::userHomePath("R_USER|HOME").absolutePath();
+      dirs.homePath = rscore::system::userHomePath("R_USER|HOME").absolutePath();
 
    // compute user scratch path
    std::string scratchPathName;
@@ -53,7 +53,7 @@ UserDirectories userDirectories(SessionType sessionType,
    else
       scratchPathName = "RStudio";
 
-   dirs.scratchPath = core::system::userSettingsPath(
+   dirs.scratchPath = rscore::system::userSettingsPath(
                                           FilePath(dirs.homePath),
                                           scratchPathName).absolutePath();
 
@@ -77,7 +77,7 @@ std::string readProjectsSetting(const FilePath& settingsPath,
    if (readPath.exists())
    {
       std::string value;
-      Error error = core::readStringFromFile(readPath, &value);
+      Error error = rscore::readStringFromFile(readPath, &value);
       if (error)
       {
          LOG_ERROR(error);
@@ -97,7 +97,7 @@ void writeProjectsSetting(const FilePath& settingsPath,
                           const std::string& value)
 {
    FilePath writePath = settingsPath.complete(settingName);
-   Error error = core::writeStringToFile(writePath, value);
+   Error error = rscore::writeStringToFile(writePath, value);
    if (error)
       LOG_ERROR(error);
 }
@@ -122,12 +122,12 @@ FilePath nextSessionProject(SessionType sessionType,
                                                      kLastProjectPath);
 
    // read environment variables derived from startup file associations
-   std::string initialProjPath = core::system::getenv(kRStudioInitialProject);
-   std::string initialWDPath = core::system::getenv(kRStudioInitialWorkingDir);
+   std::string initialProjPath = rscore::system::getenv(kRStudioInitialProject);
+   std::string initialWDPath = rscore::system::getenv(kRStudioInitialWorkingDir);
 
    // read the always restore last project user setting
    bool alwaysRestoreLastProject = false;
-   core::Settings uSettings;
+   rscore::Settings uSettings;
    FilePath userSettingsPath = userScratchPath.childPath(kUserSettings);
    Error error = uSettings.initialize(userSettingsPath);
    if (error)
@@ -193,7 +193,7 @@ RVersionInfo nextSessionRVersion(SessionType sessionType,
 }
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RSessionLaunchProfile.cpp b/src/cpp/core/r_util/RSessionLaunchProfile.cpp
index 7372999..8fd1157 100644
--- a/src/cpp/core/r_util/RSessionLaunchProfile.cpp
+++ b/src/cpp/core/r_util/RSessionLaunchProfile.cpp
@@ -23,24 +23,24 @@
 
 #include <core/json/JsonRpc.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
 
-json::Object optionsAsJson(const core::system::Options& options)
+json::Object optionsAsJson(const rscore::system::Options& options)
 {
    json::Object optionsJson;
-   BOOST_FOREACH(const core::system::Option& option, options)
+   BOOST_FOREACH(const rscore::system::Option& option, options)
    {
       optionsJson[option.first] = option.second;
    }
    return optionsJson;
 }
 
-core::system::Options optionsFromJson(const json::Object& optionsJson)
+rscore::system::Options optionsFromJson(const json::Object& optionsJson)
 {
-   core::system::Options options;
+   rscore::system::Options options;
    BOOST_FOREACH(const json::Member& member, optionsJson)
    {
       std::string name = member.first;
@@ -52,7 +52,7 @@ core::system::Options optionsFromJson(const json::Object& optionsJson)
 }
 
 Error cpuAffinityFromJson(const json::Array& affinityJson,
-                          core::system::CpuAffinity* pAffinity)
+                          rscore::system::CpuAffinity* pAffinity)
 {
    pAffinity->clear();
 
@@ -138,7 +138,7 @@ SessionLaunchProfile sessionLaunchProfileFromJson(
       LOG_ERROR(error);
 
    // read and convert cpu affinity
-   core::system::CpuAffinity cpuAffinity;
+   rscore::system::CpuAffinity cpuAffinity;
    json::Array cpuAffinityJson;
    error = json::readObject(configJson,
                             "cpuAffinity", &cpuAffinityJson);
@@ -156,7 +156,7 @@ SessionLaunchProfile sessionLaunchProfileFromJson(
    profile.config.environment = optionsFromJson(envJson);
    profile.config.stdInput = stdInput;
    profile.config.stdStreamBehavior =
-            static_cast<core::system::StdStreamBehavior>(stdStreamBehavior);
+            static_cast<rscore::system::StdStreamBehavior>(stdStreamBehavior);
    profile.config.limits.priority = priority;
    profile.config.limits.memoryLimitBytes = memoryLimitBytes;
    profile.config.limits.stackLimitBytes = stackLimitBytes;
@@ -171,7 +171,7 @@ SessionLaunchProfile sessionLaunchProfileFromJson(
 }
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RSourceIndex.cpp b/src/cpp/core/r_util/RSourceIndex.cpp
index 06ca24a..94496a0 100644
--- a/src/cpp/core/r_util/RSourceIndex.cpp
+++ b/src/cpp/core/r_util/RSourceIndex.cpp
@@ -21,7 +21,7 @@
 
 #include <core/r_util/RTokenizer.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -372,6 +372,6 @@ RSourceIndex::RSourceIndex(const std::string& context,
 }
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
diff --git a/src/cpp/core/r_util/RTokenizer.cpp b/src/cpp/core/r_util/RTokenizer.cpp
index 3a89cd9..66a1f73 100644
--- a/src/cpp/core/r_util/RTokenizer.cpp
+++ b/src/cpp/core/r_util/RTokenizer.cpp
@@ -38,7 +38,7 @@
 #include <core/StringUtils.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -368,6 +368,6 @@ RToken RTokenizer::consumeToken(wchar_t tokenType, std::size_t length)
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
diff --git a/src/cpp/core/r_util/RTokenizerTests.cpp b/src/cpp/core/r_util/RTokenizerTests.cpp
index 1763395..25a10d7 100644
--- a/src/cpp/core/r_util/RTokenizerTests.cpp
+++ b/src/cpp/core/r_util/RTokenizerTests.cpp
@@ -20,7 +20,7 @@
 #include <boost/assert.hpp>
 #include <boost/foreach.hpp>
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -239,6 +239,6 @@ void runTokenizerTests()
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
diff --git a/src/cpp/core/r_util/RToolsInfo.cpp b/src/cpp/core/r_util/RToolsInfo.cpp
index 457c337..1c100fc 100644
--- a/src/cpp/core/r_util/RToolsInfo.cpp
+++ b/src/cpp/core/r_util/RToolsInfo.cpp
@@ -29,7 +29,7 @@
 #define KEY_WOW64_32KEY 0x0200
 #endif
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -114,7 +114,7 @@ std::string RToolsInfo::url(const std::string& repos) const
 {
    // strip period from name
    std::string ver = boost::algorithm::replace_all_copy(name(), ".", "");
-   std::string url = core::http::URL::complete(
+   std::string url = rscore::http::URL::complete(
                         repos, "bin/windows/Rtools/Rtools" + ver + ".exe");
    return url;
 }
@@ -132,7 +132,7 @@ std::ostream& operator<<(std::ostream& os, const RToolsInfo& info)
 
 Error scanRegistryForRTools(std::vector<RToolsInfo>* pRTools)
 {
-   core::system::RegistryKey regKey;
+   rscore::system::RegistryKey regKey;
    Error error = regKey.open(HKEY_LOCAL_MACHINE,
                              "Software\\R-core\\Rtools",
                              KEY_READ | KEY_WOW64_32KEY);
@@ -148,7 +148,7 @@ Error scanRegistryForRTools(std::vector<RToolsInfo>* pRTools)
    for (int i = 0; i < keys.size(); i++)
    {
       std::string name = keys.at(i);
-      core::system::RegistryKey verKey;
+      rscore::system::RegistryKey verKey;
       error = verKey.open(regKey.handle(),
                           name,
                           KEY_READ | KEY_WOW64_32KEY);
@@ -178,7 +178,7 @@ Error scanRegistryForRTools(std::vector<RToolsInfo>* pRTools)
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/r_util/RVersionsPosix.cpp b/src/cpp/core/r_util/RVersionsPosix.cpp
index 8e15951..4225008 100644
--- a/src/cpp/core/r_util/RVersionsPosix.cpp
+++ b/src/cpp/core/r_util/RVersionsPosix.cpp
@@ -31,7 +31,7 @@
 #define kRScriptPath "Resources/bin/R"
 #endif
 
-namespace core {
+namespace rscore {
 namespace r_util {
 
 namespace {
@@ -57,7 +57,7 @@ std::ostream& operator<<(std::ostream& os, const RVersion& version)
       os << " [default]";
    os << std::endl;
    os << version.homeDir() << std::endl;
-   BOOST_FOREACH(const core::system::Option& option, version.environment)
+   BOOST_FOREACH(const rscore::system::Option& option, version.environment)
    {
       os << option.first << "=" << option.second << std::endl;
    }
@@ -113,7 +113,7 @@ std::vector<RVersion> enumerateRVersions(
    BOOST_FOREACH(const FilePath& rScriptPath, rScriptPaths)
    {
       std::string rDiscoveredScriptPath, rVersion, errMsg;
-      core::system::Options env;
+      rscore::system::Options env;
       if (detectREnvironment(rScriptPath,
                              ldPathsScript,
                              ldLibraryPath,
@@ -147,27 +147,27 @@ std::vector<RVersion> enumerateRVersions(
    {
       if (!versionPath.isHidden() && (versionPath.filename() != "Current"))
       {
-         using namespace core::system;
-         core::system::Options env;
+         using namespace rscore::system;
+         rscore::system::Options env;
          FilePath rHomePath = versionPath.childPath("Resources");
          FilePath rLibPath = rHomePath.childPath("lib");
-         core::system::setenv(&env, "R_HOME", rHomePath.absolutePath());
-         core::system::setenv(&env,
+         rscore::system::setenv(&env, "R_HOME", rHomePath.absolutePath());
+         rscore::system::setenv(&env,
                               "R_SHARE_DIR",
                               rHomePath.childPath("share").absolutePath());
-         core::system::setenv(&env,
+         rscore::system::setenv(&env,
                               "R_INCLUDE_DIR",
                                rHomePath.childPath("include").absolutePath());
-         core::system::setenv(&env,
+         rscore::system::setenv(&env,
                               "R_DOC_DIR",
                                rHomePath.childPath("doc").absolutePath());
-         core::system::setenv(&env,
+         rscore::system::setenv(&env,
                               "DYLD_FALLBACK_LIBRARY_PATH",
                               r_util::rLibraryPath(rHomePath,
                                                    rLibPath,
                                                    ldPathsScript,
                                                    ldLibraryPath));
-         core::system::setenv(&env, "R_ARCH", "/x86_64");
+         rscore::system::setenv(&env, "R_ARCH", "/x86_64");
 
          RVersion version;
          version.number = versionPath.filename();
@@ -285,7 +285,7 @@ RVersion selectVersion(const RVersionInfo& matchVersion,
 
 
 } // namespace r_util
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/spelling/HunspellCustomDictionaries.cpp b/src/cpp/core/spelling/HunspellCustomDictionaries.cpp
index 54dae92..a87c75d 100644
--- a/src/cpp/core/spelling/HunspellCustomDictionaries.cpp
+++ b/src/cpp/core/spelling/HunspellCustomDictionaries.cpp
@@ -19,7 +19,7 @@
 
 #include <core/Algorithm.hpp>
 
-namespace core {
+namespace rscore {
 namespace spelling {
 
 std::vector<std::string> HunspellCustomDictionaries::dictionaries() const
@@ -82,4 +82,4 @@ Error HunspellCustomDictionaries::remove(const std::string& name) const
 
 
 } // namespace spelling
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/spelling/HunspellDictionaryManager.cpp b/src/cpp/core/spelling/HunspellDictionaryManager.cpp
index f51130d..d90bc4d 100644
--- a/src/cpp/core/spelling/HunspellDictionaryManager.cpp
+++ b/src/cpp/core/spelling/HunspellDictionaryManager.cpp
@@ -20,7 +20,7 @@
 
 #include <core/Algorithm.hpp>
 
-namespace core {
+namespace rscore {
 namespace spelling {
 
 namespace {
@@ -95,7 +95,7 @@ Error listAffFiles(const FilePath& baseDir, std::vector<FilePath>* pAffFiles)
    if (error)
       return error;
 
-   core::algorithm::copy_if(children.begin(),
+   rscore::algorithm::copy_if(children.begin(),
                             children.end(),
                             std::back_inserter(*pAffFiles),
                             isDictionaryAff);
@@ -202,4 +202,4 @@ FilePath HunspellDictionaryManager::userLanguagesDir() const
 
 
 } // namespace spelling
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/spelling/HunspellSpellingEngine.cpp b/src/cpp/core/spelling/HunspellSpellingEngine.cpp
index 7d7111f..7f0526f 100644
--- a/src/cpp/core/spelling/HunspellSpellingEngine.cpp
+++ b/src/cpp/core/spelling/HunspellSpellingEngine.cpp
@@ -34,7 +34,7 @@
 #endif
 #include "hunspell/hunspell.hxx"
 
-namespace core {
+namespace rscore {
 namespace spelling {
 
 namespace {
@@ -160,9 +160,9 @@ public:
    {
       // validate that dictionaries exist
       if (!dictionary.affPath().exists())
-         return core::fileNotFoundError(dictionary.affPath(), ERROR_LOCATION);
+         return rscore::fileNotFoundError(dictionary.affPath(), ERROR_LOCATION);
       if (!dictionary.dicPath().exists())
-         return core::fileNotFoundError(dictionary.dicPath(), ERROR_LOCATION);
+         return rscore::fileNotFoundError(dictionary.dicPath(), ERROR_LOCATION);
 
       // convert paths to system encoding before sending to external API
       std::string systemAffPath = string_utils::utf8ToSystem(
@@ -228,10 +228,10 @@ private:
 
       // read the file and strip the BOM
       std::string contents;
-      Error error = core::readStringFromFile(dicDeltaPath, &contents);
+      Error error = rscore::readStringFromFile(dicDeltaPath, &contents);
       if (error)
          return error;
-      core::stripBOM(&contents);
+      rscore::stripBOM(&contents);
 
       // split into lines
       std::vector<std::string> lines;
@@ -355,7 +355,7 @@ public:
                        bool *pAdded)
    {
       if (!dicPath.exists())
-         return core::fileNotFoundError(dicPath, ERROR_LOCATION);
+         return rscore::fileNotFoundError(dicPath, ERROR_LOCATION);
 
       // Convert path to system encoding before sending to external api
       std::string systemDicPath = string_utils::utf8ToSystem(dicPath.absolutePath());
@@ -483,7 +483,7 @@ Error HunspellSpellingEngine::wordChars(std::wstring *pChars)
 }
 
 } // namespace spelling
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/system/ChildProcess.hpp b/src/cpp/core/system/ChildProcess.hpp
index 493727e..69df8cb 100644
--- a/src/cpp/core/system/ChildProcess.hpp
+++ b/src/cpp/core/system/ChildProcess.hpp
@@ -21,7 +21,7 @@
 #include <core/Error.hpp>
 #include <core/Log.hpp>
 
-namespace core {
+namespace rscore {
 
 class ErrorLocation;
 
@@ -231,6 +231,6 @@ private:
 };
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // CORE_SYSTEM_CHILD_PROCESS_HPP
diff --git a/src/cpp/core/system/CriticalSection.hpp b/src/cpp/core/system/CriticalSection.hpp
index ebabdee..849a903 100644
--- a/src/cpp/core/system/CriticalSection.hpp
+++ b/src/cpp/core/system/CriticalSection.hpp
@@ -20,7 +20,7 @@
 
 #include <windows.h>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 // critical section wrapper
@@ -71,7 +71,7 @@ private:
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 #endif // _WIN32
 
diff --git a/src/cpp/core/system/Environment.cpp b/src/cpp/core/system/Environment.cpp
index a8ce240..915f922 100644
--- a/src/cpp/core/system/Environment.cpp
+++ b/src/cpp/core/system/Environment.cpp
@@ -26,7 +26,7 @@
 #define kPathSeparator ":"
 #endif
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace impl {
@@ -52,10 +52,10 @@ std::string getenv(const Options& environment, const std::string& name)
 
 void getModifiedEnv(const Options& extraVars, Options* pEnv)
 {
-   core::system::environment(pEnv);
+   rscore::system::environment(pEnv);
    BOOST_FOREACH(const Option& var, extraVars)
    {
-      core::system::setenv(pEnv, var.first, var.second);
+      rscore::system::setenv(pEnv, var.first, var.second);
    }
 }
 
@@ -135,4 +135,4 @@ bool parseEnvVar(const std::string envVar, Option* pEnvVar)
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/Pam.cpp b/src/cpp/core/system/Pam.cpp
index 73fbb9d..deb4bdd 100644
--- a/src/cpp/core/system/Pam.cpp
+++ b/src/cpp/core/system/Pam.cpp
@@ -21,7 +21,7 @@
 #include <core/Log.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -207,4 +207,4 @@ void PAM::close()
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/PosixChildProcess.cpp b/src/cpp/core/system/PosixChildProcess.cpp
index b592ff1..2996980 100644
--- a/src/cpp/core/system/PosixChildProcess.cpp
+++ b/src/cpp/core/system/PosixChildProcess.cpp
@@ -43,7 +43,7 @@
 
 #include "ChildProcess.hpp"
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -465,7 +465,7 @@ Error ChildProcess::run()
       }
 
       // clear the child signal mask
-      Error error = core::system::clearSignalMask();
+      Error error = rscore::system::clearSignalMask();
       if (error)
       {
          LOG_ERROR(error);
@@ -524,7 +524,7 @@ Error ChildProcess::run()
       }
 
       // close all open file descriptors other than std streams
-      error = core::system::closeNonStdFileDescriptors();
+      error = rscore::system::closeNonStdFileDescriptors();
       if (error)
       {
          LOG_ERROR(error);
@@ -544,7 +544,7 @@ Error ChildProcess::run()
       std::vector<std::string> args;
       args.push_back(exe_);
       args.insert(args.end(), args_.begin(), args_.end());
-      using core::system::ProcessArgs;
+      using rscore::system::ProcessArgs;
       ProcessArgs* pProcessArgs = new ProcessArgs(args);
 
       if (options_.environment)
@@ -819,5 +819,5 @@ bool AsyncChildProcess::exited()
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixChildProcessTracker.cpp b/src/cpp/core/system/PosixChildProcessTracker.cpp
index ef23751..5f2cc95 100644
--- a/src/cpp/core/system/PosixChildProcessTracker.cpp
+++ b/src/cpp/core/system/PosixChildProcessTracker.cpp
@@ -19,7 +19,7 @@
 
 #include <boost/format.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -136,5 +136,5 @@ std::map<PidType,ChildProcessTracker::ExitHandler>
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixCrypto.cpp b/src/cpp/core/system/PosixCrypto.cpp
index 4c17e5d..bbdbbe3 100644
--- a/src/cpp/core/system/PosixCrypto.cpp
+++ b/src/cpp/core/system/PosixCrypto.cpp
@@ -38,9 +38,9 @@
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
-using namespace core;
+using namespace rscore;
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace crypto {
 
@@ -251,7 +251,7 @@ std::string s_modulo;
 std::string s_exponent;
 }
 
-core::Error rsaInit()
+rscore::Error rsaInit()
 {
    const int KEY_SIZE = 1024;
    const int ENTROPY_BYTES = 4096;
@@ -290,7 +290,7 @@ void rsaPublicKey(std::string* pExponent, std::string* pModulo)
    pExponent->assign(s_exponent.begin(), s_exponent.end());
 }
 
-core::Error rsaPrivateDecrypt(const std::string& cipherText, std::string* pPlainText)
+rscore::Error rsaPrivateDecrypt(const std::string& cipherText, std::string* pPlainText)
 {
    std::vector<unsigned char> cipherTextBytes;
    Error error = base64Decode(cipherText, &cipherTextBytes);
@@ -316,5 +316,5 @@ core::Error rsaPrivateDecrypt(const std::string& cipherText, std::string* pPlain
                       
 } // namespace crypto
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixEnvironment.cpp b/src/cpp/core/system/PosixEnvironment.cpp
index ff33749..6b948d6 100644
--- a/src/cpp/core/system/PosixEnvironment.cpp
+++ b/src/cpp/core/system/PosixEnvironment.cpp
@@ -21,7 +21,7 @@
 
 extern char **environ;
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace impl {
@@ -64,5 +64,5 @@ void unsetenv(const std::string& name)
 
 
 } // namespace sytem
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixFileScanner.cpp b/src/cpp/core/system/PosixFileScanner.cpp
index e8d3f1b..6a737a2 100644
--- a/src/cpp/core/system/PosixFileScanner.cpp
+++ b/src/cpp/core/system/PosixFileScanner.cpp
@@ -27,7 +27,7 @@
 
 #include "config.h"
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -182,5 +182,5 @@ Error scanFiles(const tree<FileInfo>::iterator_base& fromNode,
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixLibraryLoader.cpp b/src/cpp/core/system/PosixLibraryLoader.cpp
index 55c4066..7d2598c 100644
--- a/src/cpp/core/system/PosixLibraryLoader.cpp
+++ b/src/cpp/core/system/PosixLibraryLoader.cpp
@@ -19,7 +19,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -87,4 +87,4 @@ Error closeLibrary(void* pLib)
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/PosixOutputCapture.cpp b/src/cpp/core/system/PosixOutputCapture.cpp
index aaf06fa..195dc58 100644
--- a/src/cpp/core/system/PosixOutputCapture.cpp
+++ b/src/cpp/core/system/PosixOutputCapture.cpp
@@ -28,7 +28,7 @@
 
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -155,7 +155,7 @@ Error captureStandardStreams(
    {
       // block all signals for launch of background thread (will cause it
       // to never receive signals)
-      core::system::SignalBlocker signalBlocker;
+      rscore::system::SignalBlocker signalBlocker;
       Error error = signalBlocker.blockAll();
       if (error)
          LOG_ERROR(error);
@@ -175,5 +175,5 @@ Error captureStandardStreams(
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixParentProcessMonitor.cpp b/src/cpp/core/system/PosixParentProcessMonitor.cpp
index ca49505..4d21377 100644
--- a/src/cpp/core/system/PosixParentProcessMonitor.cpp
+++ b/src/cpp/core/system/PosixParentProcessMonitor.cpp
@@ -23,7 +23,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/Log.hpp>
 
-namespace core {
+namespace rscore {
 namespace parent_process_monitor {
 
 namespace {
@@ -41,7 +41,7 @@ int getFdEnv(std::string name, int defaultVal)
    char* result = ::getenv(name.c_str());
    if (!result)
       return defaultVal;
-   return core::safe_convert::stringTo(result, defaultVal);
+   return rscore::safe_convert::stringTo(result, defaultVal);
 }
 
 void exitHandler()
@@ -105,4 +105,4 @@ ParentTermination waitForParentTermination()
 }
 
 } // namespace parent_process_monitor
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/PosixSched.cpp b/src/cpp/core/system/PosixSched.cpp
index 032cbbc..4287c8c 100644
--- a/src/cpp/core/system/PosixSched.cpp
+++ b/src/cpp/core/system/PosixSched.cpp
@@ -19,7 +19,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 int cpuCount()
@@ -86,6 +86,6 @@ Error setCpuAffinity(const CpuAffinity& cpus)
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/system/PosixShellUtils.cpp b/src/cpp/core/system/PosixShellUtils.cpp
index 2dbeaf7..cab99ed 100644
--- a/src/cpp/core/system/PosixShellUtils.cpp
+++ b/src/cpp/core/system/PosixShellUtils.cpp
@@ -17,7 +17,7 @@
 #include <boost/regex.hpp>
 #include <core/system/ShellUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace shell_utils {
 
 std::string escape(const std::string& arg)
@@ -27,7 +27,7 @@ std::string escape(const std::string& arg)
    return "\"" + regex_replace(arg, pattern, "\\$1") + "\"";
 }
 
-std::string escape(const core::FilePath &path)
+std::string escape(const rscore::FilePath &path)
 {
    return escape(string_utils::utf8ToSystem(path.absolutePath()));
 }
diff --git a/src/cpp/core/system/PosixSystem.cpp b/src/cpp/core/system/PosixSystem.cpp
index e2ec964..24ad5c7 100644
--- a/src/cpp/core/system/PosixSystem.cpp
+++ b/src/cpp/core/system/PosixSystem.cpp
@@ -77,7 +77,7 @@
 
 #include "config.h"
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -214,7 +214,7 @@ void setLogToStderr(bool logToStderr)
       s_pLogWriter->setLogToStderr(logToStderr);
 }
 
-void addLogWriter(boost::shared_ptr<core::LogWriter> pLogWriter)
+void addLogWriter(boost::shared_ptr<rscore::LogWriter> pLogWriter)
 {
    s_logWriters.push_back(pLogWriter);
 }
@@ -389,7 +389,7 @@ Error handleSignal(SignalType signal, void (*handler)(int))
    return Success();
 }
    
-core::Error ignoreSignal(SignalType signal)
+rscore::Error ignoreSignal(SignalType signal)
 {
    int sig = signalForType(signal);
    if (sig < 0)
@@ -477,7 +477,7 @@ bool currentUserIsPrivilleged(unsigned int minimumUserId)
 
 namespace {
 
-// NOTE: this function is duplicated between here and core::system
+// NOTE: this function is duplicated between here and rscore::system
 // Did this to prevent the "system" interface from allowing Posix
 // constructs with Win32 no-ops to creep in (since this is used on
 // Posix for forking and has no purpose on Win32)
@@ -554,8 +554,8 @@ void attachStdFileDescriptorsToDevNull()
 
 void setStandardStreamsToDevNull()
 {
-   core::system::closeStdFileDescriptors();
-   core::system::attachStdFileDescriptorsToDevNull();
+   rscore::system::closeStdFileDescriptors();
+   rscore::system::attachStdFileDescriptorsToDevNull();
    std::ios::sync_with_stdio();
 }
 
@@ -724,7 +724,7 @@ Error daemonize()
       return error;
 
    // attach file descriptors 0, 1, and 2 to /dev/null
-   core::system::attachStdFileDescriptorsToDevNull();
+   rscore::system::attachStdFileDescriptorsToDevNull();
 
    // note: ignoring of terminal signals are handled by an optional
    // separate call (ignoreTerminalSignals)
@@ -884,13 +884,13 @@ void toPids(const std::vector<std::string>& lines, std::vector<PidType>* pPids)
 } // anonymous namespace
 
 #ifndef __APPLE__
-core::Error pidof(const std::string& process, std::vector<PidType>* pPids)
+rscore::Error pidof(const std::string& process, std::vector<PidType>* pPids)
 {
    // use pidof to capture pids
    std::string cmd = "pidof " + process;
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(cmd,
-                                          core::system::ProcessOptions(),
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(cmd,
+                                          rscore::system::ProcessOptions(),
                                           &result);
    if (error)
       return error;
@@ -936,7 +936,7 @@ Error processInfo(const std::string& process, std::vector<ProcessInfo>* pInfo)
 
          // read the cmdline
          std::string cmdline;
-         Error error = core::readStringFromFile(cmdlineFile, &cmdline);
+         Error error = rscore::readStringFromFile(cmdlineFile, &cmdline);
          if (error)
          {
             LOG_ERROR(error);
@@ -968,8 +968,8 @@ Error processInfo(const std::string& process, std::vector<ProcessInfo>* pInfo)
             }
 
             // get the username
-            core::system::user::User user;
-            Error error = core::system::user::userFromId(st.st_uid, &user);
+            rscore::system::user::User user;
+            Error error = rscore::system::user::userFromId(st.st_uid, &user);
             if (error)
             {
                LOG_ERROR(error);
@@ -993,14 +993,14 @@ Error processInfo(const std::string& process, std::vector<ProcessInfo>* pInfo)
 }
 
 #else
-core::Error pidof(const std::string& process, std::vector<PidType>* pPids)
+rscore::Error pidof(const std::string& process, std::vector<PidType>* pPids)
 {
    // use ps to capture pids
    std::string cmd = "ps acx | awk \"{if (\\$5==\\\"" +
                       process + "\\\") print \\$1}\"";
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(cmd,
-                                          core::system::ProcessOptions(),
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(cmd,
+                                          rscore::system::ProcessOptions(),
                                           &result);
    if (error)
       return error;
@@ -1080,7 +1080,7 @@ Error ipAddresses(std::vector<IpAddress>* pAddresses)
 Error restrictCoreDumps()
 {
    // set allowed size of core dumps to 0 bytes
-   Error error = setResourceLimit(core::system::CoreLimit, 0);
+   Error error = setResourceLimit(rscore::system::CoreLimit, 0);
    if (error)
       return error;
 
@@ -1102,7 +1102,7 @@ void printCoreDumpable(const std::string& context)
 
    // ulimit
    RLimitType rLimitSoft, rLimitHard;
-   Error error = getResourceLimit(core::system::CoreLimit,
+   Error error = getResourceLimit(rscore::system::CoreLimit,
                                   &rLimitSoft, &rLimitHard);
    if (error)
       LOG_ERROR(error);
@@ -1194,12 +1194,12 @@ void setProcessLimits(ProcessLimits limits)
 }
 
 void copyEnvironmentVar(const std::string& name,
-                        core::system::Options* pVars,
+                        rscore::system::Options* pVars,
                         bool evenIfEmpty = false)
 {
-   std::string value = core::system::getenv(name);
+   std::string value = rscore::system::getenv(name);
    if (!value.empty() || evenIfEmpty)
-      core::system::setenv(pVars, name, value);
+      rscore::system::setenv(pVars, name, value);
 }
 
 }
@@ -1308,7 +1308,7 @@ Error launchChildProcess(std::string path,
 
       // clear the signal mask so the child process can handle whatever
       // signals it wishes to
-      Error error = core::system::clearSignalMask();
+      Error error = rscore::system::clearSignalMask();
       if (error)
       {
          LOG_ERROR(error);
@@ -1337,12 +1337,12 @@ Error launchChildProcess(std::string path,
       switch(config.stdStreamBehavior)
       {
          case StdStreamClose:
-            core::system::closeStdFileDescriptors();
+            rscore::system::closeStdFileDescriptors();
             break;
 
          case StdStreamDevNull:
-            core::system::closeStdFileDescriptors();
-            core::system::attachStdFileDescriptorsToDevNull();
+            rscore::system::closeStdFileDescriptors();
+            rscore::system::attachStdFileDescriptorsToDevNull();
             break;
 
          case StdStreamInherit:
@@ -1352,21 +1352,21 @@ Error launchChildProcess(std::string path,
       }
 
       // setup environment
-      core::system::Options env;
+      rscore::system::Options env;
       copyEnvironmentVar("PATH", &env);
       copyEnvironmentVar("MANPATH", &env);
       copyEnvironmentVar("LANG", &env);
-      core::system::setenv(&env, "USER", user.username);
-      core::system::setenv(&env, "LOGNAME", user.username);
-      core::system::setenv(&env, "HOME", user.homeDirectory);
+      rscore::system::setenv(&env, "USER", user.username);
+      rscore::system::setenv(&env, "LOGNAME", user.username);
+      rscore::system::setenv(&env, "HOME", user.homeDirectory);
       copyEnvironmentVar("SHELL", &env);
 
       // add custom environment vars (overriding as necessary)
-      for (core::system::Options::const_iterator it = config.environment.begin();
+      for (rscore::system::Options::const_iterator it = config.environment.begin();
            it != config.environment.end();
            ++it)
       {
-         core::system::setenv(&env, it->first, it->second);
+         rscore::system::setenv(&env, it->first, it->second);
       }
 
       // NOTE: this implemenentation ignores the config.stdInput field (that
@@ -1375,7 +1375,7 @@ Error launchChildProcess(std::string path,
       // format as ProcessArgs expects
       boost::format fmt("%1%=%2%");
       std::vector<std::string> envVars;
-      for(core::system::Options::const_iterator it = env.begin();
+      for(rscore::system::Options::const_iterator it = env.begin();
            it != env.end();
            ++it)
       {
@@ -1384,13 +1384,13 @@ Error launchChildProcess(std::string path,
 
       // create environment args  (allocate on heap so memory stays around
       // after we exec (some systems including OSX seem to require this)
-      core::system::ProcessArgs* pEnvironment = new core::system::ProcessArgs(
+      rscore::system::ProcessArgs* pEnvironment = new rscore::system::ProcessArgs(
                                                                        envVars);
 
       // build process args
       std::vector<std::string> argVector;
       argVector.push_back(path);
-      for (core::system::Options::const_iterator it = config.args.begin();
+      for (rscore::system::Options::const_iterator it = config.args.begin();
            it != config.args.end();
            ++it)
       {
@@ -1401,7 +1401,7 @@ Error launchChildProcess(std::string path,
 
       // allocate ProcessArgs on heap so memory stays around after we exec
       // (some systems including OSX seem to require this)
-      core::system::ProcessArgs* pProcessArgs = new core::system::ProcessArgs(
+      rscore::system::ProcessArgs* pProcessArgs = new rscore::system::ProcessArgs(
                                                                   argVector);
 
       // execute child
@@ -1761,5 +1761,5 @@ Error restorePriv()
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/PosixUser.cpp b/src/cpp/core/system/PosixUser.cpp
index c0d9768..4275d04 100644
--- a/src/cpp/core/system/PosixUser.cpp
+++ b/src/cpp/core/system/PosixUser.cpp
@@ -34,7 +34,7 @@
 
 #include "config.h"
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace user {
    
@@ -145,5 +145,5 @@ Error userFromId(uid_t uid, User* pUser)
 
 } // namespace user
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/Process.cpp b/src/cpp/core/system/Process.cpp
index 283e5b7..a627c71 100644
--- a/src/cpp/core/system/Process.cpp
+++ b/src/cpp/core/system/Process.cpp
@@ -29,7 +29,7 @@
 
 #include "ChildProcess.hpp"
 
-namespace core {
+namespace rscore {
 namespace system {
 
 
@@ -331,6 +331,6 @@ bool ProcessSupervisor::wait(
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/system/RegistryKey.cpp b/src/cpp/core/system/RegistryKey.cpp
index b4da6a8..e532cfa 100644
--- a/src/cpp/core/system/RegistryKey.cpp
+++ b/src/cpp/core/system/RegistryKey.cpp
@@ -17,7 +17,7 @@
 #include <core/Error.hpp>
 #include <core/Log.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 RegistryKey::RegistryKey()
@@ -199,4 +199,4 @@ std::vector<std::string> RegistryKey::keyNames()
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/ShellUtils.cpp b/src/cpp/core/system/ShellUtils.cpp
index b9254b4..3c7e6c0 100644
--- a/src/cpp/core/system/ShellUtils.cpp
+++ b/src/cpp/core/system/ShellUtils.cpp
@@ -18,7 +18,7 @@
 #include <core/FilePath.hpp>
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
 namespace shell_utils {
 
 std::string pipe(const std::string& command1, const std::string& command2)
diff --git a/src/cpp/core/system/System.cpp b/src/cpp/core/system/System.cpp
index e4ccef5..a3140cb 100644
--- a/src/cpp/core/system/System.cpp
+++ b/src/cpp/core/system/System.cpp
@@ -21,7 +21,7 @@
 
 #include <core/system/Environment.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
      
 #ifdef _WIN32
@@ -65,14 +65,14 @@ void addToSystemPath(const FilePath& path, bool prepend)
 
 int exitFailure(const Error& error, const ErrorLocation& loggedFromLocation)
 {
-   core::log::logError(error, loggedFromLocation);
+   rscore::log::logError(error, loggedFromLocation);
    return EXIT_FAILURE;
 }
 
 int exitFailure(const std::string& errMsg,
                 const ErrorLocation& loggedFromLocation)
 {
-   core::log::logErrorMessage(errMsg, loggedFromLocation);
+   rscore::log::logErrorMessage(errMsg, loggedFromLocation);
    return EXIT_FAILURE;
 }
    
@@ -83,11 +83,11 @@ int exitSuccess()
 
 std::string generateShortenedUuid()
 {
-   std::string uuid = core::system::generateUuid(false);
-   return core::hash::crc32HexHash(uuid);
+   std::string uuid = rscore::system::generateUuid(false);
+   return rscore::hash::crc32HexHash(uuid);
 }
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/Win32ChildProcess.cpp b/src/cpp/core/system/Win32ChildProcess.cpp
index 136bb59..d3612e2 100644
--- a/src/cpp/core/system/Win32ChildProcess.cpp
+++ b/src/cpp/core/system/Win32ChildProcess.cpp
@@ -31,7 +31,7 @@
 
 #include "CriticalSection.hpp"
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -642,6 +642,6 @@ bool AsyncChildProcess::exited()
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/core/system/Win32Environment.cpp b/src/cpp/core/system/Win32Environment.cpp
index fcf1621..394ad88 100644
--- a/src/cpp/core/system/Win32Environment.cpp
+++ b/src/cpp/core/system/Win32Environment.cpp
@@ -24,7 +24,7 @@
 
 #include <core/StringUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace impl {
@@ -111,5 +111,5 @@ void unsetenv(const std::string& name)
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/Win32FileScanner.cpp b/src/cpp/core/system/Win32FileScanner.cpp
index 381b14e..f356347 100644
--- a/src/cpp/core/system/Win32FileScanner.cpp
+++ b/src/cpp/core/system/Win32FileScanner.cpp
@@ -23,7 +23,7 @@
 #include <core/FilePath.hpp>
 #include <core/BoostThread.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -70,7 +70,7 @@ FileInfo convertToFileInfo(const FilePath& filePath, bool yield, int *pCount)
 // interfere with the caller getting a listing of everything else
 // and proceeding with its work
 Error scanFiles(const tree<FileInfo>::iterator_base& fromNode,
-                const core::system::FileScannerOptions& options,
+                const rscore::system::FileScannerOptions& options,
                 tree<FileInfo>* pTree)
 {
    // clear all existing
@@ -142,5 +142,5 @@ Error scanFiles(const tree<FileInfo>::iterator_base& fromNode,
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/Win32LibraryLoader.cpp b/src/cpp/core/system/Win32LibraryLoader.cpp
index 4888b59..1c6d264 100644
--- a/src/cpp/core/system/Win32LibraryLoader.cpp
+++ b/src/cpp/core/system/Win32LibraryLoader.cpp
@@ -19,7 +19,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -101,4 +101,4 @@ Error closeLibrary(void* pLib)
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/Win32OutputCapture.cpp b/src/cpp/core/system/Win32OutputCapture.cpp
index 04a49b2..fc4bbdb 100644
--- a/src/cpp/core/system/Win32OutputCapture.cpp
+++ b/src/cpp/core/system/Win32OutputCapture.cpp
@@ -27,7 +27,7 @@
 #include <core/BoostThread.hpp>
 #include <core/BoostErrors.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 
 
@@ -143,5 +143,5 @@ Error captureStandardStreams(
 }
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/Win32ParentProcessMonitor.cpp b/src/cpp/core/system/Win32ParentProcessMonitor.cpp
index 9a9af25..3492a6c 100644
--- a/src/cpp/core/system/Win32ParentProcessMonitor.cpp
+++ b/src/cpp/core/system/Win32ParentProcessMonitor.cpp
@@ -21,7 +21,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
 namespace parent_process_monitor {
 
 Error wrapFork(boost::function<void()> func)
@@ -37,4 +37,4 @@ ParentTermination waitForParentTermination()
 }
 
 } // namespace parent_process_monitor
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/system/Win32ShellUtils.cpp b/src/cpp/core/system/Win32ShellUtils.cpp
index 861c476..035fda2 100644
--- a/src/cpp/core/system/Win32ShellUtils.cpp
+++ b/src/cpp/core/system/Win32ShellUtils.cpp
@@ -16,7 +16,7 @@
 #include <core/StringUtils.hpp>
 #include <core/system/ShellUtils.hpp>
 
-namespace core {
+namespace rscore {
 namespace shell_utils {
 
 std::string escape(const std::string& arg)
@@ -30,7 +30,7 @@ std::string escape(const std::string& arg)
    return "\"" + arg + "\"";
 }
 
-std::string escape(const core::FilePath& path)
+std::string escape(const rscore::FilePath& path)
 {
    return escape(string_utils::utf8ToSystem(path.absolutePath()));
 }
diff --git a/src/cpp/core/system/Win32System.cpp b/src/cpp/core/system/Win32System.cpp
index 89f9a8e..024aef7 100644
--- a/src/cpp/core/system/Win32System.cpp
+++ b/src/cpp/core/system/Win32System.cpp
@@ -55,7 +55,7 @@
 #define JOB_OBJECT_LIMIT_BREAKAWAY_OK 0x00000800
 #endif
 
-namespace core {
+namespace rscore {
 namespace system {
 
 namespace {
@@ -203,7 +203,7 @@ void setLogToStderr(bool logToStderr)
       s_pLogWriter->setLogToStderr(logToStderr);
 }
 
-void addLogWriter(boost::shared_ptr<core::LogWriter> pLogWriter)
+void addLogWriter(boost::shared_ptr<rscore::LogWriter> pLogWriter)
 {
    s_logWriters.push_back(pLogWriter);
 }
@@ -323,8 +323,8 @@ FilePath defaultCSIDLPersonalHomePath()
 
 FilePath homepathHomePath()
 {
-   std::string homeDrive = core::system::getenv("HOMEDRIVE");
-   std::string homePath = core::system::getenv("HOMEPATH");
+   std::string homeDrive = rscore::system::getenv("HOMEDRIVE");
+   std::string homePath = rscore::system::getenv("HOMEPATH");
    if (!homeDrive.empty() && !homePath.empty())
       return FilePath(homeDrive + homePath);
    else
@@ -333,7 +333,7 @@ FilePath homepathHomePath()
 
 FilePath homedriveHomePath()
 {
-   std::string homeDrive = core::system::getenv("HOMEDRIVE");
+   std::string homeDrive = rscore::system::getenv("HOMEDRIVE");
    if (homeDrive.empty())
       homeDrive = "C:";
    return FilePath(homeDrive);
@@ -650,7 +650,7 @@ Error handleSignal(SignalType signal, void (*handler)(int))
   return Success();
 }
    
-core::Error ignoreSignal(SignalType signal)
+rscore::Error ignoreSignal(SignalType signal)
 {
    return Success();
 }   
@@ -832,5 +832,5 @@ CloseHandleOnExitScope::~CloseHandleOnExitScope()
 
 
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/file_monitor/FileMonitor.cpp b/src/cpp/core/system/file_monitor/FileMonitor.cpp
index 6175236..f59d6ba 100644
--- a/src/cpp/core/system/file_monitor/FileMonitor.cpp
+++ b/src/cpp/core/system/file_monitor/FileMonitor.cpp
@@ -37,7 +37,7 @@
 // practice we can't think of an easy way for the user to specify the
 // non case-sensitive variant of a file
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace file_monitor {
 
@@ -86,7 +86,7 @@ std::string prefixString(const std::string& str, char ch)
 
 bool notHidden(const FileInfo& fileInfo)
 {
-   return !core::system::isHiddenFile(fileInfo);
+   return !rscore::system::isHiddenFile(fileInfo);
 }
 
 bool shouldTraverse(const FileInfo& fileInfo)
@@ -394,7 +394,7 @@ namespace detail {
 void run(const boost::function<void()>& checkForInput);
 
 // register a new file monitor
-Handle registerMonitor(const core::FilePath& filePath,
+Handle registerMonitor(const rscore::FilePath& filePath,
                        bool recursive,
                        const boost::function<bool(const FileInfo&)>& filter,
                        const Callbacks& callbacks);
@@ -422,7 +422,7 @@ public:
    {
    }
 
-   RegistrationCommand(const core::FilePath& filePath,
+   RegistrationCommand(const rscore::FilePath& filePath,
                        bool recursive,
                        const boost::function<bool(const FileInfo&)>& filter,
                        const Callbacks& callbacks)
@@ -441,7 +441,7 @@ public:
 
    Type type() const { return type_; }
 
-   const core::FilePath& filePath() const { return filePath_; }
+   const rscore::FilePath& filePath() const { return filePath_; }
    bool recursive() const { return recursive_; }
    const boost::function<bool(const FileInfo&)>& filter() const
    {
@@ -459,7 +459,7 @@ private:
    Type type_;
 
    // register command data
-   core::FilePath filePath_;
+   rscore::FilePath filePath_;
    bool recursive_;
    boost::function<bool(const FileInfo&)> filter_;
    Callbacks callbacks_;
@@ -468,18 +468,18 @@ private:
    Handle handle_;
 };
 
-typedef core::thread::ThreadsafeQueue<RegistrationCommand>
+typedef rscore::thread::ThreadsafeQueue<RegistrationCommand>
                                                       RegistrationCommandQueue;
 RegistrationCommandQueue& registrationCommandQueue()
 {
-   static core::thread::ThreadsafeQueue<RegistrationCommand> instance;
+   static rscore::thread::ThreadsafeQueue<RegistrationCommand> instance;
    return instance;
 }
 
-typedef core::thread::ThreadsafeQueue<boost::function<void()> > CallbackQueue;
+typedef rscore::thread::ThreadsafeQueue<boost::function<void()> > CallbackQueue;
 CallbackQueue& callbackQueue()
 {
-   static core::thread::ThreadsafeQueue<boost::function<void()> > instance;
+   static rscore::thread::ThreadsafeQueue<boost::function<void()> > instance;
    return instance;
 }
 
@@ -622,7 +622,7 @@ boost::thread s_fileMonitorThread;
 void initialize()
 {
    s_pActiveHandles = new std::list<Handle>();
-   core::thread::safeLaunchThread(fileMonitorThreadMain, &s_fileMonitorThread);
+   rscore::thread::safeLaunchThread(fileMonitorThreadMain, &s_fileMonitorThread);
 }
 
 void stop()
@@ -679,7 +679,7 @@ void checkForChanges()
 
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
    
 
diff --git a/src/cpp/core/system/file_monitor/FileMonitorImpl.hpp b/src/cpp/core/system/file_monitor/FileMonitorImpl.hpp
index 17d3215..9b43b88 100644
--- a/src/cpp/core/system/file_monitor/FileMonitorImpl.hpp
+++ b/src/cpp/core/system/file_monitor/FileMonitorImpl.hpp
@@ -29,7 +29,7 @@
 
 #include <core/system/FileMonitor.hpp>
 
-namespace core {   
+namespace rscore {   
 namespace system {
 namespace file_monitor {
 namespace impl {
@@ -117,7 +117,7 @@ std::list<void*> activeEventContexts();
 } // namespace impl
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
 #endif // CORE_SYSTEM_FILE_MONITOR_IMPL_HPP
 
diff --git a/src/cpp/core/system/file_monitor/LinuxFileMonitor.cpp b/src/cpp/core/system/file_monitor/LinuxFileMonitor.cpp
index ecb8b85..9c3b4fb 100644
--- a/src/cpp/core/system/file_monitor/LinuxFileMonitor.cpp
+++ b/src/cpp/core/system/file_monitor/LinuxFileMonitor.cpp
@@ -42,7 +42,7 @@
 
 #include "config.h"
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace file_monitor {
 
@@ -435,7 +435,7 @@ Handle registrationFailure(int errorNumber,
 namespace detail {
 
 // register a new file monitor
-Handle registerMonitor(const core::FilePath& filePath,
+Handle registerMonitor(const rscore::FilePath& filePath,
                        bool recursive,
                        const boost::function<bool(const FileInfo&)>& filter,
                        const Callbacks& callbacks)
@@ -639,7 +639,7 @@ void stop()
 } // namespace detail
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
    
 
diff --git a/src/cpp/core/system/file_monitor/MacFileMonitor.cpp b/src/cpp/core/system/file_monitor/MacFileMonitor.cpp
index 9ebc937..f40d411 100644
--- a/src/cpp/core/system/file_monitor/MacFileMonitor.cpp
+++ b/src/cpp/core/system/file_monitor/MacFileMonitor.cpp
@@ -31,7 +31,7 @@
 
 #include "FileMonitorImpl.hpp"
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace file_monitor {
 
@@ -245,7 +245,7 @@ Handle registerMonitor(const FilePath& filePath,
    }
 
    // scan the files
-   core::system::FileScannerOptions options;
+   rscore::system::FileScannerOptions options;
    options.recursive = recursive;
    options.yield = true;
    options.filter = filter;
@@ -329,7 +329,7 @@ void stop()
 } // namespace detail
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
    
 
diff --git a/src/cpp/core/system/file_monitor/Win32FileMonitor.cpp b/src/cpp/core/system/file_monitor/Win32FileMonitor.cpp
index f653121..dc3b686 100644
--- a/src/cpp/core/system/file_monitor/Win32FileMonitor.cpp
+++ b/src/cpp/core/system/file_monitor/Win32FileMonitor.cpp
@@ -30,7 +30,7 @@
 #include "FileMonitorImpl.hpp"
 
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace file_monitor {
 
@@ -492,7 +492,7 @@ Error readDirectoryChanges(FileEventContext* pContext)
 namespace detail {
 
 // register a new file monitor
-Handle registerMonitor(const core::FilePath& filePath,
+Handle registerMonitor(const rscore::FilePath& filePath,
                        bool recursive,
                        const boost::function<bool(const FileInfo&)>& filter,
                        const Callbacks& callbacks)
@@ -551,7 +551,7 @@ Handle registerMonitor(const core::FilePath& filePath,
    ::InterlockedIncrement(&s_activeRequests);
 
    // scan the files
-   core::system::FileScannerOptions options;
+   rscore::system::FileScannerOptions options;
    options.recursive = recursive;
    options.yield = true;
    options.filter = filter;
@@ -616,7 +616,7 @@ void stop()
 } // namespace detail
 } // namespace file_monitor
 } // namespace system
-} // namespace core 
+} // namespace rscore 
 
    
 
diff --git a/src/cpp/core/system/recycle_bin/LinuxRecycleBin.cpp b/src/cpp/core/system/recycle_bin/LinuxRecycleBin.cpp
index ae033fa..70da895 100644
--- a/src/cpp/core/system/recycle_bin/LinuxRecycleBin.cpp
+++ b/src/cpp/core/system/recycle_bin/LinuxRecycleBin.cpp
@@ -16,7 +16,7 @@
 #include <core/Error.hpp>
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace recycle_bin {
       
@@ -27,5 +27,5 @@ Error sendTo(const FilePath& filePath)
 
 } // namespace recycle_bin
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/recycle_bin/MacRecycleBin.cpp b/src/cpp/core/system/recycle_bin/MacRecycleBin.cpp
index 19a358c..4c9dd7c 100644
--- a/src/cpp/core/system/recycle_bin/MacRecycleBin.cpp
+++ b/src/cpp/core/system/recycle_bin/MacRecycleBin.cpp
@@ -26,7 +26,7 @@
 #pragma clang diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace recycle_bin {
       
@@ -69,5 +69,5 @@ Error sendTo(const FilePath& filePath)
 
 } // namespace recycle_bin
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/system/recycle_bin/Win32RecycleBin.cpp b/src/cpp/core/system/recycle_bin/Win32RecycleBin.cpp
index ec8fe48..8f1c510 100644
--- a/src/cpp/core/system/recycle_bin/Win32RecycleBin.cpp
+++ b/src/cpp/core/system/recycle_bin/Win32RecycleBin.cpp
@@ -19,7 +19,7 @@
 #include <windows.h>
 #include <shellapi.h>
 
-namespace core {
+namespace rscore {
 namespace system {
 namespace recycle_bin {
       
@@ -62,5 +62,5 @@ Error sendTo(const FilePath& filePath)
 
 } // namespace recycle_bin
 } // namespace system
-} // namespace core
+} // namespace rscore
 
diff --git a/src/cpp/core/tex/TexLogParser.cpp b/src/cpp/core/tex/TexLogParser.cpp
index 285dd75..2ba70f3 100644
--- a/src/cpp/core/tex/TexLogParser.cpp
+++ b/src/cpp/core/tex/TexLogParser.cpp
@@ -26,7 +26,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/system/System.hpp>
 
-namespace core {
+namespace rscore {
 namespace tex {
 
 namespace {
@@ -291,7 +291,7 @@ FilePath texFilePath(const std::string& logPath, const FilePath& compileDir)
 
    FilePath path = compileDir.complete(logPath);
    FilePath realPath;
-   Error error = core::system::realPath(path, &realPath);
+   Error error = rscore::system::realPath(path, &realPath);
    if (error)
    {
       // log any error which isn't no such file or directory
@@ -512,7 +512,7 @@ Error parseBibtexLog(const FilePath& logFilePath, LogEntries* pLogEntries)
 
    // get the lines
    std::vector<std::string> lines;
-   Error error = core::readStringVectorFromFile(logFilePath, &lines, false);
+   Error error = rscore::readStringVectorFromFile(logFilePath, &lines, false);
    if (error)
       return error;
 
@@ -539,7 +539,7 @@ Error parseBibtexLog(const FilePath& logFilePath, LogEntries* pLogEntries)
 }
 
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/tex/TexMagicComment.cpp b/src/cpp/core/tex/TexMagicComment.cpp
index 93ed259..016e8f8 100644
--- a/src/cpp/core/tex/TexMagicComment.cpp
+++ b/src/cpp/core/tex/TexMagicComment.cpp
@@ -24,14 +24,14 @@
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/regex.hpp>
 
-namespace core {
+namespace rscore {
 namespace tex {
 
 Error parseMagicComments(const FilePath& texFile,
                          TexMagicComments* pComments)
 {
    std::vector<std::string> lines;
-   Error error = core::readStringVectorFromFile(texFile, &lines);
+   Error error = rscore::readStringVectorFromFile(texFile, &lines);
    if (error)
       return error;
 
@@ -63,7 +63,7 @@ Error parseMagicComments(const FilePath& texFile,
 
    
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/tex/TexSynctex.cpp b/src/cpp/core/tex/TexSynctex.cpp
index 33edf66..a3a8bd3 100644
--- a/src/cpp/core/tex/TexSynctex.cpp
+++ b/src/cpp/core/tex/TexSynctex.cpp
@@ -28,7 +28,7 @@
 
 #include "synctex/synctex_parser.h"
 
-namespace core {
+namespace rscore {
 namespace tex {
 
 namespace {
@@ -99,7 +99,7 @@ Synctex::~Synctex()
 
 bool Synctex::parse(const FilePath& pdfPath)
 {
-   using namespace core::string_utils;
+   using namespace rscore::string_utils;
    pImpl_->pdfPath = pdfPath;
    std::string path = utf8ToSystem(pdfPath.absolutePath());
    std::string buildDir = utf8ToSystem(pdfPath.parent().absolutePath());
@@ -158,7 +158,7 @@ SourceLocation Synctex::inverseSearch(const PdfLocation& location)
          FilePath filePath = pImpl_->pdfPath.parent().complete(adjustedName);
 
          // fully normalize
-         Error error = core::system::realPath(filePath, &filePath);
+         Error error = rscore::system::realPath(filePath, &filePath);
          if (error)
             LOG_ERROR(error);
 
@@ -236,7 +236,7 @@ std::string normalizeSynctexName(const std::string& name)
 }
 
 } // namespace tex
-} // namespace core 
+} // namespace rscore 
 
 
 
diff --git a/src/cpp/core/text/DcfParser.cpp b/src/cpp/core/text/DcfParser.cpp
index f451d81..a9749aa 100644
--- a/src/cpp/core/text/DcfParser.cpp
+++ b/src/cpp/core/text/DcfParser.cpp
@@ -34,7 +34,7 @@
 #include <core/FileSerializer.hpp>
 
 
-namespace core {
+namespace rscore {
 namespace text {
 
 const char * const kDcfFieldRegex = "([^\\s]+?)\\s*\\:\\s*(.*)$";
@@ -174,4 +174,4 @@ std::string dcfMultilineAsFolded(const std::string& line)
 
 
 } // namespace dcf
-} // namespace core
+} // namespace rscore
diff --git a/src/cpp/core/text/TemplateFilter.cpp b/src/cpp/core/text/TemplateFilter.cpp
index bd2c511..814fa1a 100644
--- a/src/cpp/core/text/TemplateFilter.cpp
+++ b/src/cpp/core/text/TemplateFilter.cpp
@@ -20,7 +20,7 @@
 #include <core/http/Request.hpp>
 #include <core/http/Response.hpp>
 
-namespace core {
+namespace rscore {
 namespace text {
 
 void handleTemplateRequest(const FilePath& templatePath,
@@ -55,6 +55,6 @@ void handleSecureTemplateRequest(const std::string& username,
 
 
 } // namespace text
-} // namespace core
+} // namespace rscore
 
 
diff --git a/src/cpp/desktop-mac/Options.hpp b/src/cpp/desktop-mac/Options.hpp
index 46c9597..94e9ef5 100644
--- a/src/cpp/desktop-mac/Options.hpp
+++ b/src/cpp/desktop-mac/Options.hpp
@@ -52,13 +52,13 @@ public:
    int zoomLevel() const;
    void setZoomLevel(int zoomLevel);
       
-   core::FilePath scriptsPath() const;
-   void setScriptsPath(const core::FilePath& scriptsPath);
+   rscore::FilePath scriptsPath() const;
+   void setScriptsPath(const rscore::FilePath& scriptsPath);
    
-   core::FilePath executablePath() const;
-   core::FilePath supportingFilePath() const;
+   rscore::FilePath executablePath() const;
+   rscore::FilePath supportingFilePath() const;
    
-   core::FilePath wwwDocsPath() const;
+   rscore::FilePath wwwDocsPath() const;
       
    std::vector<std::string> ignoredUpdateVersions() const;
    void setIgnoredUpdateVersions(const std::vector<std::string>& ignored);
@@ -67,9 +67,9 @@ public:
    
 private:
    std::string sharedSecret_;
-   core::FilePath scriptsPath_;
-   mutable core::FilePath executablePath_;
-   mutable core::FilePath supportingFilePath_;
+   rscore::FilePath scriptsPath_;
+   mutable rscore::FilePath executablePath_;
+   mutable rscore::FilePath supportingFilePath_;
    mutable std::string portNumber_;
    bool runDiagnostics_;
    
diff --git a/src/cpp/desktop-mac/SessionLauncher.hpp b/src/cpp/desktop-mac/SessionLauncher.hpp
index 7cb9085..e3fd6e3 100644
--- a/src/cpp/desktop-mac/SessionLauncher.hpp
+++ b/src/cpp/desktop-mac/SessionLauncher.hpp
@@ -48,14 +48,14 @@ private:
    friend SessionLauncher& sessionLauncher();
    
 public:
-   void init(const core::FilePath& sessionPath,
-             const core::FilePath& confPath);
+   void init(const rscore::FilePath& sessionPath,
+             const rscore::FilePath& confPath);
    
    bool sessionProcessActive() { return sessionProcessActive_; }
    
    void setPendingQuit(PendingQuit pendingQuit);
    
-   core::Error launchFirstSession(const std::string& filename);
+   rscore::Error launchFirstSession(const std::string& filename);
    
    void launchNextSession(bool reload);
    
@@ -72,20 +72,20 @@ private:
                            std::vector<std::string>* pArgList,
                            std::string* pUrl) const;
    
-   core::Error launchSession(const std::string& host,
+   rscore::Error launchSession(const std::string& host,
                              const std::string& port,
                              std::vector<std::string> args);
    
       
-   void onRSessionExited(const core::system::ProcessResult& result);
+   void onRSessionExited(const rscore::system::ProcessResult& result);
    
    std::string collectAbendLogMessage();
    
    void closeAllWindows();
    
 private:
-   core::FilePath confPath_;
-   core::FilePath sessionPath_;
+   rscore::FilePath confPath_;
+   rscore::FilePath sessionPath_;
    std::string sessionStderr_;
    PendingQuit pendingQuit_;
    bool sessionProcessActive_;
diff --git a/src/cpp/desktop-mac/Utils.hpp b/src/cpp/desktop-mac/Utils.hpp
index a97f777..58caad2 100644
--- a/src/cpp/desktop-mac/Utils.hpp
+++ b/src/cpp/desktop-mac/Utils.hpp
@@ -21,7 +21,7 @@
 
 #import <AppKit/NSAlert.h>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -31,13 +31,13 @@ namespace utils {
 
 void initializeLang();
 
-core::FilePath userLogPath();
+rscore::FilePath userLogPath();
    
 void showMessageBox(NSAlertStyle style, NSString* title, NSString* message);
    
 void browseURL(NSURL* url);
    
-core::system::ProcessSupervisor& processSupervisor();
+rscore::system::ProcessSupervisor& processSupervisor();
    
 bool supportsFullscreenMode(NSWindow* window);
 void enableFullscreenMode(NSWindow* window, bool primary);
diff --git a/src/cpp/desktop/DesktopAboutDialog.cpp b/src/cpp/desktop/DesktopAboutDialog.cpp
index d72c95a..fdd316d 100644
--- a/src/cpp/desktop/DesktopAboutDialog.cpp
+++ b/src/cpp/desktop/DesktopAboutDialog.cpp
@@ -25,7 +25,7 @@
 #include "DesktopOptions.hpp"
 #include "desktop-config.h"
 
-using namespace core;
+using namespace rscore;
 
 AboutDialog::AboutDialog(QWidget *parent) :
       QDialog(parent, Qt::Dialog),
diff --git a/src/cpp/desktop/DesktopChooseRHome.cpp b/src/cpp/desktop/DesktopChooseRHome.cpp
index a25e422..bd28cfe 100644
--- a/src/cpp/desktop/DesktopChooseRHome.cpp
+++ b/src/cpp/desktop/DesktopChooseRHome.cpp
@@ -54,7 +54,7 @@ ChooseRHome::ChooseRHome(QList<RVersion> list, QWidget *parent) :
     pOK_(NULL)
 {
     ui->setupUi(this);
-    if (!core::system::isWin64())
+    if (!rscore::system::isWin64())
        ui->radioDefault64->setVisible(false);
 
     setWindowIcon(QIcon(QString::fromAscii(":/icons/RStudio.ico")));
@@ -98,7 +98,7 @@ void ChooseRHome::chooseOther()
 {
    if (lastDir_.isEmpty())
    {
-      lastDir_ = QString::fromLocal8Bit(core::system::getenv("ProgramFiles").c_str());
+      lastDir_ = QString::fromLocal8Bit(rscore::system::getenv("ProgramFiles").c_str());
    }
 
    QString dir = QFileDialog::getExistingDirectory(
diff --git a/src/cpp/desktop/DesktopGwtCallback.cpp b/src/cpp/desktop/DesktopGwtCallback.cpp
index dde8f87..0b37718 100644
--- a/src/cpp/desktop/DesktopGwtCallback.cpp
+++ b/src/cpp/desktop/DesktopGwtCallback.cpp
@@ -48,7 +48,7 @@
 #include <Carbon/Carbon.h>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -119,7 +119,7 @@ namespace {
 
 FilePath userHomePath()
 {
-   return core::system::userHomePath("R_USER|HOME");
+   return rscore::system::userHomePath("R_USER|HOME");
 }
 
 QString createAliasedPath(const QString& path)
@@ -839,10 +839,10 @@ void GwtCallback::openTerminal(QString terminalPath,
                                QString extraPathEntries)
 {
    // append extra path entries to our path before launching
-   std::string path = core::system::getenv("PATH");
+   std::string path = rscore::system::getenv("PATH");
    std::string previousPath = path;
-   core::system::addToPath(&path, extraPathEntries.toStdString());
-   core::system::setenv("PATH", path);
+   rscore::system::addToPath(&path, extraPathEntries.toStdString());
+   rscore::system::setenv("PATH", path);
 
 #if defined(Q_WS_MACX)
 
@@ -873,9 +873,9 @@ void GwtCallback::openTerminal(QString terminalPath,
    else
    {
       // set HOME to USERPROFILE so msys ssh can find our keys
-      std::string previousHome = core::system::getenv("HOME");
-      std::string userProfile = core::system::getenv("USERPROFILE");
-      core::system::setenv("HOME", userProfile);
+      std::string previousHome = rscore::system::getenv("HOME");
+      std::string userProfile = rscore::system::getenv("USERPROFILE");
+      rscore::system::setenv("HOME", userProfile);
 
       // run the process
       QProcess::startDetached(QString::fromAscii("cmd.exe"),
@@ -883,7 +883,7 @@ void GwtCallback::openTerminal(QString terminalPath,
                               resolveAliasedPath(workingDirectory));
 
       // revert to previous home
-      core::system::setenv("HOME", previousHome);
+      rscore::system::setenv("HOME", previousHome);
    }
 
 
@@ -909,7 +909,7 @@ void GwtCallback::openTerminal(QString terminalPath,
 #endif
 
    // restore previous path
-   core::system::setenv("PATH", previousPath);
+   rscore::system::setenv("PATH", previousPath);
 }
 
 bool isProportionalFont(QString fontFamily)
@@ -1068,7 +1068,7 @@ void GwtCallback::installRtools(QString version, QString installerPath)
    args.push_back(QString::fromAscii("/SILENT"));
 
    // custom install directory
-   std::string systemDrive = core::system::getenv("SYSTEMDRIVE");
+   std::string systemDrive = rscore::system::getenv("SYSTEMDRIVE");
    if (!systemDrive.empty() && FilePath(systemDrive).exists())
    {
       std::string dir = systemDrive + "\\RBuildTools\\" + version.toStdString();
diff --git a/src/cpp/desktop/DesktopMain.cpp b/src/cpp/desktop/DesktopMain.cpp
index 8c32133..cffb6ef 100644
--- a/src/cpp/desktop/DesktopMain.cpp
+++ b/src/cpp/desktop/DesktopMain.cpp
@@ -43,7 +43,7 @@
 QProcess* pRSessionProcess;
 QString sharedSecret;
 
-using namespace core;
+using namespace rscore;
 using namespace desktop;
 
 namespace {
@@ -54,7 +54,7 @@ void initializeSharedSecret()
                   + QString::number(rand())
                   + QString::number(rand());
    std::string value = sharedSecret.toUtf8().constData();
-   core::system::setenv("RS_SHARED_SECRET", value);
+   rscore::system::setenv("RS_SHARED_SECRET", value);
 }
 
 void initializeWorkingDirectory(int argc,
@@ -82,7 +82,7 @@ void initializeWorkingDirectory(int argc,
    {
       // get current path
       FilePath currentPath = FilePath::safeCurrentPath(
-                                       core::system::userHomePath());
+                                       rscore::system::userHomePath());
 
 #if defined(_WIN32) || defined(__APPLE__)
 
@@ -93,7 +93,7 @@ void initializeWorkingDirectory(int argc,
       // wd to the current path
 
       FilePath exePath;
-      Error error = core::system::executablePath(argv[0], &exePath);
+      Error error = rscore::system::executablePath(argv[0], &exePath);
       if (!error)
       {
          if (!exePath.isWithin(currentPath))
@@ -108,8 +108,8 @@ void initializeWorkingDirectory(int argc,
 
       // on linux we take the current working dir if we were launched
       // from within a terminal
-      if (core::system::stdoutIsTerminal() &&
-         (currentPath != core::system::userHomePath()))
+      if (rscore::system::stdoutIsTerminal() &&
+         (currentPath != rscore::system::userHomePath()))
       {
          workingDir = currentPath.absolutePath();
       }
@@ -120,12 +120,12 @@ void initializeWorkingDirectory(int argc,
 
    // set the working dir if we have one
    if (!workingDir.empty())
-      core::system::setenv(kRStudioInitialWorkingDir, workingDir);
+      rscore::system::setenv(kRStudioInitialWorkingDir, workingDir);
 }
 
 void setInitialProject(const FilePath& projectFile, QString* pFilename)
 {
-   core::system::setenv(kRStudioInitialProject, projectFile.absolutePath());
+   rscore::system::setenv(kRStudioInitialProject, projectFile.absolutePath());
    pFilename->clear();
 }
 
@@ -157,7 +157,7 @@ void initializeStartupEnvironment(QString* pFilename)
       }
       else if (ext == ".rdata" || ext == ".rda")
       {   
-         core::system::setenv(kRStudioInitialEnvironment, filePath.absolutePath());
+         rscore::system::setenv(kRStudioInitialEnvironment, filePath.absolutePath());
          pFilename->clear();
       }
 
@@ -189,7 +189,7 @@ bool isNonProjectFilename(QString filename)
 
 int main(int argc, char* argv[])
 {
-   core::system::initHook();
+   rscore::system::initHook();
 
    try
    {
@@ -197,12 +197,12 @@ int main(int argc, char* argv[])
       QTextCodec::setCodecForCStrings(QTextCodec::codecForName("UTF-8"));
 
       // initialize log
-      core::system::initializeLog("rdesktop",
-                                  core::system::kLogLevelWarning,
+      rscore::system::initializeLog("rdesktop",
+                                  rscore::system::kLogLevelWarning,
                                   desktop::userLogPath());
 
       // ignore SIGPIPE
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
@@ -265,7 +265,7 @@ int main(int argc, char* argv[])
       if (desktop::options().runDiagnostics())
       {
          desktop::reattachConsoleIfNecessary();
-         initializeStderrLog("rdesktop", core::system::kLogLevelWarning);
+         initializeStderrLog("rdesktop", rscore::system::kLogLevelWarning);
       }
 
       pApp->setAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
@@ -280,7 +280,7 @@ int main(int argc, char* argv[])
 
       // get install path
       FilePath installPath;
-      error = core::system::installPath("..", argv[0], &installPath);
+      error = rscore::system::installPath("..", argv[0], &installPath);
       if (error)
       {
          LOG_ERROR(error);
@@ -331,7 +331,7 @@ int main(int argc, char* argv[])
          }
 #endif
       }
-      core::system::fixupExecutablePath(&sessionPath);
+      rscore::system::fixupExecutablePath(&sessionPath);
 
       // set the scripts path in options
       desktop::options().setScriptsPath(scriptsPath);
diff --git a/src/cpp/desktop/DesktopMainWindow.cpp b/src/cpp/desktop/DesktopMainWindow.cpp
index 5ab2bbb..9818210 100644
--- a/src/cpp/desktop/DesktopMainWindow.cpp
+++ b/src/cpp/desktop/DesktopMainWindow.cpp
@@ -34,7 +34,7 @@
 #include "DesktopUtils.hpp"
 #include "DesktopSessionLauncher.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
diff --git a/src/cpp/desktop/DesktopNetworkAccessManager.cpp b/src/cpp/desktop/DesktopNetworkAccessManager.cpp
index baa3455..7e89856 100644
--- a/src/cpp/desktop/DesktopNetworkAccessManager.cpp
+++ b/src/cpp/desktop/DesktopNetworkAccessManager.cpp
@@ -23,7 +23,7 @@
 #include "DesktopNetworkIOService.hpp"
 #include "DesktopOptions.hpp"
 
-using namespace core;
+using namespace rscore;
 
 using namespace desktop;
 
diff --git a/src/cpp/desktop/DesktopNetworkIOService.cpp b/src/cpp/desktop/DesktopNetworkIOService.cpp
index 5f4c707..344afed 100644
--- a/src/cpp/desktop/DesktopNetworkIOService.cpp
+++ b/src/cpp/desktop/DesktopNetworkIOService.cpp
@@ -16,7 +16,7 @@
 #include <core/Log.hpp>
 #include <core/Error.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
diff --git a/src/cpp/desktop/DesktopNetworkReply.cpp b/src/cpp/desktop/DesktopNetworkReply.cpp
index 8ea6f61..1256196 100644
--- a/src/cpp/desktop/DesktopNetworkReply.cpp
+++ b/src/cpp/desktop/DesktopNetworkReply.cpp
@@ -34,7 +34,7 @@
 
 #include "DesktopNetworkIOService.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -274,7 +274,7 @@ void NetworkReply::onError(const Error& networkError)
    if ((networkError.code() != boost::asio::error::operation_aborted) &&
        (networkError.code() != boost::asio::error::broken_pipe) &&
        (networkError.code() != boost::asio::error::eof) &&
-       !core::isPathNotFoundError(networkError) )
+       !rscore::isPathNotFoundError(networkError) )
    {
       LOG_ERROR(networkError);
    }
diff --git a/src/cpp/desktop/DesktopNetworkReply.hpp b/src/cpp/desktop/DesktopNetworkReply.hpp
index e599cfb..a72ed54 100644
--- a/src/cpp/desktop/DesktopNetworkReply.hpp
+++ b/src/cpp/desktop/DesktopNetworkReply.hpp
@@ -20,7 +20,7 @@
 
 #include <QNetworkReply>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    namespace http {
@@ -57,10 +57,10 @@ protected:
    qint64 readData(char *data, qint64 maxSize);
 
 private:
-   void onResponse(const core::http::Response& response);
-   void onError(const core::Error& error);
+   void onResponse(const rscore::http::Response& response);
+   void onError(const rscore::Error& error);
 
-   void executeRequest(const core::http::Request& request);
+   void executeRequest(const rscore::http::Request& request);
 
 private:
    struct Impl;
diff --git a/src/cpp/desktop/DesktopOptions.cpp b/src/cpp/desktop/DesktopOptions.cpp
index 77f3161..edf0c1e 100644
--- a/src/cpp/desktop/DesktopOptions.cpp
+++ b/src/cpp/desktop/DesktopOptions.cpp
@@ -24,7 +24,7 @@
 
 #include "DesktopUtils.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -81,7 +81,7 @@ QString Options::portNumber() const
    {
       // Use a random-ish port number to avoid collisions between different
       // instances of rdesktop-launched rsessions
-      int base = std::abs(core::random::uniformRandomInteger<int>());
+      int base = std::abs(rscore::random::uniformRandomInteger<int>());
       portNumber_ = QString::number((base % 40000) + 8080);
 
       // recalculate the local peer and set RS_LOCAL_PEER so that
@@ -95,7 +95,7 @@ QString Options::portNumber() const
                           QString::fromAscii("-rsession");
 #endif
       localPeer_ = localPeer.toUtf8().constData();
-      core::system::setenv("RS_LOCAL_PEER", localPeer_);
+      rscore::system::setenv("RS_LOCAL_PEER", localPeer_);
    }
 
    return portNumber_;
@@ -246,7 +246,7 @@ void Options::setRBinDir(QString path)
 
 bool Options::preferR64() const
 {
-   if (!core::system::isWin64())
+   if (!rscore::system::isWin64())
       return false;
 
    if (!settings_.contains(QString::fromAscii("PreferR64")))
@@ -275,7 +275,7 @@ FilePath Options::executablePath() const
 {
    if (executablePath_.empty())
    {
-      Error error = core::system::executablePath(QApplication::arguments().at(0).toUtf8(),
+      Error error = rscore::system::executablePath(QApplication::arguments().at(0).toUtf8(),
                                                  &executablePath_);
       if (error)
          LOG_ERROR(error);
@@ -288,7 +288,7 @@ FilePath Options::supportingFilePath() const
    if (supportingFilePath_.empty())
    {
       // default to install path
-      core::system::installPath("..",
+      rscore::system::installPath("..",
                                 QApplication::arguments().at(0).toUtf8(),
                                 &supportingFilePath_);
 
@@ -350,14 +350,14 @@ void Options::setIgnoredUpdateVersions(const QStringList& ignoredVersions)
    settings_.setValue(QString::fromAscii("ignoredUpdateVersions"), ignoredVersions);
 }
 
-core::FilePath Options::scratchTempDir(core::FilePath defaultPath)
+rscore::FilePath Options::scratchTempDir(rscore::FilePath defaultPath)
 {
-   core::FilePath dir(scratchPath.toUtf8().constData());
+   rscore::FilePath dir(scratchPath.toUtf8().constData());
 
    if (!dir.empty() && dir.exists())
    {
       dir = dir.childPath("tmp");
-      core::Error error = dir.ensureDirectory();
+      rscore::Error error = dir.ensureDirectory();
       if (!error)
          return dir;
    }
@@ -366,7 +366,7 @@ core::FilePath Options::scratchTempDir(core::FilePath defaultPath)
 
 void Options::cleanUpScratchTempDir()
 {
-   core::FilePath temp = scratchTempDir(core::FilePath());
+   rscore::FilePath temp = scratchTempDir(rscore::FilePath());
    if (!temp.empty())
       temp.removeIfExists();
 }
diff --git a/src/cpp/desktop/DesktopOptions.hpp b/src/cpp/desktop/DesktopOptions.hpp
index 7a4019e..fcf693e 100644
--- a/src/cpp/desktop/DesktopOptions.hpp
+++ b/src/cpp/desktop/DesktopOptions.hpp
@@ -65,23 +65,23 @@ public:
    void setPreferR64(bool preferR64);
 #endif
 
-   core::FilePath scriptsPath() const;
-   void setScriptsPath(const core::FilePath& scriptsPath);
+   rscore::FilePath scriptsPath() const;
+   void setScriptsPath(const rscore::FilePath& scriptsPath);
 
-   core::FilePath executablePath() const;
-   core::FilePath supportingFilePath() const;
+   rscore::FilePath executablePath() const;
+   rscore::FilePath supportingFilePath() const;
 
-   core::FilePath wwwDocsPath() const;
+   rscore::FilePath wwwDocsPath() const;
 
 #ifdef _WIN32
-   core::FilePath urlopenerPath() const;
-   core::FilePath rsinversePath() const;
+   rscore::FilePath urlopenerPath() const;
+   rscore::FilePath rsinversePath() const;
 #endif
 
    QStringList ignoredUpdateVersions() const;
    void setIgnoredUpdateVersions(const QStringList& ignoredVersions);
 
-   core::FilePath scratchTempDir(core::FilePath defaultPath=core::FilePath());
+   rscore::FilePath scratchTempDir(rscore::FilePath defaultPath=rscore::FilePath());
    void cleanUpScratchTempDir();
 
    bool webkitDevTools();
@@ -98,9 +98,9 @@ private:
    friend Options& options();
 
    QSettings settings_;
-   core::FilePath scriptsPath_;
-   mutable core::FilePath executablePath_;
-   mutable core::FilePath supportingFilePath_;
+   rscore::FilePath scriptsPath_;
+   mutable rscore::FilePath executablePath_;
+   mutable rscore::FilePath supportingFilePath_;
    mutable QString portNumber_;
    mutable std::string localPeer_;
    bool runDiagnostics_;
diff --git a/src/cpp/desktop/DesktopPosixApplication.cpp b/src/cpp/desktop/DesktopPosixApplication.cpp
index 5179a94..a7a6299 100644
--- a/src/cpp/desktop/DesktopPosixApplication.cpp
+++ b/src/cpp/desktop/DesktopPosixApplication.cpp
@@ -23,7 +23,7 @@
 #include "DesktopOptions.hpp"
 #include "DesktopUtils.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
diff --git a/src/cpp/desktop/DesktopPosixDetectRHome.cpp b/src/cpp/desktop/DesktopPosixDetectRHome.cpp
index 748d259..75a8544 100644
--- a/src/cpp/desktop/DesktopPosixDetectRHome.cpp
+++ b/src/cpp/desktop/DesktopPosixDetectRHome.cpp
@@ -32,7 +32,7 @@
 #include "DesktopUtils.hpp"
 #include "DesktopOptions.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -52,7 +52,7 @@ bool prepareEnvironment(Options& options)
 {
    // check for which R override
    FilePath rWhichRPath;
-   std::string whichROverride = core::system::getenv("RSTUDIO_WHICH_R");
+   std::string whichROverride = rscore::system::getenv("RSTUDIO_WHICH_R");
    if (!whichROverride.empty())
       rWhichRPath = FilePath(whichROverride);
 
diff --git a/src/cpp/desktop/DesktopRVersion.cpp b/src/cpp/desktop/DesktopRVersion.cpp
index df4845e..3f0432a 100644
--- a/src/cpp/desktop/DesktopRVersion.cpp
+++ b/src/cpp/desktop/DesktopRVersion.cpp
@@ -31,7 +31,7 @@
 #define KEY_WOW64_64KEY 0x0100
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -213,7 +213,7 @@ void enumProgramFiles(QList<RVersion>* pResults)
 
 void enumRegistry(Architecture architecture, QList<RVersion>* pResults)
 {
-   using namespace core::system;
+   using namespace rscore::system;
 
    REGSAM flags;
    switch (architecture)
@@ -261,7 +261,7 @@ void enumRegistry(Architecture architecture, QList<RVersion>* pResults)
 void enumRegistry(QList<RVersion>* pResults)
 {
    enumRegistry(ArchX86, pResults);
-   if (core::system::isWin64())
+   if (rscore::system::isWin64())
       enumRegistry(ArchX64, pResults);
 }
 
@@ -295,7 +295,7 @@ QList<RVersion> allRVersions(QList<RVersion> versions)
 
 RVersion detectPreferredFromRegistry(Architecture architecture)
 {
-   using namespace core::system;
+   using namespace rscore::system;
 
    REGSAM flags;
    switch (architecture)
@@ -496,7 +496,7 @@ QString RVersion::description() const
 {
    QString result;
 
-   if (core::system::isWin64())
+   if (rscore::system::isWin64())
    {
       if (architecture() == ArchX64)
          result.append(QString::fromUtf8("[64-bit] "));
diff --git a/src/cpp/desktop/DesktopSessionLauncher.cpp b/src/cpp/desktop/DesktopSessionLauncher.cpp
index 19d2470..261fc07 100644
--- a/src/cpp/desktop/DesktopSessionLauncher.cpp
+++ b/src/cpp/desktop/DesktopSessionLauncher.cpp
@@ -35,7 +35,7 @@
 #define RUN_DIAGNOSTICS_LOG(message) if (desktop::options().runDiagnostics()) \
              std::cout << (message) << std::endl;
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -61,7 +61,7 @@ FilePath abendLogPath()
 
 void logEnvVar(const std::string& name)
 {
-   std::string value = core::system::getenv(name);
+   std::string value = rscore::system::getenv(name);
    if (!value.empty())
       RUN_DIAGNOSTICS_LOG("  " + name + "=" + value);
 }
@@ -302,7 +302,7 @@ QString SessionLauncher::collectAbendLogMessage() const
    FilePath abendLog = abendLogPath();
    if (abendLog.exists())
    {
-      Error error = core::readStringFromFile(abendLog, &contents);
+      Error error = rscore::readStringFromFile(abendLog, &contents);
       if (error)
          LOG_ERROR(error);
 
diff --git a/src/cpp/desktop/DesktopSessionLauncher.hpp b/src/cpp/desktop/DesktopSessionLauncher.hpp
index 82001b9..f8d7d1a 100644
--- a/src/cpp/desktop/DesktopSessionLauncher.hpp
+++ b/src/cpp/desktop/DesktopSessionLauncher.hpp
@@ -32,8 +32,8 @@ class SessionLauncher : public QObject
 {
    Q_OBJECT
 public:
-   SessionLauncher(const core::FilePath& sessionPath,
-                   const core::FilePath& confPath)
+   SessionLauncher(const rscore::FilePath& sessionPath,
+                   const rscore::FilePath& confPath)
       : confPath_(confPath),
         sessionPath_(sessionPath),
         pAppLaunch_(NULL),
@@ -42,10 +42,10 @@ public:
    {
    }
 
-   core::Error launchFirstSession(const QString& filename,
+   rscore::Error launchFirstSession(const QString& filename,
                                   ApplicationLaunch* pAppLaunch);
 
-   core::Error launchNextSession(bool reload);
+   rscore::Error launchNextSession(bool reload);
 
    QString launchFailedErrorMessage() const;
 
@@ -61,7 +61,7 @@ private:
 
    void closeAllSatillites();
 
-   core::Error launchSession(const QStringList& argList,
+   rscore::Error launchSession(const QStringList& argList,
                              QProcess** ppRSessionProcess);
 
    void buildLaunchContext(QString* pHost,
@@ -71,8 +71,8 @@ private:
 
 
 private:
-   core::FilePath confPath_;
-   core::FilePath sessionPath_;
+   rscore::FilePath confPath_;
+   rscore::FilePath sessionPath_;
    ApplicationLaunch* pAppLaunch_;
    MainWindow* pMainWindow_;
    QProcess* pRSessionProcess_;
diff --git a/src/cpp/desktop/DesktopSynctex.cpp b/src/cpp/desktop/DesktopSynctex.cpp
index bcb6d5a..06a4308 100644
--- a/src/cpp/desktop/DesktopSynctex.cpp
+++ b/src/cpp/desktop/DesktopSynctex.cpp
@@ -33,7 +33,7 @@
 #include "synctex/evince/EvinceSynctex.hpp"
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -56,9 +56,9 @@ SynctexViewerInfo discoverViewer()
 SynctexViewerInfo discoverViewer()
 {
    // probe for evince version
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand("evince --version",
-                                          core::system::ProcessOptions(),
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand("evince --version",
+                                          rscore::system::ProcessOptions(),
                                           &result);
    if (error)
    {
diff --git a/src/cpp/desktop/DesktopUtils.cpp b/src/cpp/desktop/DesktopUtils.cpp
index faddc60..74b3811 100644
--- a/src/cpp/desktop/DesktopUtils.cpp
+++ b/src/cpp/desktop/DesktopUtils.cpp
@@ -30,7 +30,7 @@
 #include <windows.h>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
@@ -60,8 +60,8 @@ void reattachConsoleIfNecessary()
 // SessionOptions.hpp although the code path isn't exactly the same)
 FilePath userLogPath()
 {
-   FilePath userHomePath = core::system::userHomePath("R_USER|HOME");
-   FilePath logPath = core::system::userSettingsPath(
+   FilePath userHomePath = rscore::system::userHomePath("R_USER|HOME");
+   FilePath logPath = rscore::system::userSettingsPath(
          userHomePath,
          "RStudio-Desktop").childPath("log");
    return logPath;
@@ -254,15 +254,15 @@ void openUrl(const QUrl& url)
    }
    else
    {
-      core::system::ProcessOptions options;
+      rscore::system::ProcessOptions options;
       options.breakawayFromJob = true;
       options.detachProcess = true;
 
       std::vector<std::string> args;
       args.push_back(url.toString().toStdString());
 
-      core::system::ProcessResult result;
-      Error error = core::system::runProgram(
+      rscore::system::ProcessResult result;
+      Error error = rscore::system::runProgram(
             desktop::options().urlopenerPath().absolutePath(),
             args,
             "",
@@ -283,7 +283,7 @@ void openUrl(const QUrl& url)
 QFileDialog::Options standardFileDialogOptions()
 {
     bool isWindowsXP = QSysInfo::windowsVersion() == QSysInfo::WV_XP;
-    if (isWindowsXP || core::system::isWin64())
+    if (isWindowsXP || rscore::system::isWin64())
         return 0;
     else
         return QFileDialog::DontUseNativeDialog;
diff --git a/src/cpp/desktop/DesktopUtils.hpp b/src/cpp/desktop/DesktopUtils.hpp
index 77ff91f..8d1b6fb 100644
--- a/src/cpp/desktop/DesktopUtils.hpp
+++ b/src/cpp/desktop/DesktopUtils.hpp
@@ -21,7 +21,7 @@
 #include <QMainWindow>
 #include <QFileDialog>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -29,7 +29,7 @@ namespace desktop {
 
 void reattachConsoleIfNecessary();
 
-core::FilePath userLogPath();
+rscore::FilePath userLogPath();
 
 bool isRetina(QMainWindow* pMainWindow);
 
diff --git a/src/cpp/desktop/DesktopWebPage.cpp b/src/cpp/desktop/DesktopWebPage.cpp
index e2ad7b9..9a2ab1e 100644
--- a/src/cpp/desktop/DesktopWebPage.cpp
+++ b/src/cpp/desktop/DesktopWebPage.cpp
@@ -29,7 +29,7 @@
 
 #include "DesktopUtils.hpp"
 
-using namespace core;
+using namespace rscore;
 
 extern QString sharedSecret;
 
diff --git a/src/cpp/desktop/DesktopWebView.cpp b/src/cpp/desktop/DesktopWebView.cpp
index e6dbd69..81dfd0e 100644
--- a/src/cpp/desktop/DesktopWebView.cpp
+++ b/src/cpp/desktop/DesktopWebView.cpp
@@ -38,7 +38,7 @@ WebView::WebView(QUrl baseUrl, QWidget *parent) :
     dpiZoomScaling_(getDpiZoomScaling())
 {
 #ifdef Q_WS_X11
-   if (!core::system::getenv("KDE_FULL_SESSION").empty())
+   if (!rscore::system::getenv("KDE_FULL_SESSION").empty())
       setStyle(new QPlastiqueStyle());
 #endif
    pWebPage_ = new WebPage(baseUrl, this);
@@ -191,7 +191,7 @@ void WebView::unsupportedContent(QNetworkReply* pReply)
    if (contentType.contains(QRegExp(QString::fromAscii("^\\s*application/pdf($|;)"),
                                     Qt::CaseInsensitive)))
    {
-      core::FilePath dir(options().scratchTempDir());
+      rscore::FilePath dir(options().scratchTempDir());
 
       QTemporaryFile pdfFile(QString::fromUtf8(
             dir.childPath("rstudio-XXXXXX.pdf").absolutePath().c_str()));
diff --git a/src/cpp/desktop/DesktopWin32DetectRHome.cpp b/src/cpp/desktop/DesktopWin32DetectRHome.cpp
index 31a8a17..bb6a846 100644
--- a/src/cpp/desktop/DesktopWin32DetectRHome.cpp
+++ b/src/cpp/desktop/DesktopWin32DetectRHome.cpp
@@ -28,7 +28,7 @@
 
 #include "DesktopRVersion.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 
diff --git a/src/cpp/desktop/DesktopWordViewer.cpp b/src/cpp/desktop/DesktopWordViewer.cpp
index cb763fc..8ef5d9e 100644
--- a/src/cpp/desktop/DesktopWordViewer.cpp
+++ b/src/cpp/desktop/DesktopWordViewer.cpp
@@ -28,7 +28,7 @@
 
 #include "DesktopWordViewer.hpp"
 
-using namespace core;
+using namespace rscore;
 namespace desktop {
 namespace {
 
diff --git a/src/cpp/desktop/DesktopWordViewer.hpp b/src/cpp/desktop/DesktopWordViewer.hpp
index d5d5e78..00c2d59 100644
--- a/src/cpp/desktop/DesktopWordViewer.hpp
+++ b/src/cpp/desktop/DesktopWordViewer.hpp
@@ -29,16 +29,16 @@ class WordViewer : boost::noncopyable
 public:
    WordViewer();
    ~WordViewer();
-   core::Error showDocument(QString& path);
-   core::Error closeLastViewedDocument();
+   rscore::Error showDocument(QString& path);
+   rscore::Error closeLastViewedDocument();
 
 private:
-   core::Error openDocument(QString& path, IDispatch* idispDocs,
+   rscore::Error openDocument(QString& path, IDispatch* idispDocs,
                             IDispatch** pidispDoc);
-   core::Error showWord();
-   core::Error getDocumentPosition(IDispatch* idispPos, int* pxPos, int* pyPos);
-   core::Error setDocumentPosition(IDispatch* idispPos, int xPos, int yPos);
-   core::Error getDocumentByPath(QString& path, IDispatch** pidispDoc);
+   rscore::Error showWord();
+   rscore::Error getDocumentPosition(IDispatch* idispPos, int* pxPos, int* pyPos);
+   rscore::Error setDocumentPosition(IDispatch* idispPos, int xPos, int yPos);
+   rscore::Error getDocumentByPath(QString& path, IDispatch** pidispDoc);
    IDispatch* idispWord_;
    int docScrollX_;
    int docScrollY_;
diff --git a/src/cpp/desktop/synctex/evince/EvinceSynctex.cpp b/src/cpp/desktop/synctex/evince/EvinceSynctex.cpp
index 9d61422..11d6d27 100644
--- a/src/cpp/desktop/synctex/evince/EvinceSynctex.cpp
+++ b/src/cpp/desktop/synctex/evince/EvinceSynctex.cpp
@@ -28,7 +28,7 @@
 #include "EvinceDaemon.hpp"
 #include "EvinceWindow.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 namespace synctex {
@@ -41,7 +41,7 @@ void logDBusError(const QDBusError& error, const ErrorLocation& location)
    std::string msg = boost::str(fmt % error.type() %
                                       error.name().toStdString() %
                                       error.message().toStdString());
-   core::log::logErrorMessage(msg, location);
+   rscore::log::logErrorMessage(msg, location);
 }
 
 } // anonymous namespace
@@ -160,7 +160,7 @@ void EvinceSynctex::syncView(EvinceWindow* pWindow,
    QDBusPendingReply<> reply = pWindow->SyncView(
                                        srcFile,
                                        srcLoc,
-                                       core::date_time::secondsSinceEpoch());
+                                       rscore::date_time::secondsSinceEpoch());
 
    // wait for the results asynchronously
    QDBusPendingCallWatcher* pWatcher = new QDBusPendingCallWatcher(reply,
diff --git a/src/cpp/desktop/synctex/rsinverse/RsInverseMain.cpp b/src/cpp/desktop/synctex/rsinverse/RsInverseMain.cpp
index 595a3c9..b7317c2 100644
--- a/src/cpp/desktop/synctex/rsinverse/RsInverseMain.cpp
+++ b/src/cpp/desktop/synctex/rsinverse/RsInverseMain.cpp
@@ -37,17 +37,17 @@
 #define kPostbackUriScope                 "postback/"
 #define kPostbackExitCodeHeader           "X-Postback-ExitCode"
 
-using namespace core;
+using namespace rscore;
 
 int main(int argc, char** argv)
 {
    try
    {
       // initialize log
-      initializeSystemLog("rsinverse", core::system::kLogLevelWarning);
+      initializeSystemLog("rsinverse", rscore::system::kLogLevelWarning);
 
       // ignore SIGPIPE
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
@@ -75,7 +75,7 @@ int main(int argc, char** argv)
             "line of code to navigate to");
 
       // define program options (allow positional specification)
-      core::program_options::OptionsDescription optDesc("rsinverse");
+      rscore::program_options::OptionsDescription optDesc("rsinverse");
       optDesc.commandLine.add(rsinverseOptions);
       optDesc.positionalOptions.add("hwnd", 1);
       optDesc.positionalOptions.add("port", 1);
@@ -84,7 +84,7 @@ int main(int argc, char** argv)
       optDesc.positionalOptions.add("line", 1);
 
       // read options
-      ProgramStatus status = core::program_options::read(optDesc, argc, argv);
+      ProgramStatus status = rscore::program_options::read(optDesc, argc, argv);
       if (status.exit())
          return status.exitCode();
 
@@ -105,7 +105,7 @@ int main(int argc, char** argv)
 
       // enocde the source file and line as a query string
       std::string requestBody;
-      core::http::Fields args;
+      rscore::http::Fields args;
       args.push_back(std::make_pair("source-file", sourceFile));
       args.push_back(std::make_pair("line",
                                      safe_convert::numberToString(line)));
@@ -127,7 +127,7 @@ int main(int argc, char** argv)
 
       // send it
       http::Response response;
-      std::string pipeName = core::system::getenv("RS_LOCAL_PEER");
+      std::string pipeName = rscore::system::getenv("RS_LOCAL_PEER");
       error = http::sendRequest(pipeName,
                                 request,
                                 http::ConnectionRetryProfile(
diff --git a/src/cpp/desktop/synctex/sumatra/SumatraSynctex.cpp b/src/cpp/desktop/synctex/sumatra/SumatraSynctex.cpp
index 8b4bd4d..41e090a 100644
--- a/src/cpp/desktop/synctex/sumatra/SumatraSynctex.cpp
+++ b/src/cpp/desktop/synctex/sumatra/SumatraSynctex.cpp
@@ -25,7 +25,7 @@
 #include "DesktopUtils.hpp"
 #include "DesktopOptions.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace desktop {
 namespace synctex {
@@ -68,7 +68,7 @@ QStringList inverseSearchArgs(WId mainWindowId)
 
    // shared secret
    cmdFormat.append(
-          QString::fromStdString(core::system::getenv("RS_SHARED_SECRET")));
+          QString::fromStdString(rscore::system::getenv("RS_SHARED_SECRET")));
    cmdFormat.append(space);
 
    // file and line placeholders
diff --git a/src/cpp/desktop/urlopener/UrlOpenerMain.cpp b/src/cpp/desktop/urlopener/UrlOpenerMain.cpp
index 0d9524f..4a4d73e 100644
--- a/src/cpp/desktop/urlopener/UrlOpenerMain.cpp
+++ b/src/cpp/desktop/urlopener/UrlOpenerMain.cpp
@@ -27,7 +27,7 @@ int main(int argc, char** argv)
    try
    {
       // initialize log
-      initializeSystemLog("urlopener", core::system::kLogLevelWarning);
+      initializeSystemLog("urlopener", rscore::system::kLogLevelWarning);
 
       // check arguments
       if (argc < 2)
diff --git a/src/cpp/diagnostics/DiagnosticsMain.cpp b/src/cpp/diagnostics/DiagnosticsMain.cpp
index 11221d0..d5e78ca 100644
--- a/src/cpp/diagnostics/DiagnosticsMain.cpp
+++ b/src/cpp/diagnostics/DiagnosticsMain.cpp
@@ -26,20 +26,20 @@
 
 #include "config.h"
 
-using namespace core;
+using namespace rscore;
 
 namespace {
 
 FilePath homePath()
 {
-   return core::system::userHomePath("R_USER|HOME");
+   return rscore::system::userHomePath("R_USER|HOME");
 }
 
 // NOTE: this code is duplicated in diagnostics as well (and also in
 // SessionOptions.hpp although the code path isn't exactly the same)
 FilePath userLogPath()
 {
-   FilePath logPath = core::system::userSettingsPath(
+   FilePath logPath = rscore::system::userSettingsPath(
          homePath(),
          "RStudio-Desktop"
          ).childPath("log");
@@ -56,7 +56,7 @@ void writeLogFile(const std::string& logFileName, std::ostream& ostr)
    if (logFilePath.exists())
    {
       std::string contents;
-      Error error = core::readStringFromFile(logFilePath, &contents);
+      Error error = rscore::readStringFromFile(logFilePath, &contents);
       if (error)
          LOG_ERROR(error);
       if (contents.empty())
@@ -76,16 +76,16 @@ void writeLogFile(const std::string& logFileName, std::ostream& ostr)
 
 int main(int argc, char** argv)
 {
-  core::system::initializeStderrLog("rstudio-diagnostics",
-                                    core::system::kLogLevelWarning);
+  rscore::system::initializeStderrLog("rstudio-diagnostics",
+                                    rscore::system::kLogLevelWarning);
 
   // ignore SIGPIPE
-  Error error = core::system::ignoreSignal(core::system::SigPipe);
+  Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
   if (error)
      LOG_ERROR(error);
 
   writeLogFile("rdesktop.log", std::cout);
-  writeLogFile("rsession-" + core::system::username() + ".log", std::cout);
+  writeLogFile("rsession-" + rscore::system::username() + ".log", std::cout);
 
   return EXIT_SUCCESS;
 }
diff --git a/src/cpp/monitor/MonitorClient.cpp b/src/cpp/monitor/MonitorClient.cpp
index 8728f26..e8bcc24 100644
--- a/src/cpp/monitor/MonitorClient.cpp
+++ b/src/cpp/monitor/MonitorClient.cpp
@@ -21,7 +21,7 @@ namespace monitor {
 
 namespace {
 
-class MonitorLogWriter : public core::LogWriter
+class MonitorLogWriter : public rscore::LogWriter
 {
 public:
    MonitorLogWriter(const std::string& programIdentity)
@@ -29,13 +29,13 @@ public:
    {
    }
 
-   virtual void log(core::system::LogLevel level, const std::string& message)
+   virtual void log(rscore::system::LogLevel level, const std::string& message)
    {
       log(programIdentity_, level, message);
    }
 
    virtual void log(const std::string& programIdentity,
-                    core::system::LogLevel level,
+                    rscore::system::LogLevel level,
                     const std::string& message)
    {
       client().logMessage(programIdentity, level, message);
@@ -51,10 +51,10 @@ Client* s_pClient = NULL;
 
 } // anonymous namespace
 
-boost::shared_ptr<core::LogWriter> Client::createLogWriter(
+boost::shared_ptr<rscore::LogWriter> Client::createLogWriter(
                                     const std::string& programIdentity)
 {
-   return boost::shared_ptr<core::LogWriter>(
+   return boost::shared_ptr<rscore::LogWriter>(
                                  new MonitorLogWriter(programIdentity));
 }
 
diff --git a/src/cpp/monitor/MonitorClientImpl.hpp b/src/cpp/monitor/MonitorClientImpl.hpp
index bec9c5e..4b64523 100644
--- a/src/cpp/monitor/MonitorClientImpl.hpp
+++ b/src/cpp/monitor/MonitorClientImpl.hpp
@@ -30,7 +30,7 @@ public:
    }
 
    void logMessage(const std::string& programIdentity,
-                   core::system::LogLevel level,
+                   rscore::system::LogLevel level,
                    const std::string& message);
 
    void sendMetrics(const std::vector<metrics::Metric>& metrics);
@@ -52,7 +52,7 @@ public:
    }
 
    void logMessage(const std::string& programIdentity,
-                   core::system::LogLevel level,
+                   rscore::system::LogLevel level,
                    const std::string& message);
 
    void sendMetrics(const std::vector<metrics::Metric>& metrics);
diff --git a/src/cpp/monitor/MonitorClientOverlay.cpp b/src/cpp/monitor/MonitorClientOverlay.cpp
index 98eb5ee..1f5c9bb 100644
--- a/src/cpp/monitor/MonitorClientOverlay.cpp
+++ b/src/cpp/monitor/MonitorClientOverlay.cpp
@@ -19,7 +19,7 @@
 namespace monitor {
 
 void SyncClient::logMessage(const std::string& programIdentity,
-                            core::system::LogLevel level,
+                            rscore::system::LogLevel level,
                             const std::string& message)
 {
 }
@@ -34,7 +34,7 @@ void SyncClient::sendMultiMetrics(
 }
 
 void AsyncClient::logMessage(const std::string& programIdentity,
-                             core::system::LogLevel level,
+                             rscore::system::LogLevel level,
                              const std::string& message)
 {
 }
diff --git a/src/cpp/monitor/events/Event.cpp b/src/cpp/monitor/events/Event.cpp
index e31c8d4..7ba0101 100644
--- a/src/cpp/monitor/events/Event.cpp
+++ b/src/cpp/monitor/events/Event.cpp
@@ -69,7 +69,7 @@ std::ostream& operator<<(std::ostream& ostr, const Event& event)
 
    ostr << " - ";
    ostr << event.username() << " [" << event.pid() << "] - ";
-   ostr << core::http::util::httpDate(event.timestamp());
+   ostr << rscore::http::util::httpDate(event.timestamp());
    if (!event.data().empty())
    {
       ostr << " - " << event.data();
diff --git a/src/cpp/monitor/include/monitor/MonitorClient.hpp b/src/cpp/monitor/include/monitor/MonitorClient.hpp
index ff87058..9182fe8 100644
--- a/src/cpp/monitor/include/monitor/MonitorClient.hpp
+++ b/src/cpp/monitor/include/monitor/MonitorClient.hpp
@@ -44,10 +44,10 @@ public:
    virtual ~Client() {}
 
    virtual void logMessage(const std::string& programIdentity,
-                           core::system::LogLevel level,
+                           rscore::system::LogLevel level,
                            const std::string& message) = 0;
 
-   boost::shared_ptr<core::LogWriter> createLogWriter(
+   boost::shared_ptr<rscore::LogWriter> createLogWriter(
                                        const std::string& programIdentity);
 
    virtual void sendMetrics(const std::vector<metrics::Metric>& metrics) = 0;
diff --git a/src/cpp/monitor/include/monitor/events/Event.hpp b/src/cpp/monitor/include/monitor/events/Event.hpp
index 2f7a290..c3a4cf2 100644
--- a/src/cpp/monitor/include/monitor/events/Event.hpp
+++ b/src/cpp/monitor/include/monitor/events/Event.hpp
@@ -50,8 +50,8 @@ public:
    Event(EventScope scope,
          int id,
          const std::string& data = std::string(),
-         const std::string& username = core::system::username(),
-         PidType pid = core::system::currentProcessId(),
+         const std::string& username = rscore::system::username(),
+         PidType pid = rscore::system::currentProcessId(),
          boost::posix_time::ptime timestamp =
                         boost::posix_time::microsec_clock::universal_time())
       : empty_(false),
diff --git a/src/cpp/monitor/include/monitor/metrics/Metric.hpp b/src/cpp/monitor/include/monitor/metrics/Metric.hpp
index e077fff..34d608e 100644
--- a/src/cpp/monitor/include/monitor/metrics/Metric.hpp
+++ b/src/cpp/monitor/include/monitor/metrics/Metric.hpp
@@ -24,7 +24,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -146,12 +146,12 @@ typedef boost::function<void(const Metric&)> MetricHandler;
 typedef boost::function<void(const MultiMetric&)> MultiMetricHandler;
 
 // json serialization
-core::json::Object metricToJson(const Metric& metric);
-core::Error metricFromJson(const core::json::Object& metricJson,
+rscore::json::Object metricToJson(const Metric& metric);
+rscore::Error metricFromJson(const rscore::json::Object& metricJson,
                            Metric* pMetric);
 
-core::json::Object metricToJson(const MultiMetric& multiMetric);
-core::Error metricFromJson(const core::json::Object& multiMetricJson,
+rscore::json::Object metricToJson(const MultiMetric& multiMetric);
+rscore::Error metricFromJson(const rscore::json::Object& multiMetricJson,
                            MultiMetric* pMultiMetric);
 
 
diff --git a/src/cpp/monitor/metrics/Metric.cpp b/src/cpp/monitor/metrics/Metric.cpp
index b645136..c61b7d6 100644
--- a/src/cpp/monitor/metrics/Metric.cpp
+++ b/src/cpp/monitor/metrics/Metric.cpp
@@ -24,7 +24,7 @@
 
 #include <core/json/JsonRpc.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace monitor {
 namespace metrics {
diff --git a/src/cpp/r/RErrorCategory.cpp b/src/cpp/r/RErrorCategory.cpp
index 4214cd8..748dc6f 100644
--- a/src/cpp/r/RErrorCategory.cpp
+++ b/src/cpp/r/RErrorCategory.cpp
@@ -80,16 +80,16 @@ std::string RErrorCategory::message( int ev ) const
 	return message ;
 }
 
-core::Error rCodeExecutionError(const std::string& errMsg, 
-                                const core::ErrorLocation& location)
+rscore::Error rCodeExecutionError(const std::string& errMsg, 
+                                const rscore::ErrorLocation& location)
 {
-   core::Error error(errc::CodeExecutionError, location);
+   rscore::Error error(errc::CodeExecutionError, location);
    error.addProperty("errormsg", errMsg);
    return error;
 }
    
    
-bool isCodeExecutionError(const core::Error& error, std::string* pErrMsg)
+bool isCodeExecutionError(const rscore::Error& error, std::string* pErrMsg)
 {
    if (error.code() == r::errc::CodeExecutionError)
    {
@@ -103,7 +103,7 @@ bool isCodeExecutionError(const core::Error& error, std::string* pErrMsg)
    }
 }
    
-std::string endUserErrorMessage(const core::Error& error)
+std::string endUserErrorMessage(const rscore::Error& error)
 {
    std::string errMsg;
    if (isCodeExecutionError(error, &errMsg))
diff --git a/src/cpp/r/RExec.cpp b/src/cpp/r/RExec.cpp
index d091bde..75377c7 100644
--- a/src/cpp/r/RExec.cpp
+++ b/src/cpp/r/RExec.cpp
@@ -33,7 +33,7 @@ LibExtern int R_interrupts_pending;
 LibExtern int UserBreak;
 #endif
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
    
@@ -206,7 +206,7 @@ Error executeSafely(boost::function<void()> function)
    }
 }
    
-core::Error executeSafely(boost::function<SEXP()> function, SEXP* pSEXP)
+rscore::Error executeSafely(boost::function<SEXP()> function, SEXP* pSEXP)
 {
    // disable custom error handlers while we execute code
    DisableErrorHandlerScope disableErrorHandler;
@@ -480,7 +480,7 @@ void checkUserInterrupt()
 }
    
 IgnoreInterruptsScope::IgnoreInterruptsScope()
-   : pSignalBlocker_(new core::system::SignalBlocker())
+   : pSignalBlocker_(new rscore::system::SignalBlocker())
 {
    // save suspend state and set suspend flag
    previousInterruptsSuspended_ = (R_interrupts_suspended == TRUE);
@@ -490,7 +490,7 @@ IgnoreInterruptsScope::IgnoreInterruptsScope()
    setInterruptsPending(false);
       
    // enable signal blocker
-   Error error = pSignalBlocker_->block(core::system::SigInt);
+   Error error = pSignalBlocker_->block(rscore::system::SigInt);
    if (error)
       LOG_ERROR(error);
 }
diff --git a/src/cpp/r/RFunctionHook.cpp b/src/cpp/r/RFunctionHook.cpp
index 02f79cf..28693a8 100644
--- a/src/cpp/r/RFunctionHook.cpp
+++ b/src/cpp/r/RFunctionHook.cpp
@@ -20,7 +20,7 @@
 
 #include <r/RExec.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace function_hook {
diff --git a/src/cpp/r/RJson.cpp b/src/cpp/r/RJson.cpp
index 0d0b684..c1f295f 100644
--- a/src/cpp/r/RJson.cpp
+++ b/src/cpp/r/RJson.cpp
@@ -57,7 +57,7 @@
 #include <r/RSexp.hpp>
 #include <r/RErrorCategory.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace json {
@@ -66,7 +66,7 @@ namespace {
 
 Error jsonValueFromVectorElement(SEXP vectorSEXP, 
                                  int i, 
-                                 core::json::Value* pValue)
+                                 rscore::json::Value* pValue)
 {   
    // NOTE: currently NaN is represented in json as null. this is problematic
    // as parsing routines (such as JS overlay types in GWT) won't handle
@@ -81,14 +81,14 @@ Error jsonValueFromVectorElement(SEXP vectorSEXP,
    // and also make sure they are distinguished for other types
    
    // default to null
-   *pValue = core::json::Value();
+   *pValue = rscore::json::Value();
    
    // check for underlying value
    switch(TYPEOF(vectorSEXP))
    {
       case NILSXP:
       {
-         *pValue = core::json::Value();
+         *pValue = rscore::json::Value();
          break;
       }
       case STRSXP:
@@ -131,7 +131,7 @@ Error jsonValueFromVectorElement(SEXP vectorSEXP,
          double imaginary = COMPLEX(vectorSEXP)[i].i;
          if ( !ISNAN(real) && !ISNAN(imaginary))
          {
-            core::json::Object jsonComplex ;
+            rscore::json::Object jsonComplex ;
             jsonComplex["r"] = real;
             jsonComplex["i"] = imaginary;
             *pValue = jsonComplex;
@@ -153,10 +153,10 @@ Error jsonValueFromVectorElement(SEXP vectorSEXP,
 }  
 
 
-Error jsonValueArrayFromList(SEXP listSEXP, core::json::Value* pValue)
+Error jsonValueArrayFromList(SEXP listSEXP, rscore::json::Value* pValue)
 {
    // value array to return
-   core::json::Array jsonValueArray;
+   rscore::json::Array jsonValueArray;
    
    // return a value for each list item
    int listLength = Rf_length(listSEXP);
@@ -166,7 +166,7 @@ Error jsonValueArrayFromList(SEXP listSEXP, core::json::Value* pValue)
       SEXP valueSEXP = VECTOR_ELT(listSEXP, i);
       
       // extract the value
-      core::json::Value jsonValue ;
+      rscore::json::Value jsonValue ;
       Error error = jsonValueFromObject(valueSEXP, &jsonValue);
       if (error)
          return error;
@@ -197,7 +197,7 @@ bool isNamedList(SEXP listSEXP)
       return false ;
    int nameCount = std::count_if(fieldNames.begin(), 
                                  fieldNames.end(),
-                                 &core::string_utils::stringNotEmpty);
+                                 &rscore::string_utils::stringNotEmpty);
    if (nameCount != listLength)
       return false;   
    
@@ -208,20 +208,20 @@ bool isNamedList(SEXP listSEXP)
 Error jsonObjectFromListElement(SEXP listSEXP, 
                                 const std::vector<std::string>& fieldNames,
                                 int index,
-                                core::json::Value* pValue)
+                                rscore::json::Value* pValue)
 {
    // note list length
    int listLength = Rf_length(listSEXP);
    
    // compose an object by iterating through the fields
-   core::json::Object jsonObject ;
+   rscore::json::Object jsonObject ;
    for (int f=0; f<listLength; f++)
    {
       // get the field
       SEXP fieldSEXP = VECTOR_ELT(listSEXP, f);
       
       // extract the value
-      core::json::Value fieldValue ;
+      rscore::json::Value fieldValue ;
       switch(TYPEOF(fieldSEXP))
       {
          case VECSXP:
@@ -258,7 +258,7 @@ Error jsonObjectFromListElement(SEXP listSEXP,
 // NOTE: this function assumes that isNamedList has been called
 // and returned true for this list (validates a name for each element)
 //   
-Error jsonObjectFromList(SEXP listSEXP, core::json::Value* pValue)  
+Error jsonObjectFromList(SEXP listSEXP, rscore::json::Value* pValue)  
 {
    // get the names of the list elements
    std::vector<std::string> fieldNames ;
@@ -267,13 +267,13 @@ Error jsonObjectFromList(SEXP listSEXP, core::json::Value* pValue)
       return error;
    
    // compose object
-   core::json::Object object ;
+   rscore::json::Object object ;
    int fields = Rf_length(listSEXP);
    for (int i=0; i<fields; i++)
    {
       SEXP fieldSEXP = VECTOR_ELT(listSEXP, i);
       
-      core::json::Value objectValue ;
+      rscore::json::Value objectValue ;
       error = jsonValueFromObject(fieldSEXP, &objectValue);
       if (error)
          return error ;
@@ -290,7 +290,7 @@ Error jsonObjectFromList(SEXP listSEXP, core::json::Value* pValue)
 // NOTE: this function assumes that isNamedList has been called
 // and returned true for this list (validates a name for each element)
 //   
-Error jsonObjectArrayFromDataFrame(SEXP listSEXP, core::json::Value* pValue)
+Error jsonObjectArrayFromDataFrame(SEXP listSEXP, rscore::json::Value* pValue)
 {      
    // get the names of the list elements
    std::vector<std::string> fieldNames ;
@@ -299,13 +299,13 @@ Error jsonObjectArrayFromDataFrame(SEXP listSEXP, core::json::Value* pValue)
       return error;
    
    // object array to return
-   core::json::Array jsonObjectArray ;
+   rscore::json::Array jsonObjectArray ;
    
    // iterate through the values
    int values = Rf_length(VECTOR_ELT(listSEXP, 0));
    for (int v=0; v<values; v++)
    {
-      core::json::Value objectValue ;
+      rscore::json::Value objectValue ;
       error = jsonObjectFromListElement(listSEXP, fieldNames, v, &objectValue);
       if (error)
          return error ;
@@ -320,7 +320,7 @@ Error jsonObjectArrayFromDataFrame(SEXP listSEXP, core::json::Value* pValue)
 
 } // anonymous namespace
 
-Error jsonValueFromScalar(SEXP scalarSEXP, core::json::Value* pValue)
+Error jsonValueFromScalar(SEXP scalarSEXP, rscore::json::Value* pValue)
 {
    // verify length
    if (sexp::length(scalarSEXP) != 1)
@@ -331,7 +331,7 @@ Error jsonValueFromScalar(SEXP scalarSEXP, core::json::Value* pValue)
 }
    
    
-Error jsonValueFromVector(SEXP vectorSEXP, core::json::Value* pValue)
+Error jsonValueFromVector(SEXP vectorSEXP, rscore::json::Value* pValue)
 {
    int vectorLength = Rf_length(vectorSEXP);
 
@@ -342,15 +342,15 @@ Error jsonValueFromVector(SEXP vectorSEXP, core::json::Value* pValue)
       else
       {
          // return null
-         *pValue = core::json::Value();
+         *pValue = rscore::json::Value();
          return Success();
       }
    }
 
-   core::json::Array vectorValues ;
+   rscore::json::Array vectorValues ;
    for (int i=0; i<vectorLength; i++)
    {
-      core::json::Value elementValue ;
+      rscore::json::Value elementValue ;
       Error error = jsonValueFromVectorElement(vectorSEXP, i, &elementValue);
       if (error)
          return error;
@@ -363,7 +363,7 @@ Error jsonValueFromVector(SEXP vectorSEXP, core::json::Value* pValue)
 }   
    
    
-Error jsonValueFromList(SEXP listSEXP, core::json::Value* pValue)
+Error jsonValueFromList(SEXP listSEXP, rscore::json::Value* pValue)
 {
    if (isNamedList(listSEXP))
    {
@@ -379,7 +379,7 @@ Error jsonValueFromList(SEXP listSEXP, core::json::Value* pValue)
 }
    
    
-Error jsonValueFromObject(SEXP objectSEXP, core::json::Value* pValue)
+Error jsonValueFromObject(SEXP objectSEXP, rscore::json::Value* pValue)
 {
    // NOTE: a few additional types/scenarios we could support are:
    //         - special handling for array
@@ -392,7 +392,7 @@ Error jsonValueFromObject(SEXP objectSEXP, core::json::Value* pValue)
    {
       case NILSXP:
       {
-         *pValue = core::json::Value();
+         *pValue = rscore::json::Value();
          return Success();
       }   
       case VECSXP:
diff --git a/src/cpp/r/RJsonRpc.cpp b/src/cpp/r/RJsonRpc.cpp
index 6405e1c..ebf66c9 100644
--- a/src/cpp/r/RJsonRpc.cpp
+++ b/src/cpp/r/RJsonRpc.cpp
@@ -57,17 +57,17 @@
 #include <r/RErrorCategory.hpp>
 #include <r/RJson.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace json {
 
 namespace {
          
-Error setJsonResult(SEXP resultSEXP, core::json::JsonRpcResponse* pResponse)
+Error setJsonResult(SEXP resultSEXP, rscore::json::JsonRpcResponse* pResponse)
 {   
    // get the result
-   core::json::Value resultValue ;
+   rscore::json::Value resultValue ;
    Error error = jsonValueFromObject(resultSEXP, &resultValue);
    if (error)
       return error ;
@@ -78,7 +78,7 @@ Error setJsonResult(SEXP resultSEXP, core::json::JsonRpcResponse* pResponse)
 }
 
 Error callRHandler(const std::string& functionName,
-                   const core::json::JsonRpcRequest& request,
+                   const rscore::json::JsonRpcRequest& request,
                    SEXP* pResult,
                    sexp::Protect* pProtect)
 {
@@ -86,13 +86,13 @@ Error callRHandler(const std::string& functionName,
    r::exec::RFunction rFunction(functionName);
    
    // add params
-   const core::json::Array& params = request.params;
-   for (core::json::Array::size_type i=0; i<params.size(); i++)
+   const rscore::json::Array& params = request.params;
+   for (rscore::json::Array::size_type i=0; i<params.size(); i++)
       rFunction.addParam(params[i]);
    
    // add kwparams
-   const core::json::Object& kwparams = request.kwparams;
-   for (core::json::Object::const_iterator 
+   const rscore::json::Object& kwparams = request.kwparams;
+   for (rscore::json::Object::const_iterator 
         it = kwparams.begin();
         it != kwparams.end();
         ++it)
@@ -105,8 +105,8 @@ Error callRHandler(const std::string& functionName,
 }
 
 Error handleRequest(const std::string& rFunctionName,
-                    const core::json::JsonRpcRequest& request, 
-                    core::json::JsonRpcResponse* pResponse)
+                    const rscore::json::JsonRpcRequest& request, 
+                    rscore::json::JsonRpcResponse* pResponse)
 {
    // call the function
    sexp::Protect rProtect;
@@ -122,7 +122,7 @@ Error handleRequest(const std::string& rFunctionName,
 } // anonymous namespace 
 
    
-Error getRpcMethods(core::json::JsonRpcMethods* pMethods)
+Error getRpcMethods(rscore::json::JsonRpcMethods* pMethods)
 {
    // find all of the rpc handlers
    std::vector<std::string> rpcHandlers;
diff --git a/src/cpp/r/ROptions.cpp b/src/cpp/r/ROptions.cpp
index 23173ea..203720d 100644
--- a/src/cpp/r/ROptions.cpp
+++ b/src/cpp/r/ROptions.cpp
@@ -23,7 +23,7 @@
 
 #include <r/RExec.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace options {
diff --git a/src/cpp/r/RSexp.cpp b/src/cpp/r/RSexp.cpp
index 3ac3f35..da2fc43 100644
--- a/src/cpp/r/RSexp.cpp
+++ b/src/cpp/r/RSexp.cpp
@@ -35,7 +35,7 @@
 #undef TRUE
 #undef FALSE
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
    
@@ -274,7 +274,7 @@ void clearExternalPtr(SEXP extptr)
    R_ClearExternalPtr(extptr);
 }
 
-core::Error getNamedListSEXP(SEXP listSEXP,
+rscore::Error getNamedListSEXP(SEXP listSEXP,
                              const std::string& name,
                              SEXP* pValueSEXP)
 {
@@ -284,12 +284,12 @@ core::Error getNamedListSEXP(SEXP listSEXP,
    {
       // get the appropriate value
       *pValueSEXP = VECTOR_ELT(listSEXP, valueIndex);
-      return core::Success();
+      return rscore::Success();
    }
    else
    {
       // otherwise an error
-      core::Error error(r::errc::ListElementNotFoundError, ERROR_LOCATION);
+      rscore::Error error(r::errc::ListElementNotFoundError, ERROR_LOCATION);
       error.addProperty("element", name);
       return error;
    }
diff --git a/src/cpp/r/RSourceManager.cpp b/src/cpp/r/RSourceManager.cpp
index 53e8fbe..d7b85d2 100644
--- a/src/cpp/r/RSourceManager.cpp
+++ b/src/cpp/r/RSourceManager.cpp
@@ -26,7 +26,7 @@
 
 #include <r/RExec.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
    
@@ -37,7 +37,7 @@ SourceManager& sourceManager()
    return instance ;
 }
    
-Error SourceManager::sourceTools(const core::FilePath& filePath)
+Error SourceManager::sourceTools(const rscore::FilePath& filePath)
 {
    Error error = sourceLocal(filePath);
    if (error)
@@ -85,7 +85,7 @@ void SourceManager::reloadIfNecessary()
 }
 
 
-void SourceManager::reSourceTools(const core::FilePath& filePath)
+void SourceManager::reSourceTools(const rscore::FilePath& filePath)
 {
    Error error = source(filePath, true);
    if (error)
diff --git a/src/cpp/r/RUtil.cpp b/src/cpp/r/RUtil.cpp
index 7737521..f92757a 100644
--- a/src/cpp/r/RUtil.cpp
+++ b/src/cpp/r/RUtil.cpp
@@ -27,7 +27,7 @@
 
 #include <R_ext/Riconv.h>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace util {
@@ -90,7 +90,7 @@ std::string rconsole2utf8(const std::string& encoded)
    return output;
 }
 
-core::Error iconvstr(const std::string& value,
+rscore::Error iconvstr(const std::string& value,
                      const std::string& from,
                      const std::string& to,
                      bool allowSubstitution,
diff --git a/src/cpp/r/include/r/RErrorCategory.hpp b/src/cpp/r/include/r/RErrorCategory.hpp
index bd64499..11e2108 100644
--- a/src/cpp/r/include/r/RErrorCategory.hpp
+++ b/src/cpp/r/include/r/RErrorCategory.hpp
@@ -67,15 +67,15 @@ inline boost::system::error_condition make_error_condition( errc_t e )
 } // namespace errc
 
 
-core::Error rCodeExecutionError(const std::string& errMsg, 
-                                const core::ErrorLocation& location);
+rscore::Error rCodeExecutionError(const std::string& errMsg, 
+                                const rscore::ErrorLocation& location);
    
-bool isCodeExecutionError(const core::Error& error, 
+bool isCodeExecutionError(const rscore::Error& error, 
                           std::string* pErrMsg = NULL);
    
 // use the error message generated by R for code execution errors,
 // otherwise use error.message()
-std::string endUserErrorMessage(const core::Error& error);
+std::string endUserErrorMessage(const rscore::Error& error);
    
 
 } // namespace r
diff --git a/src/cpp/r/include/r/RExec.hpp b/src/cpp/r/include/r/RExec.hpp
index 8bec6c0..3f4c23c 100644
--- a/src/cpp/r/include/r/RExec.hpp
+++ b/src/cpp/r/include/r/RExec.hpp
@@ -31,7 +31,7 @@
 #include <r/RInterface.hpp>
 
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -42,7 +42,7 @@ namespace r {
 namespace exec {
    
 // safe (no r error longjump) execution of abritrary nullary function
-core::Error executeSafely(boost::function<void()> function);
+rscore::Error executeSafely(boost::function<void()> function);
 
 // helper class for variation of executeSafely w/ return value (impl below)
 template <typename T>
@@ -63,7 +63,7 @@ private:
  
 // safe (no r error longjump) execution of abritrary nullary function w/ return
 template <typename T>
-core::Error executeSafely(boost::function<T()> function, T* pReturn)
+rscore::Error executeSafely(boost::function<T()> function, T* pReturn)
 {
    ExecuteTargetWithReturn<T> target(function, pReturn);
    return executeSafely(target);
@@ -71,16 +71,16 @@ core::Error executeSafely(boost::function<T()> function, T* pReturn)
 
    
 // parse and evaluate expressions  
-core::Error executeString(const std::string& str);
-core::Error evaluateString(const std::string& str, 
+rscore::Error executeString(const std::string& str);
+rscore::Error evaluateString(const std::string& str, 
                            SEXP* pSEXP, 
                            sexp::Protect* pProtect);
 template <typename T>
-core::Error evaluateString(const std::string& str, T* pValue)
+rscore::Error evaluateString(const std::string& str, T* pValue)
 {
    sexp::Protect rProtect;
    SEXP valueSEXP ;
-   core::Error error = evaluateString(str, &valueSEXP, &rProtect);
+   rscore::Error error = evaluateString(str, &valueSEXP, &rProtect);
    if (error)
       return error ;
 
@@ -174,27 +174,27 @@ public:
       params_.push_back(Param(name, paramSEXP));
    }
                         
-   core::Error call(SEXP evalNS = R_GlobalEnv, bool safely = true);
-   core::Error callUnsafe();
+   rscore::Error call(SEXP evalNS = R_GlobalEnv, bool safely = true);
+   rscore::Error callUnsafe();
 
-   core::Error call(SEXP* pResultSEXP, sexp::Protect* pProtect);
-   core::Error call(SEXP evalNS, SEXP* pResultSEXP, sexp::Protect* pProtect);
-   core::Error call(SEXP evalNS, bool safely, SEXP* pResultSEXP,
+   rscore::Error call(SEXP* pResultSEXP, sexp::Protect* pProtect);
+   rscore::Error call(SEXP evalNS, SEXP* pResultSEXP, sexp::Protect* pProtect);
+   rscore::Error call(SEXP evalNS, bool safely, SEXP* pResultSEXP,
                     sexp::Protect* pProtect);
 
    template <typename T>
-   core::Error call(T* pValue)
+   rscore::Error call(T* pValue)
    {
       return call(R_GlobalEnv, pValue);
    }
 
    template <typename T>
-   core::Error call(SEXP evalNS, T* pValue)
+   rscore::Error call(SEXP evalNS, T* pValue)
    {
       // call the function
       sexp::Protect rProtect;
       SEXP resultSEXP ;
-      core::Error error = call(evalNS, &resultSEXP, &rProtect);  
+      rscore::Error error = call(evalNS, &resultSEXP, &rProtect);  
       if (error)
          return error ;
       
@@ -253,9 +253,9 @@ private:
 };
    
    
-core::FilePath rBinaryPath();
+rscore::FilePath rBinaryPath();
 
-core::Error system(const std::string& command, std::string* pOutput);
+rscore::Error system(const std::string& command, std::string* pOutput);
    
 // raise error and get last error message
 void error(const std::string& message);
@@ -274,7 +274,7 @@ public:
    virtual ~IgnoreInterruptsScope();
 private:
    bool previousInterruptsSuspended_ ;
-   boost::scoped_ptr<core::system::SignalBlocker> pSignalBlocker_;
+   boost::scoped_ptr<rscore::system::SignalBlocker> pSignalBlocker_;
 };
 
 // returns true if the global context is on the top (i.e. the context stack is
diff --git a/src/cpp/r/include/r/RFunctionHook.hpp b/src/cpp/r/include/r/RFunctionHook.hpp
index 3a439f3..e2a9f55 100644
--- a/src/cpp/r/include/r/RFunctionHook.hpp
+++ b/src/cpp/r/include/r/RFunctionHook.hpp
@@ -18,18 +18,18 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
 namespace r {
 namespace function_hook {
 
-core::Error registerUnsupported(const std::string& name, 
+rscore::Error registerUnsupported(const std::string& name, 
                                 const std::string& package);
 
 
-core::Error registerUnsupportedWithAlternative(const std::string& name,
+rscore::Error registerUnsupportedWithAlternative(const std::string& name,
                                                const std::string& package,
                                                const std::string& alternative);
 
diff --git a/src/cpp/r/include/r/RJson.hpp b/src/cpp/r/include/r/RJson.hpp
index 7987eae..38424bd 100644
--- a/src/cpp/r/include/r/RJson.hpp
+++ b/src/cpp/r/include/r/RJson.hpp
@@ -20,7 +20,7 @@
 
 typedef struct SEXPREC *SEXP;
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -31,10 +31,10 @@ namespace core {
 namespace r {
 namespace json {
    
-core::Error jsonValueFromScalar(SEXP scalarSEXP, core::json::Value* pValue);
-core::Error jsonValueFromVector(SEXP vectorSEXP, core::json::Value* pValue);
-core::Error jsonValueFromList(SEXP listSEXP, core::json::Value* pValue);
-core::Error jsonValueFromObject(SEXP objectSEXP, core::json::Value* pValue);
+rscore::Error jsonValueFromScalar(SEXP scalarSEXP, rscore::json::Value* pValue);
+rscore::Error jsonValueFromVector(SEXP vectorSEXP, rscore::json::Value* pValue);
+rscore::Error jsonValueFromList(SEXP listSEXP, rscore::json::Value* pValue);
+rscore::Error jsonValueFromObject(SEXP objectSEXP, rscore::json::Value* pValue);
    
 } // namespace json
 } // namesapce r
diff --git a/src/cpp/r/include/r/RJsonRpc.hpp b/src/cpp/r/include/r/RJsonRpc.hpp
index 77d52b8..44e5d0b 100644
--- a/src/cpp/r/include/r/RJsonRpc.hpp
+++ b/src/cpp/r/include/r/RJsonRpc.hpp
@@ -22,7 +22,7 @@
 
 typedef struct SEXPREC *SEXP;
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -30,7 +30,7 @@ namespace core {
 namespace r {
 namespace json {
    
-core::Error getRpcMethods(core::json::JsonRpcMethods* pMethods);
+rscore::Error getRpcMethods(rscore::json::JsonRpcMethods* pMethods);
    
 } // namespace json
 } // namesapce r
diff --git a/src/cpp/r/include/r/ROptions.hpp b/src/cpp/r/include/r/ROptions.hpp
index 839b77e..7b33dda 100644
--- a/src/cpp/r/include/r/ROptions.hpp
+++ b/src/cpp/r/include/r/ROptions.hpp
@@ -28,15 +28,15 @@
 // IMPORTANT NOTE: all code in r::options must provide "no jump" guarantee.
 // See comment in RInternal.hpp for more info on this
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
 namespace r {
 namespace options {
    
-core::Error saveOptions(const core::FilePath& filePath);  
-core::Error restoreOptions(const core::FilePath& filePath);
+rscore::Error saveOptions(const rscore::FilePath& filePath);  
+rscore::Error restoreOptions(const rscore::FilePath& filePath);
 
 // console width
 extern const int kDefaultWidth;
@@ -60,7 +60,7 @@ T getOption(const std::string& name,
    if (valueSEXP != R_NilValue)
    {
       T value;
-      core::Error error = sexp::extract(valueSEXP, &value);
+      rscore::Error error = sexp::extract(valueSEXP, &value);
       if (error)
       {
          error.addProperty("symbol (option)", name);
@@ -72,7 +72,7 @@ T getOption(const std::string& name,
    }
    else
    {
-      core::Error error(errc::SymbolNotFoundError, ERROR_LOCATION);
+      rscore::Error error(errc::SymbolNotFoundError, ERROR_LOCATION);
       error.addProperty("symbol (option)", name);
       if (logNotFound)
          LOG_ERROR(error);
@@ -81,11 +81,11 @@ T getOption(const std::string& name,
 }
    
 template <typename T>
-core::Error setOption(const std::string& name, const T& value)
+rscore::Error setOption(const std::string& name, const T& value)
 {
    r::exec::RFunction optionsFunction("options");
    optionsFunction.addParam(name, value);
-   core::Error error = optionsFunction.call();
+   rscore::Error error = optionsFunction.call();
    if (error)
    {
       error.addProperty("option-name", name);
@@ -93,7 +93,7 @@ core::Error setOption(const std::string& name, const T& value)
    }
    else
    {
-      return core::Success();
+      return rscore::Success();
    }
 }
 
diff --git a/src/cpp/r/include/r/RSexp.hpp b/src/cpp/r/include/r/RSexp.hpp
index 26ecfe8..faedf32 100644
--- a/src/cpp/r/include/r/RSexp.hpp
+++ b/src/cpp/r/include/r/RSexp.hpp
@@ -64,7 +64,7 @@ std::string classOf(SEXP objectSEXP);
 int length(SEXP object);
    
 SEXP getNames(SEXP sexp);
-core::Error getNames(SEXP sexp, std::vector<std::string>* pNames);  
+rscore::Error getNames(SEXP sexp, std::vector<std::string>* pNames);  
 bool isActiveBinding(const std::string&, const SEXP);
 
 // type checking
@@ -95,15 +95,15 @@ void* getExternalPtrAddr(SEXP extptr);
 void clearExternalPtr(SEXP extptr);
 
 // extract c++ type from R SEXP
-core::Error extract(SEXP valueSEXP, int* pInt);
-core::Error extract(SEXP valueSEXP, bool* pBool);
-core::Error extract(SEXP valueSEXP, double* pDouble);
-core::Error extract(SEXP valueSEXP, std::vector<int>* pVector);   
-core::Error extract(SEXP valueSEXP, std::string* pString);
-core::Error extract(SEXP valueSEXP, std::vector<std::string>* pVector);
+rscore::Error extract(SEXP valueSEXP, int* pInt);
+rscore::Error extract(SEXP valueSEXP, bool* pBool);
+rscore::Error extract(SEXP valueSEXP, double* pDouble);
+rscore::Error extract(SEXP valueSEXP, std::vector<int>* pVector);   
+rscore::Error extract(SEXP valueSEXP, std::string* pString);
+rscore::Error extract(SEXP valueSEXP, std::vector<std::string>* pVector);
       
 // create SEXP from c++ type
-SEXP create(const core::json::Value& value, Protect* pProtect);
+SEXP create(const rscore::json::Value& value, Protect* pProtect);
 SEXP create(const char* value, Protect* pProtect);
 SEXP create(const std::string& value, Protect* pProtect);
 SEXP create(int value, Protect* pProtect);
@@ -118,15 +118,15 @@ SEXP create(const std::vector<boost::posix_time::ptime>& value,
 
 SEXP create(const std::vector<std::pair<std::string,std::string> >& value, 
             Protect* pProtect);
-SEXP create(const core::json::Array& value, Protect* pProtect);
-SEXP create(const core::json::Object& value, Protect* pProtect);
+SEXP create(const rscore::json::Array& value, Protect* pProtect);
+SEXP create(const rscore::json::Object& value, Protect* pProtect);
 
 
 inline int indexOfElementNamed(SEXP listSEXP, const std::string& name)
 {
    // get the names so we can determine which slot the element is in are in
    std::vector<std::string> names;
-   core::Error error = r::sexp::getNames(listSEXP, &names);
+   rscore::Error error = r::sexp::getNames(listSEXP, &names);
    if (error)
       return -1;
 
@@ -146,16 +146,16 @@ inline int indexOfElementNamed(SEXP listSEXP, const std::string& name)
 
 }
 
-core::Error getNamedListSEXP(SEXP listSEXP, const std::string& name,
+rscore::Error getNamedListSEXP(SEXP listSEXP, const std::string& name,
                              SEXP* pValueSEXP);
 
 template <typename T>
-core::Error getNamedListElement(SEXP listSEXP,
+rscore::Error getNamedListElement(SEXP listSEXP,
                                 const std::string& name,
                                 T* pValue)
 {
    SEXP valueSEXP;
-   core::Error error = getNamedListSEXP(listSEXP, name, &valueSEXP);
+   rscore::Error error = getNamedListSEXP(listSEXP, name, &valueSEXP);
    if (error)
       return error;
    else
@@ -163,18 +163,18 @@ core::Error getNamedListElement(SEXP listSEXP,
 }
 
 template <typename T>
-core::Error getNamedListElement(SEXP listSEXP,
+rscore::Error getNamedListElement(SEXP listSEXP,
                                 const std::string& name,
                                 T* pValue,
                                 const T& defaultValue)
 {
-  core:: Error error = getNamedListElement(listSEXP, name, pValue);
+  rscore:: Error error = getNamedListElement(listSEXP, name, pValue);
   if (error)
   {
      if (error.code() == r::errc::ListElementNotFoundError)
      {
         *pValue = defaultValue;
-        return core::Success();
+        return rscore::Success();
      }
      else
      {
@@ -183,7 +183,7 @@ core::Error getNamedListElement(SEXP listSEXP,
    }
    else
    {
-      return core::Success();
+      return rscore::Success();
    }
 }
 
@@ -217,7 +217,7 @@ private:
 // set list element by name. note that the specified element MUST already
 // exist before the call
 template <typename T>
-core::Error setNamedListElement(SEXP listSEXP,
+rscore::Error setNamedListElement(SEXP listSEXP,
                                 const std::string& name,
                                 const T& value)
 {
@@ -232,12 +232,12 @@ core::Error setNamedListElement(SEXP listSEXP,
    {
       // set the appropriate value and return success
       SET_VECTOR_ELT(listSEXP, valueIndex, valueSEXP);
-      return core::Success();
+      return rscore::Success();
    }
    else
    {
       // otherwise an error
-      core::Error error(r::errc::ListElementNotFoundError, ERROR_LOCATION);
+      rscore::Error error(r::errc::ListElementNotFoundError, ERROR_LOCATION);
       error.addProperty("element", name);
       return error;
    }
diff --git a/src/cpp/r/include/r/RSourceManager.hpp b/src/cpp/r/include/r/RSourceManager.hpp
index 16a94c7..d363786 100644
--- a/src/cpp/r/include/r/RSourceManager.hpp
+++ b/src/cpp/r/include/r/RSourceManager.hpp
@@ -26,7 +26,7 @@
 
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
    class Error ;
 }
 
@@ -48,10 +48,10 @@ public:
    bool autoReload() const { return autoReload_; }
    void setAutoReload(bool autoReload) { autoReload_ = autoReload; }
    
-   core::Error sourceTools(const core::FilePath& filePath);
+   rscore::Error sourceTools(const rscore::FilePath& filePath);
    void ensureToolsLoaded();
 
-   core::Error sourceLocal(const core::FilePath& filePath);
+   rscore::Error sourceLocal(const rscore::FilePath& filePath);
    
    void reloadIfNecessary();
    
@@ -71,15 +71,15 @@ private:
    typedef boost::unordered_map<std::string, SourcedFileInfo> SourcedFileMap;
    
    // helper functions
-   core::Error source(const core::FilePath& filePath, bool local);
-   void reSourceTools(const core::FilePath& filePath);
-   void recordSourcedFile(const core::FilePath& filePath, bool local);
+   rscore::Error source(const rscore::FilePath& filePath, bool local);
+   void reSourceTools(const rscore::FilePath& filePath);
+   void recordSourcedFile(const rscore::FilePath& filePath, bool local);
    void reloadSourceIfNecessary(const SourcedFileMap::value_type& value);
    
    // members
    bool autoReload_ ;
    SourcedFileMap sourcedFiles_ ;
-   std::vector<core::FilePath> toolsFilePaths_;
+   std::vector<rscore::FilePath> toolsFilePaths_;
 };
    
 } // namespace r
diff --git a/src/cpp/r/include/r/RUtil.hpp b/src/cpp/r/include/r/RUtil.hpp
index a804211..3ff0ee6 100644
--- a/src/cpp/r/include/r/RUtil.hpp
+++ b/src/cpp/r/include/r/RUtil.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class FilePath;
    class Error;
 }
@@ -36,7 +36,7 @@ bool hasCapability(const std::string& capability);
 
 std::string rconsole2utf8(const std::string& encoded);
 
-core::Error iconvstr(const std::string& value,
+rscore::Error iconvstr(const std::string& value,
                      const std::string& from,
                      const std::string& to,
                      bool allowSubstitution,
diff --git a/src/cpp/r/include/r/session/RClientState.hpp b/src/cpp/r/include/r/session/RClientState.hpp
index 6ae5687..f97afa2 100644
--- a/src/cpp/r/include/r/session/RClientState.hpp
+++ b/src/cpp/r/include/r/session/RClientState.hpp
@@ -23,7 +23,7 @@
 #include <core/FilePath.hpp>
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
 	class Error;
 } 
 
@@ -52,41 +52,41 @@ public:
    
    void putTemporary(const std::string& scope, 
                      const std::string& name,
-                     const core::json::Value& value);
+                     const rscore::json::Value& value);
    
-   void putTemporary(const core::json::Object& temporaryState);
+   void putTemporary(const rscore::json::Object& temporaryState);
    
    void putPersistent(const std::string& scope, 
                       const std::string& name,
-                      const core::json::Value& value);
+                      const rscore::json::Value& value);
    
-   void putPersistent(const core::json::Object& persistentState); 
+   void putPersistent(const rscore::json::Object& persistentState); 
 
    void putProjectPersistent(const std::string& scope,
                              const std::string& name,
-                             const core::json::Value& value);
+                             const rscore::json::Value& value);
 
-   void putProjectPersistent(const core::json::Object& projectPersistentState);
-   core::json::Value getProjectPersistent(std::string scope,
+   void putProjectPersistent(const rscore::json::Object& projectPersistentState);
+   rscore::json::Value getProjectPersistent(std::string scope,
                                           std::string name);
 
-   core::Error commit(ClientStateCommitType commitType,
-                      const core::FilePath& stateDir,
-                      const core::FilePath& projectStateDir);
+   rscore::Error commit(ClientStateCommitType commitType,
+                      const rscore::FilePath& stateDir,
+                      const rscore::FilePath& projectStateDir);
    
-   core::Error restore(const core::FilePath& stateDir,
-                       const core::FilePath& projectStateDir);
+   rscore::Error restore(const rscore::FilePath& stateDir,
+                       const rscore::FilePath& projectStateDir);
    
-   void currentState(core::json::Object* pCurrentState) const;
+   void currentState(rscore::json::Object* pCurrentState) const;
    
 private:
-   void restoreGlobalState(const core::FilePath& stateFile);
-   void restoreProjectState(const core::FilePath& stateFile);
+   void restoreGlobalState(const rscore::FilePath& stateFile);
+   void restoreProjectState(const rscore::FilePath& stateFile);
 
 private:
-   core::json::Object temporaryState_ ;
-   core::json::Object persistentState_ ;
-   core::json::Object projectPersistentState_;
+   rscore::json::Object temporaryState_ ;
+   rscore::json::Object persistentState_ ;
+   rscore::json::Object projectPersistentState_;
 };
       
 } // namespace session
diff --git a/src/cpp/r/include/r/session/RConsoleActions.hpp b/src/cpp/r/include/r/session/RConsoleActions.hpp
index 3f6aee0..a87a372 100644
--- a/src/cpp/r/include/r/session/RConsoleActions.hpp
+++ b/src/cpp/r/include/r/session/RConsoleActions.hpp
@@ -22,7 +22,7 @@
 #include <core/BoostThread.hpp>
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -59,17 +59,17 @@ public:
    
    // get actions in their wire-representation (two identically sized arrays, 
    // one for type and one for data)
-   void asJson(core::json::Object* pActions) const;
+   void asJson(rscore::json::Object* pActions) const;
    
-   core::Error loadFromFile(const core::FilePath& filePath);
-   core::Error saveToFile(const core::FilePath& filePath) const;
+   rscore::Error loadFromFile(const rscore::FilePath& filePath);
+   rscore::Error saveToFile(const rscore::FilePath& filePath) const;
 
 private:
    // protect data using a mutex because background threads (e.g.
    // console output capture threads) can interact with console actions
    mutable boost::mutex mutex_;
-   boost::circular_buffer<core::json::Value> actionsType_;
-   boost::circular_buffer<core::json::Value> actionsData_;
+   boost::circular_buffer<rscore::json::Value> actionsType_;
+   boost::circular_buffer<rscore::json::Value> actionsData_;
    std::vector<std::string> pendingInput_;
 };
 
diff --git a/src/cpp/r/include/r/session/RConsoleHistory.hpp b/src/cpp/r/include/r/session/RConsoleHistory.hpp
index 89ffce3..cd5ee74 100644
--- a/src/cpp/r/include/r/session/RConsoleHistory.hpp
+++ b/src/cpp/r/include/r/session/RConsoleHistory.hpp
@@ -24,7 +24,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error ;
    class FilePath;
 }
@@ -78,10 +78,10 @@ public:
                int endIndex,   // exclusive,
                std::vector<std::string>* pEntries) const;
 
-   void asJson(core::json::Array* pHistoryArray) const;
+   void asJson(rscore::json::Array* pHistoryArray) const;
    
-   core::Error loadFromFile(const core::FilePath& filePath, bool verifyFile);
-   core::Error saveToFile(const core::FilePath& filePath) const;
+   rscore::Error loadFromFile(const rscore::FilePath& filePath, bool verifyFile);
+   rscore::Error saveToFile(const rscore::FilePath& filePath) const;
    
    boost::signals::connection connectOnAdd(
                                  const AddSignal::slot_function_type& slot)
diff --git a/src/cpp/r/include/r/session/RDiscovery.hpp b/src/cpp/r/include/r/session/RDiscovery.hpp
index 4d460a2..2a94c54 100644
--- a/src/cpp/r/include/r/session/RDiscovery.hpp
+++ b/src/cpp/r/include/r/session/RDiscovery.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -31,7 +31,7 @@ struct RLocations
    std::string docPath;
 };
 
-core::Error discoverR(RLocations* pLocations);
+rscore::Error discoverR(RLocations* pLocations);
 
 } // namespace session
 } // namespace r
diff --git a/src/cpp/r/include/r/session/RGraphics.hpp b/src/cpp/r/include/r/session/RGraphics.hpp
index 8ce0e8f..1670e9a 100644
--- a/src/cpp/r/include/r/session/RGraphics.hpp
+++ b/src/cpp/r/include/r/session/RGraphics.hpp
@@ -59,7 +59,7 @@ struct is_error_code_enum<r::session::graphics::errc::errc_t>
 #include <core/Error.hpp>
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -70,7 +70,7 @@ namespace graphics {
 struct DisplayState
 {
    DisplayState(const std::string& imageFilename, 
-                const core::json::Value& manipulatorJson,
+                const rscore::json::Value& manipulatorJson,
                 int width,
                 int height,
                 int activePlotIndex,
@@ -85,7 +85,7 @@ struct DisplayState
    }
    
    std::string imageFilename;
-   core::json::Value manipulatorJson;
+   rscore::json::Value manipulatorJson;
    int width;
    int height;
    int activePlotIndex;
@@ -107,24 +107,24 @@ public:
    
    // plot list
    virtual int plotCount() const = 0 ;
-   virtual core::Error plotImageFilename(int index, 
+   virtual rscore::Error plotImageFilename(int index, 
                                          std::string* pImageFilename) const = 0;
    virtual int activePlotIndex() const = 0;
-   virtual core::Error setActivePlot(int index) = 0;
-   virtual core::Error removePlot(int index) = 0;
+   virtual rscore::Error setActivePlot(int index) = 0;
+   virtual rscore::Error removePlot(int index) = 0;
 
    // actions on active plot   
-   virtual core::Error savePlotAsImage(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsImage(const rscore::FilePath& filePath,
                                        const std::string& format,
                                        int widthPx,
                                        int heightPx) = 0;
 
-   virtual core::Error savePlotAsPdf(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsPdf(const rscore::FilePath& filePath,
                                      double widthInches,
                                      double heightInches,
                                      bool useCairoPdf) = 0;
 
-   virtual core::Error savePlotAsMetafile(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsMetafile(const rscore::FilePath& filePath,
                                           int widthPx,
                                           int heightPx) = 0;
       
@@ -138,7 +138,7 @@ public:
    virtual void refresh() = 0;
 
    // retrieve image path based on filename
-   virtual core::FilePath imagePath(const std::string& imageFilename) const = 0;
+   virtual rscore::FilePath imagePath(const std::string& imageFilename) const = 0;
    
    // clear the display (closes the device)
    virtual void clear() = 0;
@@ -147,7 +147,7 @@ public:
    virtual boost::signal<void ()>& onShowManipulator() = 0;
 
    // set manipulator values
-   virtual void setPlotManipulatorValues(const core::json::Object& values) = 0;
+   virtual void setPlotManipulatorValues(const rscore::json::Object& values) = 0;
    virtual void manipulatorPlotClicked(int x, int y) = 0;
 
    // notify that we are about to execute code
diff --git a/src/cpp/r/include/r/session/RSession.hpp b/src/cpp/r/include/r/session/RSession.hpp
index 83fe49d..03cb323 100644
--- a/src/cpp/r/include/r/session/RSession.hpp
+++ b/src/cpp/r/include/r/session/RSession.hpp
@@ -27,7 +27,7 @@
 
 #define EX_CONTINUE 100
 
-namespace core {
+namespace rscore {
 	class Error ;
    class Settings;
 } 
@@ -58,17 +58,17 @@ struct ROptions
          rProfileOnResume(false)
    {
    }
-   core::FilePath userHomePath;
-   core::FilePath userScratchPath;
-   core::FilePath scopedScratchPath;
-   core::FilePath logPath;
-   core::FilePath startupEnvironmentFilePath;
+   rscore::FilePath userHomePath;
+   rscore::FilePath userScratchPath;
+   rscore::FilePath scopedScratchPath;
+   rscore::FilePath logPath;
+   rscore::FilePath startupEnvironmentFilePath;
    std::string sessionPort;
-   boost::function<core::Settings&()> persistentState;
-   boost::function<core::FilePath()> rEnvironmentDir;
-   boost::function<core::FilePath()> rHistoryDir;
+   boost::function<rscore::Settings&()> persistentState;
+   boost::function<rscore::FilePath()> rEnvironmentDir;
+   boost::function<rscore::FilePath()> rHistoryDir;
    boost::function<bool()> alwaysSaveHistory;
-   core::FilePath rSourcePath;
+   rscore::FilePath rSourcePath;
    std::string rLibsUser;
    std::string rCRANRepos;
    bool useInternet2;
@@ -116,16 +116,16 @@ extern const int kSerializationActionCompleted;
 struct RSuspendOptions;
 struct RCallbacks
 {
-   boost::function<core::Error(const RInitInfo&)> init ;
+   boost::function<rscore::Error(const RInitInfo&)> init ;
    boost::function<bool(const std::string&,bool,RConsoleInput*)> consoleRead;
    boost::function<void(const std::string&)> browseURL;
-   boost::function<void(const core::FilePath&)> browseFile;
+   boost::function<void(const rscore::FilePath&)> browseFile;
    boost::function<void(const std::string&)> showHelp;
-   boost::function<void(const std::string&, core::FilePath&, bool)> showFile;
+   boost::function<void(const std::string&, rscore::FilePath&, bool)> showFile;
    boost::function<void(const std::string&, int)> consoleWrite;
    boost::function<void()> consoleHistoryReset;
    boost::function<bool(double*,double*)> locator;
-   boost::function<core::FilePath(bool)> chooseFile;
+   boost::function<rscore::FilePath(bool)> chooseFile;
    boost::function<int(const std::string&)> editFile;
    boost::function<void(const std::string&)> showMessage ;
    boost::function<void(bool)> busy;
@@ -136,11 +136,11 @@ struct RCallbacks
    boost::function<void()> quit;
    boost::function<void(const std::string&)> suicide;
    boost::function<void(bool)> cleanup;
-   boost::function<void(int,const core::FilePath&)> serialization;
+   boost::function<void(int,const rscore::FilePath&)> serialization;
 };
 
 // run the session   
-core::Error run(const ROptions& options, const RCallbacks& callbacks);
+rscore::Error run(const ROptions& options, const RCallbacks& callbacks);
    
 // deferred deserialization of the session
 void ensureDeserialized();
diff --git a/src/cpp/r/include/r/session/RSessionUtils.hpp b/src/cpp/r/include/r/session/RSessionUtils.hpp
index 646e769..8bebc7c 100644
--- a/src/cpp/r/include/r/session/RSessionUtils.hpp
+++ b/src/cpp/r/include/r/session/RSessionUtils.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -35,14 +35,14 @@ bool isPackratModeOn();
 bool isDefaultPrompt(const std::string& prompt);
 
 // user home path
-const core::FilePath& userHomePath();  
+const rscore::FilePath& userHomePath();  
 
-core::FilePath safeCurrentPath();
+rscore::FilePath safeCurrentPath();
    
-core::FilePath tempFile(const std::string& prefix, 
+rscore::FilePath tempFile(const std::string& prefix, 
                         const std::string& extension);
 
-core::FilePath tempDir();
+rscore::FilePath tempDir();
 
      
 // suppress output in scope
diff --git a/src/cpp/r/session/RClientMetrics.cpp b/src/cpp/r/session/RClientMetrics.cpp
index 020bbb1..ea7d33b 100644
--- a/src/cpp/r/session/RClientMetrics.cpp
+++ b/src/cpp/r/session/RClientMetrics.cpp
@@ -24,7 +24,7 @@
 
 #include "graphics/RGraphicsDevice.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
diff --git a/src/cpp/r/session/RClientMetrics.hpp b/src/cpp/r/session/RClientMetrics.hpp
index c929fe5..fac1b99 100644
--- a/src/cpp/r/session/RClientMetrics.hpp
+++ b/src/cpp/r/session/RClientMetrics.hpp
@@ -16,7 +16,7 @@
 #ifndef R_SESSION_CLIENT_METRICS_HPP
 #define R_SESSION_CLIENT_METRICS_HPP
 
-namespace core {
+namespace rscore {
    class Settings;
 }
 
@@ -29,8 +29,8 @@ namespace client_metrics {
 
 RClientMetrics get();
 void set(const RClientMetrics& metrics);
-void save(core::Settings* pSettings);
-void restore(const core::Settings& settings);
+void save(rscore::Settings* pSettings);
+void restore(const rscore::Settings& settings);
    
 } // namespace client_metrics
 } // namespace session
diff --git a/src/cpp/r/session/RClientState.cpp b/src/cpp/r/session/RClientState.cpp
index 5ae04bd..c1fd848 100644
--- a/src/cpp/r/session/RClientState.cpp
+++ b/src/cpp/r/session/RClientState.cpp
@@ -25,7 +25,7 @@
 #include <core/FilePath.hpp>
 #include <core/FileSerializer.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
@@ -83,7 +83,7 @@ void mergeState(const json::Object& sourceState,
 
 void commitState(const json::Object& stateContainer,
                  const std::string& fileExt,
-                 const core::FilePath& stateDir)
+                 const rscore::FilePath& stateDir)
 {
    for (json::Object::const_iterator
         it = stateContainer.begin(); it != stateContainer.end(); ++it)
@@ -100,7 +100,7 @@ void commitState(const json::Object& stateContainer,
    }
 }
    
-void restoreState(const core::FilePath& stateFilePath,
+void restoreState(const rscore::FilePath& stateFilePath,
                   json::Object* pStateContainer)
 {
    // read the contents of the file
@@ -248,7 +248,7 @@ json::Value ClientState::getProjectPersistent(std::string scope,
    }
    else
    {
-      if (!json::isType<core::json::Object>(i->second))
+      if (!json::isType<rscore::json::Object>(i->second))
          return json::Value();
       json::Object& scopeObject = (i->second).get_obj();
       return scopeObject[name];
@@ -263,8 +263,8 @@ void ClientState::putProjectPersistent(
 
 
 Error ClientState::commit(ClientStateCommitType commitType, 
-                          const core::FilePath& stateDir,
-                          const core::FilePath& projectStateDir)
+                          const rscore::FilePath& stateDir,
+                          const rscore::FilePath& projectStateDir)
 {
    // remove and re-create the stateDirs
    Error error = removeAndRecreateStateDir(stateDir);
diff --git a/src/cpp/r/session/RConsoleActions.cpp b/src/cpp/r/session/RConsoleActions.cpp
index efc6406..977d239 100644
--- a/src/cpp/r/session/RConsoleActions.cpp
+++ b/src/cpp/r/session/RConsoleActions.cpp
@@ -27,7 +27,7 @@
 
 #include <r/ROptions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
@@ -214,7 +214,7 @@ Error ConsoleActions::loadFromFile(const FilePath& filePath)
    return Success();
 }
    
-Error ConsoleActions::saveToFile(const core::FilePath& filePath) const
+Error ConsoleActions::saveToFile(const rscore::FilePath& filePath) const
 {
    // write actions
    json::Object actionsObject;
diff --git a/src/cpp/r/session/RConsoleHistory.cpp b/src/cpp/r/session/RConsoleHistory.cpp
index 1e06b6e..b1a29be 100644
--- a/src/cpp/r/session/RConsoleHistory.cpp
+++ b/src/cpp/r/session/RConsoleHistory.cpp
@@ -26,7 +26,7 @@
 #include <core/system/Environment.hpp>
 #include <core/SafeConvert.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {   
@@ -50,7 +50,7 @@ void ConsoleHistory::setCapacity(int capacity)
 
 void ConsoleHistory::setCapacityFromRHistsize()
 {
-   std::string histSize = core::system::getenv("R_HISTSIZE");
+   std::string histSize = rscore::system::getenv("R_HISTSIZE");
    if (!histSize.empty())
    {
       setCapacity(
@@ -154,10 +154,10 @@ Error ConsoleHistory::loadFromFile(const FilePath& filePath,
    // tolerate file not found -- the user may not have any prior history
    if (filePath.exists())
    {
-      return core::readCollectionFromFile<boost::circular_buffer<std::string> >(
+      return rscore::readCollectionFromFile<boost::circular_buffer<std::string> >(
                                                       filePath,
                                                       &historyBuffer_,
-                                                      core::parseString);
+                                                      rscore::parseString);
    }
    else if (verifyFile)
    {
@@ -172,10 +172,10 @@ Error ConsoleHistory::loadFromFile(const FilePath& filePath,
    
 Error ConsoleHistory::saveToFile(const FilePath& filePath) const
 {
-   return core::writeCollectionToFile<boost::circular_buffer<std::string> >(
+   return rscore::writeCollectionToFile<boost::circular_buffer<std::string> >(
                                                       filePath,
                                                       historyBuffer_,
-                                                      core::stringifyString);
+                                                      rscore::stringifyString);
 }
 
 void ConsoleHistory::safeRemove(int index)
diff --git a/src/cpp/r/session/RDiscovery.cpp b/src/cpp/r/session/RDiscovery.cpp
index 2f66f1d..385571a 100644
--- a/src/cpp/r/session/RDiscovery.cpp
+++ b/src/cpp/r/session/RDiscovery.cpp
@@ -27,7 +27,7 @@
 #endif
 #include <Rembedded.h>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
@@ -56,16 +56,16 @@ Error discoverR(RLocations* pLocations)
 Error discoverR(RLocations* pLocations)
 {
    // rhome
-   std::string rHome = core::system::getenv("R_HOME");
+   std::string rHome = rscore::system::getenv("R_HOME");
    if (rHome.empty() || !FilePath(rHome).exists())
-      return core::pathNotFoundError(rHome, ERROR_LOCATION);
+      return rscore::pathNotFoundError(rHome, ERROR_LOCATION);
    else
       pLocations->homePath = rHome;
 
    // rdocdir
-   std::string rDocDir = core::system::getenv("R_DOC_DIR");
+   std::string rDocDir = rscore::system::getenv("R_DOC_DIR");
    if (rDocDir.empty() || !FilePath(rDocDir).exists())
-      return core::pathNotFoundError(rDocDir, ERROR_LOCATION);
+      return rscore::pathNotFoundError(rDocDir, ERROR_LOCATION);
    else
       pLocations->docPath = rDocDir;
 
diff --git a/src/cpp/r/session/REmbedded.hpp b/src/cpp/r/session/REmbedded.hpp
index 21c629d..7998cf5 100644
--- a/src/cpp/r/session/REmbedded.hpp
+++ b/src/cpp/r/session/REmbedded.hpp
@@ -29,7 +29,7 @@ typedef char CONSOLE_BUFFER_CHAR;
 typedef unsigned char CONSOLE_BUFFER_CHAR;
 #endif
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -61,15 +61,15 @@ struct InternalCallbacks
    void (*cleanUp)(SA_TYPE, int, int);
 };
 
-void runEmbeddedR(const core::FilePath& rHome,
-                  const core::FilePath& userHome,
+void runEmbeddedR(const rscore::FilePath& rHome,
+                  const rscore::FilePath& userHome,
                   bool quiet,
                   bool loadInitFile,
                   SA_TYPE defaultSaveAction,
                   const Callbacks& callbacks,
                   InternalCallbacks* pInternal);
 
-core::Error completeEmbeddedRInitialization(bool useInternet2);
+rscore::Error completeEmbeddedRInitialization(bool useInternet2);
 
 } // namespace session
 } // namespace r
diff --git a/src/cpp/r/session/REmbeddedPosix.cpp b/src/cpp/r/session/REmbeddedPosix.cpp
index 4afd5dc..76690ea 100644
--- a/src/cpp/r/session/REmbeddedPosix.cpp
+++ b/src/cpp/r/session/REmbeddedPosix.cpp
@@ -40,13 +40,13 @@ extern "C"  typedef void (*ptr_QuartzCocoa_SetupEventLoop)(int, unsigned long);
 
 extern int R_running_as_main_program;  // from unix/system.c
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
 
-void runEmbeddedR(const core::FilePath& /*rHome*/,    // ignored on posix
-                  const core::FilePath& /*userHome*/, // ignored on posix
+void runEmbeddedR(const rscore::FilePath& /*rHome*/,    // ignored on posix
+                  const rscore::FilePath& /*userHome*/, // ignored on posix
                   bool quiet,
                   bool loadInitFile,
                   SA_TYPE defaultSaveAction,
@@ -185,7 +185,7 @@ void logDLError(const std::string& message, const ErrorLocation& location)
    char* dlError = ::dlerror();
    if (dlError)
       errmsg += ": " + std::string(dlError);
-   core::log::logErrorMessage(errmsg, location);
+   rscore::log::logErrorMessage(errmsg, location);
 }
 
 // Note that when we passed QCF_SET_FRONT to QuartzCocoa_SetupEventLoop
diff --git a/src/cpp/r/session/REmbeddedWin32.cpp b/src/cpp/r/session/REmbeddedWin32.cpp
index 28ce63b..d3f0f2a 100644
--- a/src/cpp/r/session/REmbeddedWin32.cpp
+++ b/src/cpp/r/session/REmbeddedWin32.cpp
@@ -44,7 +44,7 @@ extern "C" void R_ProcessEvents(void);
 extern "C" void R_CleanUp(SA_TYPE, int, int);
 extern "C" UImode CharacterMode;
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
@@ -127,8 +127,8 @@ void setMemoryLimit()
 
 }
 
-void runEmbeddedR(const core::FilePath& rHome,
-                  const core::FilePath& userHome,
+void runEmbeddedR(const rscore::FilePath& rHome,
+                  const rscore::FilePath& userHome,
                   bool quiet,
                   bool loadInitFile,
                   SA_TYPE defaultSaveAction,
diff --git a/src/cpp/r/session/RRestartContext.cpp b/src/cpp/r/session/RRestartContext.cpp
index 7150b8b..4289afd 100644
--- a/src/cpp/r/session/RRestartContext.cpp
+++ b/src/cpp/r/session/RRestartContext.cpp
@@ -25,7 +25,7 @@
 
 #include "RSessionState.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
diff --git a/src/cpp/r/session/RRestartContext.hpp b/src/cpp/r/session/RRestartContext.hpp
index e50430e..cdf55d1 100644
--- a/src/cpp/r/session/RRestartContext.hpp
+++ b/src/cpp/r/session/RRestartContext.hpp
@@ -35,23 +35,23 @@ private:
 
 public:
 
-   void initialize(const core::FilePath& scopePath,
+   void initialize(const rscore::FilePath& scopePath,
                    const std::string& contextId);
 
    bool hasSessionState() const;
 
    bool rProfileOnRestore() const;
 
-   core::FilePath sessionStatePath() const;
+   rscore::FilePath sessionStatePath() const;
 
    void removeSessionState();
 
-   static core::FilePath createSessionStatePath(
-                                            const core::FilePath& scopePath,
+   static rscore::FilePath createSessionStatePath(
+                                            const rscore::FilePath& scopePath,
                                             const std::string& contextId);
 
 private:
-   core::FilePath sessionStatePath_;
+   rscore::FilePath sessionStatePath_;
 };
 
 
diff --git a/src/cpp/r/session/RSearchPath.cpp b/src/cpp/r/session/RSearchPath.cpp
index 490c1a4..8d5de7c 100644
--- a/src/cpp/r/session/RSearchPath.cpp
+++ b/src/cpp/r/session/RSearchPath.cpp
@@ -42,7 +42,7 @@
 #include <r/RExec.hpp>
 #include <r/RInterface.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
    
@@ -72,7 +72,7 @@ void reportRestoreError(const std::string& context,
    // add context to error and log it
    Error restoreError = error ;
    restoreError.addProperty("context", message);
-   core::log::logError(restoreError, location);
+   rscore::log::logError(restoreError, location);
    
    // notify end-user
    std::string report = message + ": " + error.code().message() + "\n";
@@ -86,7 +86,7 @@ Error saveGlobalEnvironmentToFile(const FilePath& environmentFile)
    return executeSafely(boost::bind(R_SaveGlobalEnvToFile, envPath.c_str()));
 }
    
-Error restoreGlobalEnvironment(const core::FilePath& environmentFile)
+Error restoreGlobalEnvironment(const rscore::FilePath& environmentFile)
 {
    // tolerate no environment saved
    if (!environmentFile.exists())
@@ -282,7 +282,7 @@ Error save(const FilePath& statePath)
 
          if (!path.empty())
          {
-            path = core::string_utils::systemToUtf8(path);
+            path = rscore::string_utils::systemToUtf8(path);
             packagePaths[name] = path;
          }
       }
diff --git a/src/cpp/r/session/RSearchPath.hpp b/src/cpp/r/session/RSearchPath.hpp
index cc4fc43..254e017 100644
--- a/src/cpp/r/session/RSearchPath.hpp
+++ b/src/cpp/r/session/RSearchPath.hpp
@@ -16,7 +16,7 @@
 #ifndef R_SESSION_SEARCH_PATH_HPP
 #define R_SESSION_SEARCH_PATH_HPP
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -25,9 +25,9 @@ namespace r {
 namespace session {
 namespace search_path {
 
-core::Error save(const core::FilePath& statePath);
-core::Error saveGlobalEnvironment(const core::FilePath& statePath);
-core::Error restore(const core::FilePath& statePath);
+rscore::Error save(const rscore::FilePath& statePath);
+rscore::Error saveGlobalEnvironment(const rscore::FilePath& statePath);
+rscore::Error restore(const rscore::FilePath& statePath);
    
 } // namespace search_path
 } // namespace session
diff --git a/src/cpp/r/session/RSession.cpp b/src/cpp/r/session/RSession.cpp
index 4630c2d..fc30f0f 100644
--- a/src/cpp/r/session/RSession.cpp
+++ b/src/cpp/r/session/RSession.cpp
@@ -70,7 +70,7 @@ extern "C" SA_TYPE SaveAction;
 // constants for graphics scratch subdirectory
 #define kGraphicsPath "graphics"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
@@ -110,7 +110,7 @@ bool s_suppressOuput = false;
 
 FilePath rHistoryFilePath()
 {
-   std::string histFile = core::system::getenv("R_HISTFILE");
+   std::string histFile = rscore::system::getenv("R_HISTFILE");
    boost::algorithm::trim(histFile);
    if (histFile.empty())
       histFile = ".Rhistory";
@@ -403,7 +403,7 @@ Error initialize()
    else
    {
       graphicsPath = r::session::utils::tempDir().complete(
-                              "rs-graphics-" + core::system::generateUuid());
+                              "rs-graphics-" + rscore::system::generateUuid());
    }
 
    error = graphics::device::initialize(graphicsPath,
@@ -517,7 +517,7 @@ void rSuicide(const std::string& msg)
    {
       FilePath abendLogPath = s_options.logPath.complete(
                                                  "rsession_abort_msg.log");
-      Error error = core::writeStringToFile(abendLogPath, msg);
+      Error error = rscore::writeStringToFile(abendLogPath, msg);
       if (error)
          LOG_ERROR(error);
    }
@@ -531,7 +531,7 @@ void rSuicide(const Error& error)
    // provide error message if the error was unexpected
    std::string msg;
    if (!error.expected())
-      msg = core::log::errorAsLogEntry(error);
+      msg = rscore::log::errorAsLogEntry(error);
 
    rSuicide(msg);
 }
@@ -951,13 +951,13 @@ SEXP rs_browseURL(SEXP urlSEXP)
 
          // transform into FilePath
          std::string path = URL.substr(filePrefix.length());
-         path = core::http::util::urlDecode(path);
+         path = rscore::http::util::urlDecode(path);
          FilePath filePath(r::util::fixPath(path));
 
          // sometimes R passes short paths (like for files within the
          // R home directory). Convert these to long paths
 #ifdef _WIN32
-         core::system::ensureLongPath(&filePath);
+         rscore::system::ensureLongPath(&filePath);
 #endif
 
          // fire browseFile
@@ -984,7 +984,7 @@ SEXP rs_browseURL(SEXP urlSEXP)
 SEXP rs_createUUID()
 {
    r::sexp::Protect rProtect;
-   return r::sexp::create(core::system::generateUuid(false), &rProtect);
+   return r::sexp::create(rscore::system::generateUuid(false), &rProtect);
 }
    
 SEXP rs_loadHistory(SEXP sFile)
@@ -1306,14 +1306,14 @@ Error run(const ROptions& options, const RCallbacks& callbacks)
       return error;
 
    // R_HOME
-   core::system::setenv("R_HOME", rLocations.homePath);
+   rscore::system::setenv("R_HOME", rLocations.homePath);
    
    // R_DOC_DIR (required by help-links.sh)
-   core::system::setenv("R_DOC_DIR", rLocations.docPath);
+   rscore::system::setenv("R_DOC_DIR", rLocations.docPath);
 
    // R_LIBS_USER
    if (!s_options.rLibsUser.empty())
-      core::system::setenv("R_LIBS_USER", s_options.rLibsUser);
+      rscore::system::setenv("R_LIBS_USER", s_options.rLibsUser);
    
    // set compatible graphics engine version
    int engineVersion = s_options.rCompatibleGraphicsEngineVersion;
@@ -1627,7 +1627,7 @@ bool isR3()
 
 bool isPackratModeOn()
 {
-   return !core::system::getenv("R_PACKRAT_MODE").empty();
+   return !rscore::system::getenv("R_PACKRAT_MODE").empty();
 }
 
 bool isDefaultPrompt(const std::string& prompt)
diff --git a/src/cpp/r/session/RSessionState.cpp b/src/cpp/r/session/RSessionState.cpp
index c33ad2d..01982cf 100644
--- a/src/cpp/r/session/RSessionState.cpp
+++ b/src/cpp/r/session/RSessionState.cpp
@@ -39,7 +39,7 @@
 #include "RSearchPath.hpp"
 #include "graphics/RGraphicsPlotManager.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
    
@@ -90,16 +90,16 @@ Error saveEnvironmentVars(const FilePath& envFile)
    Error error = envFile.removeIfExists();
    if (error)
       return error;
-   core::Settings envSettings;
+   rscore::Settings envSettings;
    error = envSettings.initialize(envFile);
    if (error)
       return error;
 
    // get environment and write it to the file
-   core::system::Options env;
-   core::system::environment(&env);
+   rscore::system::Options env;
+   rscore::system::environment(&env);
    envSettings.beginUpdate();
-   BOOST_FOREACH(const core::system::Option& var, env)
+   BOOST_FOREACH(const rscore::system::Option& var, env)
    {
       envSettings.set(var.first, var.second);
    }
@@ -110,7 +110,7 @@ Error saveEnvironmentVars(const FilePath& envFile)
 
 void setEnvVar(const std::string& name, const std::string& value)
 {
-   core::system::setenv(name, value);
+   rscore::system::setenv(name, value);
 }
 
 Error restoreEnvironmentVars(const FilePath& envFile)
@@ -119,7 +119,7 @@ Error restoreEnvironmentVars(const FilePath& envFile)
       return Success();
 
    // read settings file
-   core::Settings envSettings;
+   rscore::Settings envSettings;
    Error error = envSettings.initialize(envFile);
    if (error)
       return error;
@@ -163,7 +163,7 @@ void reportError(const std::string& action,
    // add context to error and log it
    Error serializationError = error ;
    serializationError.addProperty("context", message);
-   core::log::logError(serializationError, location);
+   rscore::log::logError(serializationError, location);
    
    // notify end-user
    std::string report = message + ": " + error.code().message() + "\n";
@@ -370,7 +370,7 @@ bool save(const FilePath& statePath,
 }
 
 
-bool saveMinimal(const core::FilePath& statePath,
+bool saveMinimal(const rscore::FilePath& statePath,
                  bool saveGlobalEnvironment)
 {
    // initialize context
@@ -414,7 +414,7 @@ bool saveMinimal(const core::FilePath& statePath,
 
 namespace {
 
-bool getBoolSetting(const core::FilePath& statePath,
+bool getBoolSetting(const rscore::FilePath& statePath,
                     const std::string& name,
                     bool defaultValue)
 {
@@ -431,12 +431,12 @@ bool getBoolSetting(const core::FilePath& statePath,
 
 } // anonymous namespace
 
-bool rProfileOnRestore(const core::FilePath& statePath)
+bool rProfileOnRestore(const rscore::FilePath& statePath)
 {
    return getBoolSetting(statePath, kRProfileOnRestore, true);
 }
 
-bool packratModeEnabled(const core::FilePath& statePath)
+bool packratModeEnabled(const rscore::FilePath& statePath)
 {
    return getBoolSetting(statePath, kPackratModeOn, false);
 }
diff --git a/src/cpp/r/session/RSessionState.hpp b/src/cpp/r/session/RSessionState.hpp
index 25e86a2..5549dac 100644
--- a/src/cpp/r/session/RSessionState.hpp
+++ b/src/cpp/r/session/RSessionState.hpp
@@ -22,7 +22,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -30,25 +30,25 @@ namespace r {
 namespace session {
 namespace state {
         
-bool save(const core::FilePath& statePath,
+bool save(const rscore::FilePath& statePath,
           bool serverMode,
           bool excludePackages,
           bool disableSaveCompression);
 
-bool saveMinimal(const core::FilePath& statePath,
+bool saveMinimal(const rscore::FilePath& statePath,
                  bool saveGlobalEnvironment);
    
 
-bool rProfileOnRestore(const core::FilePath& statePath);
+bool rProfileOnRestore(const rscore::FilePath& statePath);
 
-bool packratModeEnabled(const core::FilePath& statePath);
+bool packratModeEnabled(const rscore::FilePath& statePath);
 
-bool restore(const core::FilePath& statePath, 
+bool restore(const rscore::FilePath& statePath, 
              bool serverMode,
-             boost::function<core::Error()>* pDeferredRestoreAction,
+             boost::function<rscore::Error()>* pDeferredRestoreAction,
              std::string* pErrorMessages); 
    
-bool destroy(const core::FilePath& statePath);
+bool destroy(const rscore::FilePath& statePath);
      
 } // namespace state
 } // namespace session
diff --git a/src/cpp/r/session/graphics/RGraphicsDevice.cpp b/src/cpp/r/session/graphics/RGraphicsDevice.cpp
index d5a9d46..2174c49 100644
--- a/src/cpp/r/session/graphics/RGraphicsDevice.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsDevice.cpp
@@ -49,7 +49,7 @@
 #endif
 
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
@@ -600,8 +600,8 @@ void deviceToNDC(double* x, double* y)
    *y = grconvertY(*y, "device", "ndc");
 }
 
-Error saveSnapshot(const core::FilePath& snapshotFile,
-                   const core::FilePath& imageFile)
+Error saveSnapshot(const rscore::FilePath& snapshotFile,
+                   const rscore::FilePath& imageFile)
 {
    // ensure we are active
    Error error = makeActive();
@@ -619,7 +619,7 @@ Error saveSnapshot(const core::FilePath& snapshotFile,
    return handler::writeToPNG(imageFile, pDC);
 }
 
-Error restoreSnapshot(const core::FilePath& snapshotFile)
+Error restoreSnapshot(const rscore::FilePath& snapshotFile)
 {
    // ensure we are active
    Error error = makeActive();
diff --git a/src/cpp/r/session/graphics/RGraphicsDevice.hpp b/src/cpp/r/session/graphics/RGraphicsDevice.hpp
index 358eb23..6b2bc0c 100644
--- a/src/cpp/r/session/graphics/RGraphicsDevice.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsDevice.hpp
@@ -18,7 +18,7 @@
 
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -32,8 +32,8 @@ extern const int kDefaultWidth;
 extern const int kDefaultHeight;    
    
 // initialize
-core::Error initialize(
-          const core::FilePath& graphicsPath,
+rscore::Error initialize(
+          const rscore::FilePath& graphicsPath,
           const boost::function<bool(double*,double*)>& locatorFunction);
    
 // device size
diff --git a/src/cpp/r/session/graphics/RGraphicsErrorCategory.cpp b/src/cpp/r/session/graphics/RGraphicsErrorCategory.cpp
index 2b9b060..6102e74 100644
--- a/src/cpp/r/session/graphics/RGraphicsErrorCategory.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsErrorCategory.cpp
@@ -15,7 +15,7 @@
 
 #include <r/session/RGraphics.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
diff --git a/src/cpp/r/session/graphics/RGraphicsHandler.cpp b/src/cpp/r/session/graphics/RGraphicsHandler.cpp
index 9de8ee5..f0dac97 100644
--- a/src/cpp/r/session/graphics/RGraphicsHandler.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsHandler.cpp
@@ -31,7 +31,7 @@ void (*setDeviceAttributes)(pDevDesc pDev);
 void (*onBeforeAddDevice)(DeviceContext* pDC);
 void (*onAfterAddDevice)(DeviceContext* pDC);
 
-core::Error (*writeToPNG)(const core::FilePath& targetPath,
+rscore::Error (*writeToPNG)(const rscore::FilePath& targetPath,
                                  DeviceContext* pDC);
 
 void (*circle)(double x,
diff --git a/src/cpp/r/session/graphics/RGraphicsHandler.hpp b/src/cpp/r/session/graphics/RGraphicsHandler.hpp
index ecd76d5..2f1772c 100644
--- a/src/cpp/r/session/graphics/RGraphicsHandler.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsHandler.hpp
@@ -21,7 +21,7 @@
 
 #include "RGraphicsDevDesc.hpp"
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -47,7 +47,7 @@ struct DeviceContext
    void* pDeviceSpecific;
 
    // file info
-   core::FilePath targetPath;
+   rscore::FilePath targetPath;
    int width;
    int height;
 
@@ -67,7 +67,7 @@ extern void (*setDeviceAttributes)(pDevDesc pDev);
 extern void (*onBeforeAddDevice)(DeviceContext* pDC);
 extern void (*onAfterAddDevice)(DeviceContext* pDC);
 
-extern core::Error (*writeToPNG)(const core::FilePath& targetPath,
+extern rscore::Error (*writeToPNG)(const rscore::FilePath& targetPath,
                                  DeviceContext* pDC);
 
 extern void (*circle)(double x,
diff --git a/src/cpp/r/session/graphics/RGraphicsPlot.cpp b/src/cpp/r/session/graphics/RGraphicsPlot.cpp
index 64df3da..c8b9d7d 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlot.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlot.cpp
@@ -28,7 +28,7 @@
 #include <r/RExec.hpp>
 #include <r/session/RGraphics.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
@@ -129,7 +129,7 @@ Error Plot::renderFromDisplay()
    }
     
    // generate a new storage uuid
-   std::string storageUuid = core::system::generateUuid();
+   std::string storageUuid = rscore::system::generateUuid();
    
    // generate snapshot and image files
    Error error = graphicsDevice_.saveSnapshot(snapshotFilePath(storageUuid),
@@ -163,7 +163,7 @@ Error Plot::renderFromDisplaySnapshot(SEXP snapshot)
       return Success();
 
    // generate a new storage uuid
-   std::string storageUuid = core::system::generateUuid();
+   std::string storageUuid = rscore::system::generateUuid();
  
    // generate snapshot file
    FilePath snapshotFile = snapshotFilePath(storageUuid);
diff --git a/src/cpp/r/session/graphics/RGraphicsPlot.hpp b/src/cpp/r/session/graphics/RGraphicsPlot.hpp
index 81132c3..eec2a12 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlot.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlot.hpp
@@ -29,7 +29,7 @@
 #include "RGraphicsTypes.hpp"
 #include "RGraphicsPlotManipulator.hpp"
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -43,11 +43,11 @@ class Plot : boost::noncopyable
 {
 public:
    Plot(const GraphicsDeviceFunctions& graphicsDevice,
-        const core::FilePath& baseDirPath,
+        const rscore::FilePath& baseDirPath,
         SEXP manipulatorSEXP);
    
    Plot(const GraphicsDeviceFunctions& graphicsDevice,
-        const core::FilePath& baseDirPath, 
+        const rscore::FilePath& baseDirPath, 
         const std::string& storageUuid,
         const DisplaySize& renderedSize);
    
@@ -57,36 +57,36 @@ public:
 
    bool hasManipulator() const;
    SEXP manipulatorSEXP() const;
-   void manipulatorAsJson(core::json::Value* pValue) const;
+   void manipulatorAsJson(rscore::json::Value* pValue) const;
    void saveManipulator() const;
    
    void invalidate();
    
-   core::Error renderFromDisplay();
-   core::Error renderFromDisplaySnapshot(SEXP snapshot);
+   rscore::Error renderFromDisplay();
+   rscore::Error renderFromDisplaySnapshot(SEXP snapshot);
    std::string imageFilename() const;
    
-   core::Error renderToDisplay();
+   rscore::Error renderToDisplay();
    
-   core::Error removeFiles();
+   rscore::Error removeFiles();
 
    void purgeInMemoryResources();
    
 private:
    bool hasStorage() const;
 
-   core::FilePath snapshotFilePath() const ;
-   core::FilePath snapshotFilePath(const std::string& storageUuid) const;
-   core::FilePath imageFilePath(const std::string& storageUuid) const;
+   rscore::FilePath snapshotFilePath() const ;
+   rscore::FilePath snapshotFilePath(const std::string& storageUuid) const;
+   rscore::FilePath imageFilePath(const std::string& storageUuid) const;
 
    bool hasManipulatorFile() const;
-   core::FilePath manipulatorFilePath(const std::string& storageUuid) const;
+   rscore::FilePath manipulatorFilePath(const std::string& storageUuid) const;
    void loadManipulatorIfNecessary() const;
    void saveManipulator(const std::string& storageUuid) const;
 
 private:
    GraphicsDeviceFunctions graphicsDevice_;
-   core::FilePath baseDirPath_;
+   rscore::FilePath baseDirPath_;
    std::string storageUuid_ ;
    DisplaySize renderedSize_ ;
    bool needsUpdate_;
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp b/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
index e365cec..eb1e053 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManager.cpp
@@ -37,7 +37,7 @@
 #include "RGraphicsDevice.hpp"
 #include "RGraphicsPlotManipulatorManager.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {  
@@ -374,7 +374,7 @@ Error PlotManager::savePlotAsPostscript(const FilePath& targetPath,
 }
 
 
-Error PlotManager::savePlotAsMetafile(const core::FilePath& filePath,
+Error PlotManager::savePlotAsMetafile(const rscore::FilePath& filePath,
                                       int widthPx,
                                       int heightPx)
 { 
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp b/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
index 925cb41..c05ce5d 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManager.hpp
@@ -61,30 +61,30 @@ private:
 public:
    virtual ~PlotManager() {}
    
-   core::Error initialize(const core::FilePath& graphicsPath,
+   rscore::Error initialize(const rscore::FilePath& graphicsPath,
                           const GraphicsDeviceFunctions& graphicsDevice,
                           GraphicsDeviceEvents* pEvents);
    
    // plot list
    virtual int plotCount() const;
-   virtual core::Error plotImageFilename(int index, 
+   virtual rscore::Error plotImageFilename(int index, 
                                          std::string* pImageFilename) const;
    virtual int activePlotIndex() const;
-   virtual core::Error setActivePlot(int index) ;
-   virtual core::Error removePlot(int index);
+   virtual rscore::Error setActivePlot(int index) ;
+   virtual rscore::Error removePlot(int index);
    
    // actions on active plot
-   virtual core::Error savePlotAsImage(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsImage(const rscore::FilePath& filePath,
                                        const std::string& format,
                                        int widthPx,
                                        int heightPx);
 
-   virtual core::Error savePlotAsPdf(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsPdf(const rscore::FilePath& filePath,
                                      double widthInches,
                                      double heightInches,
                                      bool useCairoPdf);
 
-   virtual core::Error savePlotAsMetafile(const core::FilePath& filePath,
+   virtual rscore::Error savePlotAsMetafile(const rscore::FilePath& filePath,
                                           int widthPx,
                                           int heightPx);
 
@@ -98,23 +98,23 @@ public:
    virtual void refresh() ;
    
     // retrieve image path based on filename
-   virtual core::FilePath imagePath(const std::string& imageFilename) const;
+   virtual rscore::FilePath imagePath(const std::string& imageFilename) const;
    
    virtual void clear();
 
    virtual boost::signal<void ()>& onShowManipulator() ;
-   virtual void setPlotManipulatorValues(const core::json::Object& values);
+   virtual void setPlotManipulatorValues(const rscore::json::Object& values);
    virtual void manipulatorPlotClicked(int x, int y);
 
    virtual void onBeforeExecute();
 
    // manipulate persistent state
-   core::Error savePlotsState();
-   core::Error restorePlotsState();
+   rscore::Error savePlotsState();
+   rscore::Error restorePlotsState();
 
    // fully serialize and deserialize to an external directory
-   core::Error serialize(const core::FilePath& saveToPath);
-   core::Error deserialize(const core::FilePath& restoreFromPath);
+   rscore::Error serialize(const rscore::FilePath& saveToPath);
+   rscore::Error deserialize(const rscore::FilePath& restoreFromPath);
       
 private:
    
@@ -145,26 +145,26 @@ private:
    void renderActivePlotToDisplay();
    
    // render active plot file file
-   core::Error savePlotAsFile(const boost::function<core::Error()>&
+   rscore::Error savePlotAsFile(const boost::function<rscore::Error()>&
                                                          deviceCreationFunction);
-   core::Error savePlotAsFile(const std::string& fileDeviceCreationCode);
+   rscore::Error savePlotAsFile(const std::string& fileDeviceCreationCode);
 
-   core::Error savePlotAsBitmapFile(const core::FilePath& targetPath,
+   rscore::Error savePlotAsBitmapFile(const rscore::FilePath& targetPath,
                                     const std::string& bitmapFileType,
                                     int width,
                                     int height);
 
-   core::Error savePlotAsSvg(const core::FilePath& targetPath,
+   rscore::Error savePlotAsSvg(const rscore::FilePath& targetPath,
                              int width,
                              int height);
 
-   core::Error savePlotAsPostscript(const core::FilePath& targetPath,
+   rscore::Error savePlotAsPostscript(const rscore::FilePath& targetPath,
                                     int width,
                                     int height);
 
    
    // error helpers
-   core::Error plotIndexError(int index, const core::ErrorLocation& location)
+   rscore::Error plotIndexError(int index, const rscore::ErrorLocation& location)
                                                                          const;
 
    std::string emptyImageFilename() const ;
@@ -173,8 +173,8 @@ private:
    friend class SuppressDeviceEventsScope;
 
    // storage paths
-   core::FilePath plotsStateFile_;
-   core::FilePath graphicsPath_;
+   rscore::FilePath plotsStateFile_;
+   rscore::FilePath graphicsPath_;
   
    // interface to graphics device
    GraphicsDeviceFunctions graphicsDevice_ ;
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulator.cpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulator.cpp
index c8bdbcc..ce1dc7e 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulator.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulator.cpp
@@ -21,7 +21,7 @@
 #include <r/RExec.hpp>
 #include <r/RJson.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
@@ -78,12 +78,12 @@ Error PlotManipulator::load(const FilePath& filePath)
    return Success();
 }
 
-void PlotManipulator::asJson(core::json::Value* pValue) const
+void PlotManipulator::asJson(rscore::json::Value* pValue) const
 {
    if (!empty())
    {
       // build manipulator json
-      core::json::Object manipulator;
+      rscore::json::Object manipulator;
 
       // meta-info
       manipulator["id"] = getAsJson(".id");
@@ -91,7 +91,7 @@ void PlotManipulator::asJson(core::json::Value* pValue) const
       manipulator["variables"] = getAsJson(".variables");
 
       // variable values
-      core::json::Value valuesJson;
+      rscore::json::Value valuesJson;
       SEXP valuesSEXP = getUserVisibleValuesList();
       Error error = r::json::jsonValueFromObject(valuesSEXP, &valuesJson);
       if (error)
@@ -103,7 +103,7 @@ void PlotManipulator::asJson(core::json::Value* pValue) const
    }
    else
    {
-      *pValue = core::json::Value();
+      *pValue = rscore::json::Value();
    }
 }
 
@@ -138,16 +138,16 @@ SEXP PlotManipulator::get(const std::string& name) const
    }
 }
 
-core::json::Value PlotManipulator::getAsJson(const std::string& name) const
+rscore::json::Value PlotManipulator::getAsJson(const std::string& name) const
 {
-   core::json::Value value;
+   rscore::json::Value value;
    Error error = r::json::jsonValueFromObject(get(name), &value);
    if (error)
       LOG_ERROR(error);
    return value;
 }
 
-core::json::Object PlotManipulator::getControlAsJson(SEXP controlSEXP) const
+rscore::json::Object PlotManipulator::getControlAsJson(SEXP controlSEXP) const
 {
    // field names
    std::vector<std::string> names ;
@@ -155,11 +155,11 @@ core::json::Object PlotManipulator::getControlAsJson(SEXP controlSEXP) const
    if (error)
    {
       LOG_ERROR(error);
-      return core::json::Object();
+      return rscore::json::Object();
    }
 
    // json object to return
-   core::json::Object control;
+   rscore::json::Object control;
 
    int length = r::sexp::length(controlSEXP);
    for (int i=0; i<length; i++)
@@ -173,12 +173,12 @@ core::json::Object PlotManipulator::getControlAsJson(SEXP controlSEXP) const
 
       // get json for field
       SEXP fieldSEXP = VECTOR_ELT(controlSEXP, i);
-      core::json::Value fieldValue;
+      rscore::json::Value fieldValue;
       Error error = r::json::jsonValueFromObject(fieldSEXP, &fieldValue);
       if (error)
       {
          LOG_ERROR(error);
-         return core::json::Object();
+         return rscore::json::Object();
       }
 
       // set the field
@@ -189,7 +189,7 @@ core::json::Object PlotManipulator::getControlAsJson(SEXP controlSEXP) const
    return control;
 }
 
-core::json::Object PlotManipulator::getControlsAsJson() const
+rscore::json::Object PlotManipulator::getControlsAsJson() const
 {
    // extract controls
    r::sexp::Protect rProtect;
@@ -208,11 +208,11 @@ core::json::Object PlotManipulator::getControlsAsJson() const
          if (error)
          {
             LOG_ERROR(error);
-            return core::json::Object();
+            return rscore::json::Object();
          }
 
          // json object to return
-         core::json::Object controls;
+         rscore::json::Object controls;
 
          int length = r::sexp::length(controlsSEXP);
          for (int i=0; i<length; i++)
@@ -228,12 +228,12 @@ core::json::Object PlotManipulator::getControlsAsJson() const
       }
       else
       {
-         return core::json::Object();
+         return rscore::json::Object();
       }
    }
    else
    {
-      return core::json::Object();
+      return rscore::json::Object();
    }
 }
 
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulator.hpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulator.hpp
index 9bce1f7..1dfe94d 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulator.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulator.hpp
@@ -22,7 +22,7 @@
 
 #include <r/RSexp.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -42,18 +42,18 @@ public:
 
    void clear();
 
-   core::Error save(const core::FilePath& filePath) const;
-   core::Error load(const core::FilePath& filePath);
+   rscore::Error save(const rscore::FilePath& filePath) const;
+   rscore::Error load(const rscore::FilePath& filePath);
 
-   void asJson(core::json::Value* pValue) const;
+   void asJson(rscore::json::Value* pValue) const;
 
    SEXP sexp() const;
 
 private:
    SEXP get(const std::string& name) const;
-   core::json::Value getAsJson(const std::string& name) const;
-   core::json::Object getControlAsJson(SEXP controlSEXP) const;
-   core::json::Object getControlsAsJson() const;
+   rscore::json::Value getAsJson(const std::string& name) const;
+   rscore::json::Object getControlAsJson(SEXP controlSEXP) const;
+   rscore::json::Object getControlsAsJson() const;
    SEXP getUserVisibleValuesList() const;
 
 private:
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
index 7c6afb4..f22eb2a 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.cpp
@@ -31,7 +31,7 @@
 #include "RGraphicsUtils.hpp"
 #include "RGraphicsPlotManager.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {  
diff --git a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
index 224fd58..61cf62e 100644
--- a/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsPlotManipulatorManager.hpp
@@ -25,7 +25,7 @@
 
 #include "RGraphicsTypes.hpp"
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -48,10 +48,10 @@ public:
    virtual ~PlotManipulatorManager() {}
 
 public:
-   core::Error initialize(const UnitConversionFunctions& convert);
+   rscore::Error initialize(const UnitConversionFunctions& convert);
 
    boost::signal<void ()>& onShowManipulator() ;
-   void setPlotManipulatorValues(const core::json::Object& values);
+   void setPlotManipulatorValues(const rscore::json::Object& values);
    void manipulatorPlotClicked(int x, int y);
    
    void executeAndAttachManipulator(SEXP manipulatorSEXP);
diff --git a/src/cpp/r/session/graphics/RGraphicsTypes.hpp b/src/cpp/r/session/graphics/RGraphicsTypes.hpp
index 862ca18..0052796 100644
--- a/src/cpp/r/session/graphics/RGraphicsTypes.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsTypes.hpp
@@ -22,7 +22,7 @@
 
 typedef struct SEXPREC *SEXP;
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -63,9 +63,9 @@ struct GraphicsDeviceFunctions
    boost::function<bool()> isActive;
    boost::function<DisplaySize()> displaySize;
    UnitConversionFunctions convert;
-   boost::function<core::Error(const core::FilePath&,
-                               const core::FilePath&)> saveSnapshot;
-   boost::function<core::Error(const core::FilePath&)> restoreSnapshot;
+   boost::function<rscore::Error(const rscore::FilePath&,
+                               const rscore::FilePath&)> saveSnapshot;
+   boost::function<rscore::Error(const rscore::FilePath&)> restoreSnapshot;
    boost::function<void()> copyToActiveDevice;
    boost::function<std::string()> imageFileExtension;
    boost::function<void()> close;
diff --git a/src/cpp/r/session/graphics/RGraphicsUtils.cpp b/src/cpp/r/session/graphics/RGraphicsUtils.cpp
index a03424d..a923dfe 100644
--- a/src/cpp/r/session/graphics/RGraphicsUtils.cpp
+++ b/src/cpp/r/session/graphics/RGraphicsUtils.cpp
@@ -31,7 +31,7 @@
 
 #include <r/RErrorCategory.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace r {
 namespace session {
@@ -201,7 +201,7 @@ RestorePreviousGraphicsDeviceScope::~RestorePreviousGraphicsDeviceScope()
    }
 }
 
-void reportError(const core::Error& error)
+void reportError(const rscore::Error& error)
 {
    std::string endUserMessage = r::endUserErrorMessage(error);
    std::string errmsg = ("Graphics error: " + endUserMessage + "\n");
@@ -211,7 +211,7 @@ void reportError(const core::Error& error)
 void logAndReportError(const Error& error, const ErrorLocation& location)
 {
    // log
-   core::log::logError(error, location);
+   rscore::log::logError(error, location);
 
    // report to user
    reportError(error);
diff --git a/src/cpp/r/session/graphics/RGraphicsUtils.hpp b/src/cpp/r/session/graphics/RGraphicsUtils.hpp
index 8346dac..ff985b8 100644
--- a/src/cpp/r/session/graphics/RGraphicsUtils.hpp
+++ b/src/cpp/r/session/graphics/RGraphicsUtils.hpp
@@ -18,7 +18,7 @@
 
 #include <boost/shared_ptr.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class ErrorLocation;
    class FilePath;
@@ -44,10 +44,10 @@ private:
    boost::shared_ptr<Impl> pImpl_;
 };
 
-void reportError(const core::Error& error);
+void reportError(const rscore::Error& error);
 
-void logAndReportError(const core::Error& error,
-                       const core::ErrorLocation& location);
+void logAndReportError(const rscore::Error& error,
+                       const rscore::ErrorLocation& location);
 
 } // namespace graphics
 } // namespace session
diff --git a/src/cpp/r/session/graphics/RShadowPngGraphicsHandler.cpp b/src/cpp/r/session/graphics/RShadowPngGraphicsHandler.cpp
index 528b368..c3a7d0f 100644
--- a/src/cpp/r/session/graphics/RShadowPngGraphicsHandler.cpp
+++ b/src/cpp/r/session/graphics/RShadowPngGraphicsHandler.cpp
@@ -32,7 +32,7 @@
 
 #include <Rembedded.h>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace r {
 namespace session {
@@ -157,7 +157,7 @@ pDevDesc shadowDevDesc(pDevDesc dev)
 FilePath tempFile(const std::string& extension)
 {
    FilePath tempFileDir(string_utils::systemToUtf8(R_TempDir));
-   FilePath tempFilePath = tempFileDir.complete(core::system::generateUuid(false) +
+   FilePath tempFilePath = tempFileDir.complete(rscore::system::generateUuid(false) +
                                                 "." + extension);
    return tempFilePath;
 }
diff --git a/src/cpp/server/Main.cpp b/src/cpp/server/Main.cpp
index 29cd41e..35bfbee 100644
--- a/src/cpp/server/Main.cpp
+++ b/src/cpp/server/Main.cpp
@@ -19,7 +19,7 @@
 
 int main(int argc, char * const argv[]) 
 {
-   core::system::initializeLog("rserver", 2); 
+   rscore::system::initializeLog("rserver", 2); 
  
    LOG_WARNING_MESSAGE("hello cmake!");
    
diff --git a/src/cpp/server/ServerAddins.cpp.in b/src/cpp/server/ServerAddins.cpp.in
index 9f96a96..e508877 100644
--- a/src/cpp/server/ServerAddins.cpp.in
+++ b/src/cpp/server/ServerAddins.cpp.in
@@ -16,7 +16,7 @@
 #include <core/Error.hpp>
 #include <core/Exec.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace addins {
diff --git a/src/cpp/server/ServerAddins.hpp b/src/cpp/server/ServerAddins.hpp
index 83ac40c..d8a546e 100644
--- a/src/cpp/server/ServerAddins.hpp
+++ b/src/cpp/server/ServerAddins.hpp
@@ -16,14 +16,14 @@
 #ifndef SERVER_ADDINS_HPP
 #define SERVER_ADDINS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
 namespace server {
 namespace addins {
    
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace addins
 } // namespace server
diff --git a/src/cpp/server/ServerAppArmor.cpp b/src/cpp/server/ServerAppArmor.cpp
index c153dca..0e499cd 100644
--- a/src/cpp/server/ServerAppArmor.cpp
+++ b/src/cpp/server/ServerAppArmor.cpp
@@ -24,7 +24,7 @@
 #include <dlfcn.h>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace app_armor {
diff --git a/src/cpp/server/ServerAppArmor.hpp b/src/cpp/server/ServerAppArmor.hpp
index 1bd06f1..ccaed66 100644
--- a/src/cpp/server/ServerAppArmor.hpp
+++ b/src/cpp/server/ServerAppArmor.hpp
@@ -18,14 +18,14 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
 namespace server {
 namespace app_armor {
    
-core::Error enforceRestricted();
+rscore::Error enforceRestricted();
 
 } // namespace app_armor
 } // namespace server
diff --git a/src/cpp/server/ServerBrowser.cpp b/src/cpp/server/ServerBrowser.cpp
index 8bb020a..5e13d86 100644
--- a/src/cpp/server/ServerBrowser.cpp
+++ b/src/cpp/server/ServerBrowser.cpp
@@ -23,7 +23,7 @@
 
 #include <server/ServerOptions.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace browser {
diff --git a/src/cpp/server/ServerBrowser.hpp b/src/cpp/server/ServerBrowser.hpp
index d26c2db..3fbddbb 100644
--- a/src/cpp/server/ServerBrowser.hpp
+++ b/src/cpp/server/ServerBrowser.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    namespace http {
       class Request;
       class Response;
@@ -30,11 +30,11 @@ namespace browser {
   
 extern const char * const kBrowserUnsupported;
 
-bool supportedBrowserFilter(const core::http::Request& request,
-                            core::http::Response* pResponse);
+bool supportedBrowserFilter(const rscore::http::Request& request,
+                            rscore::http::Response* pResponse);
 
-void handleBrowserUnsupportedRequest(const core::http::Request& request,
-                                     core::http::Response* pResponse);
+void handleBrowserUnsupportedRequest(const rscore::http::Request& request,
+                                     rscore::http::Response* pResponse);
 
 } // namespace browser
 } // namespace server
diff --git a/src/cpp/server/ServerErrorCategory.cpp b/src/cpp/server/ServerErrorCategory.cpp
index 88c39f6..66aceff 100644
--- a/src/cpp/server/ServerErrorCategory.cpp
+++ b/src/cpp/server/ServerErrorCategory.cpp
@@ -57,7 +57,7 @@ std::string ServerErrorCategory::message( int ev ) const
 }
 
 
-bool isAuthenticationError(const core::Error& error)
+bool isAuthenticationError(const rscore::Error& error)
 {
    if (error.code() == server::errc::AuthenticationError)
       return true;
@@ -65,7 +65,7 @@ bool isAuthenticationError(const core::Error& error)
       return false;
 }
 
-bool isSessionUnavailableError(const core::Error& error)
+bool isSessionUnavailableError(const rscore::Error& error)
 {
    if (error.code() == server::errc::SessionUnavailableError)
       return true;
diff --git a/src/cpp/server/ServerEval.cpp b/src/cpp/server/ServerEval.cpp
index bdffc6d..4838a49 100644
--- a/src/cpp/server/ServerEval.cpp
+++ b/src/cpp/server/ServerEval.cpp
@@ -27,13 +27,13 @@
 
 #include <server/ServerOptions.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace eval {
   
-bool expirationFilter(const core::http::Request& request,
-                      core::http::Response* pResponse)
+bool expirationFilter(const rscore::http::Request& request,
+                      rscore::http::Response* pResponse)
 {
    // read the expiration date
    std::string expires;
diff --git a/src/cpp/server/ServerEval.hpp b/src/cpp/server/ServerEval.hpp
index e7d0d74..c3b1cf7 100644
--- a/src/cpp/server/ServerEval.hpp
+++ b/src/cpp/server/ServerEval.hpp
@@ -16,7 +16,7 @@
 #ifndef SERVER_EVAL_HPP
 #define SERVER_EVAL_HPP
 
-namespace core {
+namespace rscore {
    namespace http {
       class Request;
       class Response;
@@ -26,8 +26,8 @@ namespace core {
 namespace server {
 namespace eval {
    
-bool expirationFilter(const core::http::Request& request,
-                      core::http::Response* pResponse);
+bool expirationFilter(const rscore::http::Request& request,
+                      rscore::http::Response* pResponse);
 
 } // namespace eval
 } // namespace server
diff --git a/src/cpp/server/ServerInit.cpp b/src/cpp/server/ServerInit.cpp
index de4e8a9..4920bdf 100644
--- a/src/cpp/server/ServerInit.cpp
+++ b/src/cpp/server/ServerInit.cpp
@@ -21,7 +21,7 @@
 
 #include <server/ServerOptions.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 
diff --git a/src/cpp/server/ServerInit.hpp b/src/cpp/server/ServerInit.hpp
index 095e375..238b441 100644
--- a/src/cpp/server/ServerInit.hpp
+++ b/src/cpp/server/ServerInit.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    namespace http {
       class AsyncServer;
@@ -27,8 +27,8 @@ namespace core {
 
 namespace server {
 
-core::http::AsyncServer* httpServerCreate();
-core::Error httpServerInit(core::http::AsyncServer* pAsyncServer);
+rscore::http::AsyncServer* httpServerCreate();
+rscore::Error httpServerInit(rscore::http::AsyncServer* pAsyncServer);
 
 
 } // namespace server
diff --git a/src/cpp/server/ServerMain.cpp b/src/cpp/server/ServerMain.cpp
index dc7a572..6b78858 100644
--- a/src/cpp/server/ServerMain.cpp
+++ b/src/cpp/server/ServerMain.cpp
@@ -61,7 +61,7 @@
 #include "ServerPAMAuth.hpp"
 #include "ServerREnvironment.hpp"
 
-using namespace core ;
+using namespace rscore ;
 using namespace server;
 
 // forward-declare overlay methods
@@ -77,8 +77,8 @@ void shutdown();
 
 namespace {
    
-bool mainPageFilter(const core::http::Request& request,
-                    core::http::Response* pResponse)
+bool mainPageFilter(const rscore::http::Request& request,
+                    rscore::http::Response* pResponse)
 {
    return server::eval::expirationFilter(request, pResponse) &&
           server::browser::supportedBrowserFilter(request, pResponse) &&
@@ -193,7 +193,7 @@ void httpServerAddHandlers()
    FilePath progressPagePath = wwwPath.complete("progress.htm");
    uri_handlers::addBlocking("/progress",
                                secureHttpHandler(boost::bind(
-                               core::text::handleSecureTemplateRequest,
+                               rscore::text::handleSecureTemplateRequest,
                                _1, progressPagePath, _2, _3)));
 
    // establish browser unsupported handler
@@ -270,7 +270,7 @@ Error waitForSignals()
          overlay::shutdown();
 
          // clear the signal mask
-         Error error = core::system::clearSignalMask();
+         Error error = rscore::system::clearSignalMask();
          if (error)
             LOG_ERROR(error);
 
@@ -346,11 +346,11 @@ int main(int argc, char * const argv[])
    {
       // initialize log
       const char * const kProgramIdentity = "rserver";
-      initializeSystemLog(kProgramIdentity, core::system::kLogLevelWarning);
+      initializeSystemLog(kProgramIdentity, rscore::system::kLogLevelWarning);
 
       // ignore SIGPIPE (don't log error because we should never call
       // syslog prior to daemonizing)
-      core::system::ignoreSignal(core::system::SigPipe);
+      rscore::system::ignoreSignal(rscore::system::SigPipe);
 
       // read program options 
       std::ostringstream osWarnings;
@@ -368,16 +368,16 @@ int main(int argc, char * const argv[])
       // daemonize if requested
       if (options.serverDaemonize())
       {
-         Error error = core::system::daemonize();
+         Error error = rscore::system::daemonize();
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
 
-         error = core::system::ignoreTerminalSignals();
+         error = rscore::system::ignoreTerminalSignals();
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
 
          // set file creation mask to 022 (might have inherted 0 from init)
-         setUMask(core::system::OthersNoWriteMask);
+         setUMask(rscore::system::OthersNoWriteMask);
       }
 
       // wait until now to output options warnings (we need to wait for our
@@ -397,41 +397,41 @@ int main(int argc, char * const argv[])
 
       // increase the number of open files allowed (need more files
       // so we can supports lots of concurrent connectins)
-      if (core::system::realUserIsRoot())
+      if (rscore::system::realUserIsRoot())
       {
-         Error error = setResourceLimit(core::system::FilesLimit, 4096);
+         Error error = setResourceLimit(rscore::system::FilesLimit, 4096);
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
       }
 
       // set working directory
       Error error = FilePath(options.serverWorkingDir()).makeCurrentPath();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // initialize crypto utils
-      core::system::crypto::initialize();
+      rscore::system::crypto::initialize();
 
       // initialize secure cookie module
       error = auth::secure_cookie::initialize();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // initialize the session proxy
       error = session_proxy::initialize();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // initialize http server
       error = httpServerInit();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // initialize the process supervisor (needs to happen post http server
       // init for access to the scheduled command list)
       error = process_supervisor::initialize();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // initialize monitor (needs to happen post http server init for access
       // to the server's io service)
@@ -440,13 +440,13 @@ int main(int argc, char * const argv[])
                                        s_pHttpServer->ioService());
 
       // add a monitor log writer
-      core::system::addLogWriter(
+      rscore::system::addLogWriter(
                 monitor::client().createLogWriter(kProgramIdentity));
 
       // call overlay initialize
       error = overlay::initialize();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // add handlers and initiliaze addins (offline has distinct behavior)
       if (server::options().serverOffline())
@@ -461,14 +461,14 @@ int main(int argc, char * const argv[])
          // initialize addins
          error = addins::initialize();
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
 
          // initialize pam auth if we don't already have an auth handler
          if (!auth::handler::isRegistered())
          {
             error = pam_auth::initialize();
             if (error)
-               return core::system::exitFailure(error, ERROR_LOCATION);
+               return rscore::system::exitFailure(error, ERROR_LOCATION);
          }
       }
 
@@ -491,9 +491,9 @@ int main(int argc, char * const argv[])
       if (!runAsUser.empty())
       {
          // drop root priv
-         Error error = core::system::temporarilyDropPriv(runAsUser);
+         Error error = rscore::system::temporarilyDropPriv(runAsUser);
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
       }
 
       // run special verify installation mode if requested
@@ -501,7 +501,7 @@ int main(int argc, char * const argv[])
       {
          Error error = session_proxy::runVerifyInstallationSession();
          if (error)
-            return core::system::exitFailure(error, ERROR_LOCATION);
+            return rscore::system::exitFailure(error, ERROR_LOCATION);
 
          return EXIT_SUCCESS;
       }
@@ -509,17 +509,17 @@ int main(int argc, char * const argv[])
       // call overlay startup
       error = overlay::startup();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // run http server
       error = s_pHttpServer->run(options.wwwThreadPoolSize());
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // wait for signals
       error = waitForSignals();
       if (error)
-         return core::system::exitFailure(error, ERROR_LOCATION);
+         return rscore::system::exitFailure(error, ERROR_LOCATION);
 
       // NOTE: we never get here because waitForSignals waits forever
       return EXIT_SUCCESS;
diff --git a/src/cpp/server/ServerMainOverlay.cpp b/src/cpp/server/ServerMainOverlay.cpp
index 75a3222..2219d93 100644
--- a/src/cpp/server/ServerMainOverlay.cpp
+++ b/src/cpp/server/ServerMainOverlay.cpp
@@ -15,7 +15,7 @@
 
 #include <core/Error.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace server {
 namespace overlay {
diff --git a/src/cpp/server/ServerMeta.cpp b/src/cpp/server/ServerMeta.cpp
index 7bece93..bc38518 100644
--- a/src/cpp/server/ServerMeta.cpp
+++ b/src/cpp/server/ServerMeta.cpp
@@ -20,7 +20,7 @@
 
 #include <core/json/JsonRpc.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace meta {
@@ -36,8 +36,8 @@ void handleInitMessagesRequest(const json::JsonRpcRequest& request,
 } // anonymous namespace
 
 void handleMetaRequest(const std::string& username,
-                       const core::http::Request& request,
-                       core::http::Response* pResponse)
+                       const rscore::http::Request& request,
+                       rscore::http::Response* pResponse)
 {
    // parse request
    json::JsonRpcRequest jsonRpcRequest;
diff --git a/src/cpp/server/ServerMeta.hpp b/src/cpp/server/ServerMeta.hpp
index 772d849..e0eb12e 100644
--- a/src/cpp/server/ServerMeta.hpp
+++ b/src/cpp/server/ServerMeta.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    namespace http {
       class Request;
       class Response;
@@ -29,8 +29,8 @@ namespace server {
 namespace meta {
    
 void handleMetaRequest(const std::string& username,
-                       const core::http::Request& request,
-                       core::http::Response* pResponse);
+                       const rscore::http::Request& request,
+                       rscore::http::Response* pResponse);
 
 } // namespace meta
 } // namespace server
diff --git a/src/cpp/server/ServerOffline.cpp b/src/cpp/server/ServerOffline.cpp
index c0165d4..a6a672f 100644
--- a/src/cpp/server/ServerOffline.cpp
+++ b/src/cpp/server/ServerOffline.cpp
@@ -28,7 +28,7 @@
 #include <server/ServerOptions.hpp>
 #include <server/ServerUriHandlers.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace offline {
diff --git a/src/cpp/server/ServerOffline.hpp b/src/cpp/server/ServerOffline.hpp
index 67c103b..544026f 100644
--- a/src/cpp/server/ServerOffline.hpp
+++ b/src/cpp/server/ServerOffline.hpp
@@ -16,14 +16,14 @@
 #ifndef SERVER_OFFLINE_HPP
 #define SERVER_OFFLINE_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
 namespace server {
 namespace offline {
    
-core::Error httpServerAddHandlers();
+rscore::Error httpServerAddHandlers();
 
 } // namespace offline
 } // namespace server
diff --git a/src/cpp/server/ServerOptions.cpp b/src/cpp/server/ServerOptions.cpp
index 00e4bbc..8491746 100644
--- a/src/cpp/server/ServerOptions.cpp
+++ b/src/cpp/server/ServerOptions.cpp
@@ -26,7 +26,7 @@
 
 #include "ServerAppArmor.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace server {
 
@@ -90,7 +90,7 @@ ProgramStatus Options::read(int argc,
    using namespace boost::program_options ;
 
    // compute install path
-   Error error = core::system::installPath("..", argv[0], &installPath_);
+   Error error = rscore::system::installPath("..", argv[0], &installPath_);
    if (error)
    {
       LOG_ERROR_MESSAGE("Unable to determine install path: "+error.summary());
@@ -122,7 +122,7 @@ ProgramStatus Options::read(int argc,
    serverOffline_ = FilePath("/var/lib/rstudio-server/offline").exists();
 
    // generate monitor shared secret
-   monitorSharedSecret_ = core::system::generateUuid();
+   monitorSharedSecret_ = rscore::system::generateUuid();
 
    // program - name and execution
    options_description server("server");
@@ -135,7 +135,7 @@ ProgramStatus Options::read(int argc,
          "program user")
       ("server-daemonize",
          value<bool>(&serverDaemonize_)->default_value(
-                                      core::system::effectiveUserIsRoot()),
+                                      rscore::system::effectiveUserIsRoot()),
          "run program as daemon")
       ("server-app-armor-enabled",
          value<bool>(&serverAppArmorEnabled_)->default_value(1),
@@ -201,11 +201,11 @@ ProgramStatus Options::read(int argc,
    auth.add_options()
       ("auth-none",
         value<bool>(&authNone_)->default_value(
-                                 !core::system::effectiveUserIsRoot()),
+                                 !rscore::system::effectiveUserIsRoot()),
         "don't do any authentication")
       ("auth-validate-users",
         value<bool>(&authValidateUsers_)->default_value(
-                                 core::system::effectiveUserIsRoot()),
+                                 rscore::system::effectiveUserIsRoot()),
         "validate that authenticated users exist on the target system")
       ("auth-encrypt-password",
         value<bool>(&authEncryptPassword_)->default_value(true),
@@ -241,7 +241,7 @@ ProgramStatus Options::read(int argc,
  
    // read options
    bool help = false;
-   ProgramStatus status = core::program_options::read(optionsDesc,
+   ProgramStatus status = rscore::program_options::read(optionsDesc,
                                                       argc,
                                                       argv,
                                                       &help);
@@ -279,12 +279,12 @@ ProgramStatus Options::read(int argc,
    if (!serverUser_.empty())
    {
       // if we aren't running as root then forget the programUser
-      if (!core::system::realUserIsRoot())
+      if (!rscore::system::realUserIsRoot())
       {
          serverUser_ = "";
       }
       // if there is a program user specified and it doesn't exist....
-      else if (!core::system::user::exists(serverUser_))
+      else if (!rscore::system::user::exists(serverUser_))
       {
          if (serverUser_ == kDefaultProgramUser)
          {
diff --git a/src/cpp/server/ServerOptionsOverlay.cpp b/src/cpp/server/ServerOptionsOverlay.cpp
index 1ac26a2..928a3bd 100644
--- a/src/cpp/server/ServerOptionsOverlay.cpp
+++ b/src/cpp/server/ServerOptionsOverlay.cpp
@@ -15,7 +15,7 @@
 
 #include <server/ServerOptions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace server {
 
diff --git a/src/cpp/server/ServerPAMAuth.cpp b/src/cpp/server/ServerPAMAuth.cpp
index e29ee85..06111da 100644
--- a/src/cpp/server/ServerPAMAuth.cpp
+++ b/src/cpp/server/ServerPAMAuth.cpp
@@ -54,9 +54,9 @@ void assumeRootPriv()
     // running with geteuid != getuid (as is the case when we temporarily
     // drop privileges). We've also seen kerberos on Ubuntu require
     // priv to work correctly -- so, restore privilliges in the child
-    if (core::system::realUserIsRoot())
+    if (rscore::system::realUserIsRoot())
     {
-       Error error = core::system::restorePriv();
+       Error error = rscore::system::restorePriv();
        if (error)
        {
           LOG_ERROR(error);
@@ -112,10 +112,10 @@ std::string applicationSignInURL(const http::Request& request,
    return signInURL;
 }
 
-std::string getUserIdentifier(const core::http::Request& request)
+std::string getUserIdentifier(const rscore::http::Request& request)
 {
    if (server::options().authNone())
-      return core::system::username();
+      return rscore::system::username();
    else
       return auth::secure_cookie::readSecureCookie(request, kUserId);
 }
@@ -142,14 +142,14 @@ bool mainPageFilter(const http::Request& request,
    }
 }
 
-void signInThenContinue(const core::http::Request& request,
-                        core::http::Response* pResponse)
+void signInThenContinue(const rscore::http::Request& request,
+                        rscore::http::Response* pResponse)
 {
    pResponse->setMovedTemporarily(request, applicationSignInURL(request, request.uri()));
 }
 
 void refreshCredentialsThenContinue(
-            boost::shared_ptr<core::http::AsyncConnection> pConnection)
+            boost::shared_ptr<rscore::http::AsyncConnection> pConnection)
 {
    // no silent refresh possible so delegate to sign-in and continue
    signInThenContinue(pConnection->request(),
@@ -195,16 +195,16 @@ void publicKey(const http::Request&,
                http::Response* pResponse)
 {
    std::string exp, mod;
-   core::system::crypto::rsaPublicKey(&exp, &mod);
+   rscore::system::crypto::rsaPublicKey(&exp, &mod);
    pResponse->setNoCacheHeaders();
    pResponse->setBody(exp + ":" + mod);
    pResponse->setContentType("text/plain");
 }
 
-void setSignInCookies(const core::http::Request& request,
+void setSignInCookies(const rscore::http::Request& request,
                       const std::string& username,
                       bool persist,
-                      core::http::Response* pResponse)
+                      rscore::http::Response* pResponse)
 {
    boost::optional<boost::gregorian::days> expiry;
    if (persist)
@@ -240,7 +240,7 @@ void doSignIn(const http::Request& request,
    {
       std::string encryptedValue = request.formFieldValue("v");
       std::string plainText;
-      Error error = core::system::crypto::rsaPrivateDecrypt(encryptedValue,
+      Error error = rscore::system::crypto::rsaPrivateDecrypt(encryptedValue,
                                                             &plainText);
       if (error)
       {
@@ -351,12 +351,12 @@ bool pamLogin(const std::string& username, const std::string& password)
    args.push_back(username);
 
    // options (assume priv after fork)
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.onAfterFork = assumeRootPriv;
 
    // run pam helper
-   core::system::ProcessResult result;
-   Error error = core::system::runProgram(pamHelperPath.absolutePath(),
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runProgram(pamHelperPath.absolutePath(),
                                           args,
                                           password,
                                           options,
@@ -392,7 +392,7 @@ Error initialize()
    uri_handlers::addBlocking(kPublicKey, publicKey);
 
    // initialize crypto
-   return core::system::crypto::rsaInit();
+   return rscore::system::crypto::rsaInit();
 }
 
 
diff --git a/src/cpp/server/ServerPAMAuth.hpp b/src/cpp/server/ServerPAMAuth.hpp
index 77c59b7..1e45d73 100644
--- a/src/cpp/server/ServerPAMAuth.hpp
+++ b/src/cpp/server/ServerPAMAuth.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -27,7 +27,7 @@ namespace pam_auth {
    
 bool pamLogin(const std::string& username, const std::string& password);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace pam_auth
 } // namespace server
diff --git a/src/cpp/server/ServerProcessSupervisor.cpp b/src/cpp/server/ServerProcessSupervisor.cpp
index 45b5a9c..e39b23a 100644
--- a/src/cpp/server/ServerProcessSupervisor.cpp
+++ b/src/cpp/server/ServerProcessSupervisor.cpp
@@ -23,7 +23,7 @@
 
 #include <server/ServerScheduler.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace server {
 namespace process_supervisor {
@@ -33,9 +33,9 @@ namespace {
 // mutex that protects access to the process supervisor's methods
 boost::mutex s_mutex;
 
-core::system::ProcessSupervisor& processSupervisor()
+rscore::system::ProcessSupervisor& processSupervisor()
 {
-   static core::system::ProcessSupervisor instance;
+   static rscore::system::ProcessSupervisor instance;
    return instance;
 }
 
@@ -56,8 +56,8 @@ Error runProgram(
   const std::string& executable,
   const std::vector<std::string>& args,
   const std::string& input,
-  const core::system::ProcessOptions& options,
-  const boost::function<void(const core::system::ProcessResult&)>& onCompleted)
+  const rscore::system::ProcessOptions& options,
+  const boost::function<void(const rscore::system::ProcessResult&)>& onCompleted)
 {
    LOCK_MUTEX(s_mutex)
    {
@@ -70,7 +70,7 @@ Error runProgram(
    END_LOCK_MUTEX
 
    // fulfill closure and keep compiler happy
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    result.exitStatus = EXIT_FAILURE;
    result.stdErr = "Thread resource error occurred while running program " +
                    executable;
diff --git a/src/cpp/server/ServerREnvironment.cpp b/src/cpp/server/ServerREnvironment.cpp
index 6c318ce..6967ac8 100644
--- a/src/cpp/server/ServerREnvironment.cpp
+++ b/src/cpp/server/ServerREnvironment.cpp
@@ -23,7 +23,7 @@
 #include <server/ServerOptions.hpp>
 #include <server/ServerUriHandlers.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace r_environment {
@@ -66,8 +66,8 @@ std::vector<std::pair<std::string,std::string> > variables()
    return r_util::EnvironmentVars();
 }
 
-bool detectREnvironment(const core::FilePath& rScriptPath,
-                        core::r_util::EnvironmentVars* pVars,
+bool detectREnvironment(const rscore::FilePath& rScriptPath,
+                        rscore::r_util::EnvironmentVars* pVars,
                         std::string* pErrMsg)
 {
    // determine rLdPaths script location
diff --git a/src/cpp/server/ServerREnvironment.hpp b/src/cpp/server/ServerREnvironment.hpp
index 8b47c89..8eaf476 100644
--- a/src/cpp/server/ServerREnvironment.hpp
+++ b/src/cpp/server/ServerREnvironment.hpp
@@ -21,7 +21,7 @@
 
 #include <core/r_util/REnvironment.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -33,8 +33,8 @@ bool initialize(std::string* pErrMsg);
 
 std::vector<std::pair<std::string,std::string> > variables();
 
-bool detectREnvironment(const core::FilePath& filePath,
-                        core::r_util::EnvironmentVars* pVars,
+bool detectREnvironment(const rscore::FilePath& filePath,
+                        rscore::r_util::EnvironmentVars* pVars,
                         std::string* pErrMsg);
 
 } // namespace r_environment
diff --git a/src/cpp/server/ServerSessionManager.cpp b/src/cpp/server/ServerSessionManager.cpp
index 859acba..dac2911 100644
--- a/src/cpp/server/ServerSessionManager.cpp
+++ b/src/cpp/server/ServerSessionManager.cpp
@@ -39,19 +39,19 @@
 #include "ServerREnvironment.hpp"
 
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 
 namespace {
 
-core::system::ProcessConfig sessionProcessConfig(
+rscore::system::ProcessConfig sessionProcessConfig(
          const std::string& username,
-         const core::system::Options& extraArgs = core::system::Options())
+         const rscore::system::Options& extraArgs = rscore::system::Options())
 {
    // prepare command line arguments
    server::Options& options = server::options();
-   core::system::Options args ;
+   rscore::system::Options args ;
 
    // check for options-specified config file and add to command
    // line if specified
@@ -64,13 +64,13 @@ core::system::ProcessConfig sessionProcessConfig(
                                  username));
 
    // allow session timeout to be overridden via environment variable
-   std::string timeout = core::system::getenv("RSTUDIO_SESSION_TIMEOUT");
+   std::string timeout = rscore::system::getenv("RSTUDIO_SESSION_TIMEOUT");
    if (!timeout.empty())
       args.push_back(std::make_pair("--" kTimeoutSessionOption, timeout));
 
    // pass our uid to instruct rsession to limit rpc clients to us and itself
-   core::system::Options environment;
-   uid_t uid = core::system::user::currentUserIdentity().userId;
+   rscore::system::Options environment;
+   uid_t uid = rscore::system::user::currentUserIdentity().userId;
    environment.push_back(std::make_pair(
                            kRStudioLimitRpcClientUid,
                            safe_convert::numberToString(uid)));
@@ -79,7 +79,7 @@ core::system::ProcessConfig sessionProcessConfig(
    std::copy(extraArgs.begin(), extraArgs.end(), std::back_inserter(args));
 
    // append R environment variables
-   core::system::Options rEnvVars = r_environment::variables();
+   rscore::system::Options rEnvVars = r_environment::variables();
    environment.insert(environment.end(), rEnvVars.begin(), rEnvVars.end());
 
    // add monitor shared secret
@@ -87,10 +87,10 @@ core::system::ProcessConfig sessionProcessConfig(
                                         options.monitorSharedSecret()));
 
    // build the config object and return it
-   core::system::ProcessConfig config;
+   rscore::system::ProcessConfig config;
    config.args = args;
    config.environment = environment;
-   config.stdStreamBehavior = core::system::StdStreamInherit;
+   config.stdStreamBehavior = rscore::system::StdStreamInherit;
    return config;
 }
 
@@ -172,10 +172,10 @@ Error SessionManager::launchSession(const std::string& username)
 // default session launcher -- does the launch then tracks the pid
 // for later reaping
 Error SessionManager::launchAndTrackSession(
-                           const core::r_util::SessionLaunchProfile& profile)
+                           const rscore::r_util::SessionLaunchProfile& profile)
 {
    // if we are root then assume the identity of the user
-   using namespace core::system;
+   using namespace rscore::system;
    std::string runAsUser = realUserIsRoot() ? profile.username : "";
 
    // launch the session
@@ -224,17 +224,17 @@ void SessionManager::notifySIGCHLD()
 
 // helper function for verify-installation
 Error launchSession(const std::string& username,
-                    const core::system::Options& extraArgs,
+                    const rscore::system::Options& extraArgs,
                     PidType* pPid)
 {
    // launch the session
    std::string rsessionPath = server::options().rsessionPath();
-   std::string runAsUser = core::system::realUserIsRoot() ? username : "";
-   core::system::ProcessConfig config = sessionProcessConfig(username,
+   std::string runAsUser = rscore::system::realUserIsRoot() ? username : "";
+   rscore::system::ProcessConfig config = sessionProcessConfig(username,
                                                              extraArgs);
 
    *pPid = -1;
-   return core::system::launchChildProcess(rsessionPath,
+   return rscore::system::launchChildProcess(rsessionPath,
                                            runAsUser,
                                            config,
                                            pPid);
diff --git a/src/cpp/server/ServerSessionProxy.cpp b/src/cpp/server/ServerSessionProxy.cpp
index fd9d75b..f87d306 100644
--- a/src/cpp/server/ServerSessionProxy.cpp
+++ b/src/cpp/server/ServerSessionProxy.cpp
@@ -59,7 +59,7 @@
 
 #include <server/ServerConstants.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace server {
 namespace session_proxy {
@@ -96,7 +96,7 @@ ProxyFilter s_proxyFilter;
 
 bool applyProxyFilter(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection)
 {
    if (s_proxyFilter)
       return s_proxyFilter(username, ptrConnection);
@@ -105,7 +105,7 @@ bool applyProxyFilter(
 }
 
 void handleProxyResponse(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       std::string username,
       const http::Response& response)
 {
@@ -178,7 +178,7 @@ void rewriteLocalhostAddressHeader(const std::string& headerName,
 }
 
 void handleLocalhostResponse(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       boost::shared_ptr<LocalhostAsyncClient> ptrLocalhost,
       const std::string& port,
       const http::Response& response)
@@ -241,7 +241,7 @@ void handleLocalhostResponse(
 }
 
 void handleLocalhostError(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       const Error& error)
 {
    // if this request required a session then return a standard 503
@@ -270,7 +270,7 @@ void logIfNotConnectionTerminated(const Error& error,
 }
 
 void handleContentError(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       std::string username,
       const Error& error)
 {   
@@ -315,7 +315,7 @@ void handleContentError(
 }
 
 void handleRpcError(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
        std::string username,
       const Error& error)
 {
@@ -359,7 +359,7 @@ void handleRpcError(
 }
 
 void handleEventsError(
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       const Error& error)
 {
    // NOTE: events requests don't initiate session launches so
@@ -395,7 +395,7 @@ void handleEventsError(
 
 void proxyRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection,
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection,
       const http::ErrorHandler& errorHandler,
       const http::ConnectionRetryProfile& connectionRetryProfile)
 {
@@ -461,26 +461,26 @@ Error initialize()
 Error runVerifyInstallationSession()
 {
    // get current user
-   core::system::user::User user;
+   rscore::system::user::User user;
    Error error = currentUser(&user);
    if (error)
       return error;
 
    // launch verify installation session
-   core::system::Options args;
-   args.push_back(core::system::Option("--" kVerifyInstallationSessionOption, "1"));
+   rscore::system::Options args;
+   args.push_back(rscore::system::Option("--" kVerifyInstallationSessionOption, "1"));
    PidType sessionPid;
    error = server::launchSession(user.username, args, &sessionPid);
    if (error)
       return error;
 
    // wait for exit
-   return core::system::waitForProcessExit(sessionPid);
+   return rscore::system::waitForProcessExit(sessionPid);
 }
 
 void proxyContentRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection)
 {
    proxyRequest(username,
                 ptrConnection,
@@ -490,7 +490,7 @@ void proxyContentRequest(
 
 void proxyRpcRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection)
 {
    // validate the user if this is client_init
    if (boost::algorithm::ends_with(ptrConnection->request().uri(),
@@ -508,7 +508,7 @@ void proxyRpcRequest(
    
 void proxyEventsRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection)
 {
    // validate the user
    if (!validateUser(ptrConnection, username))
@@ -522,7 +522,7 @@ void proxyEventsRequest(
 
 void proxyLocalhostRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection)
 {
    // apply optional proxy filter
    if (applyProxyFilter(username, ptrConnection))
diff --git a/src/cpp/server/auth/ServerAuthHandler.cpp b/src/cpp/server/auth/ServerAuthHandler.cpp
index 75de1df..4f8e10b 100644
--- a/src/cpp/server/auth/ServerAuthHandler.cpp
+++ b/src/cpp/server/auth/ServerAuthHandler.cpp
@@ -24,7 +24,7 @@
 
 #include <server/auth/ServerSecureUriHandler.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace auth {
@@ -36,7 +36,7 @@ namespace {
 Handler s_handler;
 
 void updateCredentialsNotSupported(
-      boost::shared_ptr<core::http::AsyncConnection> pConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> pConnection)
 {
    // alias response
    http::Response* pResponse = &(pConnection->response());
@@ -60,7 +60,7 @@ const char * const kSignOut = "/auth-sign-out";
 const char * const kRefreshCredentialsAndContinue = "/auth-refresh-credentials";
 
 
-std::string getUserIdentifier(const core::http::Request& request)
+std::string getUserIdentifier(const rscore::http::Request& request)
 {
    return s_handler.getUserIdentifier(request);
 }
@@ -70,20 +70,20 @@ std::string userIdentifierToLocalUsername(const std::string& userIdentifier)
    return s_handler.userIdentifierToLocalUsername(userIdentifier);
 }
 
-bool mainPageFilter(const core::http::Request& request,
-                    core::http::Response* pResponse)
+bool mainPageFilter(const rscore::http::Request& request,
+                    rscore::http::Response* pResponse)
 {
    return s_handler.mainPageFilter(request, pResponse);
 }
 
-void signInThenContinue(const core::http::Request& request,
-                        core::http::Response* pResponse)
+void signInThenContinue(const rscore::http::Request& request,
+                        rscore::http::Response* pResponse)
 {
    s_handler.signInThenContinue(request, pResponse);
 }
 
 void refreshCredentialsThenContinue(
-      boost::shared_ptr<core::http::AsyncConnection> pConnection)
+      boost::shared_ptr<rscore::http::AsyncConnection> pConnection)
 {
    s_handler.refreshCredentialsThenContinue(pConnection);
 }
@@ -122,10 +122,10 @@ bool canSetSignInCookies()
    return !s_handler.setSignInCookies.empty();
 }
 
-void setSignInCookies(const core::http::Request& request,
+void setSignInCookies(const rscore::http::Request& request,
                       const std::string& username,
                       bool persist,
-                      core::http::Response* pResponse)
+                      rscore::http::Response* pResponse)
 {
    s_handler.setSignInCookies(request, username, persist, pResponse);
 }
diff --git a/src/cpp/server/auth/ServerSecureCookie.cpp b/src/cpp/server/auth/ServerSecureCookie.cpp
index b984ba6..d674402 100644
--- a/src/cpp/server/auth/ServerSecureCookie.cpp
+++ b/src/cpp/server/auth/ServerSecureCookie.cpp
@@ -65,18 +65,18 @@ Error base64HMAC(const std::string& value,
 
    // compute hmac for the message
    std::vector<unsigned char> hmac;
-   Error error = core::system::crypto::HMAC_SHA1(message, cookieKey, &hmac);
+   Error error = rscore::system::crypto::HMAC_SHA1(message, cookieKey, &hmac);
    if (error)
       return error;
 
    // base 64 encode it
-   return core::system::crypto::base64Encode(hmac, pHMAC);
+   return rscore::system::crypto::base64Encode(hmac, pHMAC);
 }
 
 http::Cookie createSecureCookie(
                           const std::string& name,
                           const std::string& value,
-                          const core::http::Request& request,
+                          const rscore::http::Request& request,
                           const boost::posix_time::time_duration& validDuration,
                           const std::string& path)
 {
@@ -115,7 +115,7 @@ http::Cookie createSecureCookie(
 
 } // anonymous namespace
 
-std::string readSecureCookie(const core::http::Request& request,
+std::string readSecureCookie(const rscore::http::Request& request,
                              const std::string& name)
 {
    // get the signed cookie value
@@ -219,7 +219,7 @@ void set(const std::string& name,
 void remove(const http::Request& request,
             const std::string& name,
             const std::string& path,
-            core::http::Response* pResponse)
+            rscore::http::Response* pResponse)
 {
    // create vanilla cookie (no need for secure cookie since we are removing)
    http::Cookie cookie(request, name, std::string(), path);
@@ -235,7 +235,7 @@ Error initialize()
 {
    // determine path to use for secure cookie key file
    FilePath secureCookieKeyPath;
-   if (core::system::effectiveUserIsRoot())
+   if (rscore::system::effectiveUserIsRoot())
    {
       secureCookieKeyPath = FilePath("/etc/rstudio/secure-cookie-key");
       if (!secureCookieKeyPath.exists())
@@ -269,7 +269,7 @@ Error initialize()
    else
    {
       // generate a new key
-      std::string secureCookieKey = core::system::generateUuid(false);
+      std::string secureCookieKey = rscore::system::generateUuid(false);
 
       // ensure the parent directory
       Error error = secureCookieKeyPath.parent().ensureDirectory();
@@ -283,7 +283,7 @@ Error initialize()
 
       // change mode it so it is only readable and writeable by this user
       if (changeFileMode(secureCookieKeyPath,
-                         core::system::UserReadWriteMode) < 0)
+                         rscore::system::UserReadWriteMode) < 0)
       {
          return systemError(errno, ERROR_LOCATION);
       }
diff --git a/src/cpp/server/auth/ServerSecureUriHandler.cpp b/src/cpp/server/auth/ServerSecureUriHandler.cpp
index ea72999..dab4ef0 100644
--- a/src/cpp/server/auth/ServerSecureUriHandler.cpp
+++ b/src/cpp/server/auth/ServerSecureUriHandler.cpp
@@ -29,7 +29,7 @@
 #include <server/auth/ServerAuthHandler.hpp>
 #include <server/auth/ServerValidateUser.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace auth {
diff --git a/src/cpp/server/auth/ServerValidateUser.cpp b/src/cpp/server/auth/ServerValidateUser.cpp
index 5c878c1..17328b1 100644
--- a/src/cpp/server/auth/ServerValidateUser.cpp
+++ b/src/cpp/server/auth/ServerValidateUser.cpp
@@ -24,7 +24,7 @@
 
 #include <server/ServerOptions.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace auth {
@@ -38,12 +38,12 @@ bool validateUser(const std::string& username,
       return true;
    
    // get the user
-   core::system::user::User user;
+   rscore::system::user::User user;
    Error error = userFromUsername(username, &user);
    if (error)
    {
       // log the error only if it is unexpected
-      if (!core::system::isUserNotFoundError(error))
+      if (!rscore::system::isUserNotFoundError(error))
          LOG_ERROR(error);
 
       // not found either due to non-existence or an unexpected error
@@ -55,7 +55,7 @@ bool validateUser(const std::string& username,
    {    
       // see if they are a member of the required group
       bool belongsToGroup ;
-      error = core::system::userBelongsToGroup(user,
+      error = rscore::system::userBelongsToGroup(user,
                                                requiredGroup,
                                                &belongsToGroup);
       if (error)
diff --git a/src/cpp/server/include/server/ServerErrorCategory.hpp b/src/cpp/server/include/server/ServerErrorCategory.hpp
index 7a924b7..b3c3238 100644
--- a/src/cpp/server/include/server/ServerErrorCategory.hpp
+++ b/src/cpp/server/include/server/ServerErrorCategory.hpp
@@ -60,9 +60,9 @@ inline boost::system::error_condition make_error_condition( errc_t e )
 } // namespace errc
 
 
-bool isAuthenticationError(const core::Error& error);
+bool isAuthenticationError(const rscore::Error& error);
 
-bool isSessionUnavailableError(const core::Error& error);
+bool isSessionUnavailableError(const rscore::Error& error);
 
 } // namespace server
 
diff --git a/src/cpp/server/include/server/ServerOptions.hpp b/src/cpp/server/include/server/ServerOptions.hpp
index 4edf132..7358da2 100644
--- a/src/cpp/server/include/server/ServerOptions.hpp
+++ b/src/cpp/server/include/server/ServerOptions.hpp
@@ -26,7 +26,7 @@
 #include <core/ProgramOptions.hpp>
 #include <core/SafeConvert.hpp>
 
-namespace core {
+namespace rscore {
    class ProgramStatus;
 }
 
@@ -45,7 +45,7 @@ private:
    
 public:
    virtual ~Options() {}
-   core::ProgramStatus read(int argc,
+   rscore::ProgramStatus read(int argc,
                             char * const argv[],
                             std::ostream& osWarnings);
    
@@ -99,9 +99,9 @@ public:
       return std::string(wwwLocalPath_.c_str()); 
    }
 
-   core::FilePath wwwSymbolMapsPath() const
+   rscore::FilePath wwwSymbolMapsPath() const
    {
-      return core::FilePath(wwwSymbolMapsPath_.c_str());
+      return rscore::FilePath(wwwSymbolMapsPath_.c_str());
    }
 
    bool wwwUseEmulatedStack() const
@@ -188,7 +188,7 @@ public:
 
 private:
 
-   void resolvePath(const core::FilePath& basePath,
+   void resolvePath(const rscore::FilePath& basePath,
                     std::string* pPath) const;
 
    void addOverlayOptions(boost::program_options::options_description* pServer,
@@ -213,12 +213,12 @@ private:
 
    void setOverlayOption(const std::string& name, int value)
    {
-      setOverlayOption(name, core::safe_convert::numberToString(value));
+      setOverlayOption(name, rscore::safe_convert::numberToString(value));
    }
 
 
 private:
-   core::FilePath installPath_;
+   rscore::FilePath installPath_;
    bool verifyInstallation_;
    std::string serverWorkingDir_;
    std::string serverUser_;
diff --git a/src/cpp/server/include/server/ServerProcessSupervisor.hpp b/src/cpp/server/include/server/ServerProcessSupervisor.hpp
index 44e8814..04ccaf2 100644
--- a/src/cpp/server/include/server/ServerProcessSupervisor.hpp
+++ b/src/cpp/server/include/server/ServerProcessSupervisor.hpp
@@ -28,14 +28,14 @@ namespace  core {
 namespace server {
 namespace process_supervisor {
 
-core::Error runProgram(
+rscore::Error runProgram(
   const std::string& executable,
   const std::vector<std::string>& args,
   const std::string& input,
-  const core::system::ProcessOptions& options,
-  const boost::function<void(const core::system::ProcessResult&)>& onCompleted);
+  const rscore::system::ProcessOptions& options,
+  const boost::function<void(const rscore::system::ProcessResult&)>& onCompleted);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace process_supervisor
 } // namespace server
diff --git a/src/cpp/server/include/server/ServerScheduler.hpp b/src/cpp/server/include/server/ServerScheduler.hpp
index d8f26df..277a6f4 100644
--- a/src/cpp/server/include/server/ServerScheduler.hpp
+++ b/src/cpp/server/include/server/ServerScheduler.hpp
@@ -27,7 +27,7 @@ namespace scheduler {
 //
 // note that this function does not synchronize access to the list of
 // scheduled commands so it should ONLY be called during server init
-void addCommand(boost::shared_ptr<core::ScheduledCommand> pCmd);
+void addCommand(boost::shared_ptr<rscore::ScheduledCommand> pCmd);
 
 } // namespace scheduler
 } // namespace server
diff --git a/src/cpp/server/include/server/ServerSessionManager.hpp b/src/cpp/server/include/server/ServerSessionManager.hpp
index e0fcb28..5b549fe 100644
--- a/src/cpp/server/include/server/ServerSessionManager.hpp
+++ b/src/cpp/server/include/server/ServerSessionManager.hpp
@@ -29,7 +29,7 @@
 
 #include <core/r_util/RSessionLaunchProfile.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -52,18 +52,18 @@ private:
 
 public:
    // launching
-   core::Error launchSession(const std::string& username);
+   rscore::Error launchSession(const std::string& username);
    void removePendingLaunch(const std::string& username);
 
    // set a custom session launcher
-   typedef boost::function<core::Error(
-                           const core::r_util::SessionLaunchProfile&)>
+   typedef boost::function<rscore::Error(
+                           const rscore::r_util::SessionLaunchProfile&)>
                                                   SessionLaunchFunction;
    void setSessionLaunchFunction(const SessionLaunchFunction& launchFunction);
 
    // set a launch profile filter
    typedef boost::function<void(
-                           core::r_util::SessionLaunchProfile*)>
+                           rscore::r_util::SessionLaunchProfile*)>
                                                   SessionLaunchProfileFilter;
    void addSessionLaunchProfileFilter(const SessionLaunchProfileFilter& filter);
 
@@ -73,8 +73,8 @@ public:
 private:
    // default session launcher -- runs the process then uses the
    // ChildProcessTracker to track it's pid for later reaping
-   core::Error launchAndTrackSession(
-                        const core::r_util::SessionLaunchProfile& profile);
+   rscore::Error launchAndTrackSession(
+                        const rscore::r_util::SessionLaunchProfile& profile);
 
 private:
    // pending launches
@@ -89,13 +89,13 @@ private:
    std::vector<SessionLaunchProfileFilter> sessionLaunchProfileFilters_;
 
    // child process tracker
-   core::system::ChildProcessTracker processTracker_;
+   rscore::system::ChildProcessTracker processTracker_;
 };
 
 // Lower-level global functions for launching sessions. These are used
 // internally by the SessionManager as well as for verify-installation
-core::Error launchSession(const std::string& username,
-                          const core::system::Options& extraArgs,
+rscore::Error launchSession(const std::string& username,
+                          const rscore::system::Options& extraArgs,
                           PidType* pPid);
 
 
diff --git a/src/cpp/server/include/server/ServerSessionProxy.hpp b/src/cpp/server/include/server/ServerSessionProxy.hpp
index d8b5231..a770009 100644
--- a/src/cpp/server/include/server/ServerSessionProxy.hpp
+++ b/src/cpp/server/include/server/ServerSessionProxy.hpp
@@ -20,38 +20,38 @@
 
 #include <core/http/AsyncConnection.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 } 
 
 namespace server {
 namespace session_proxy {
 
-core::Error initialize();
+rscore::Error initialize();
 
-core::Error runVerifyInstallationSession();
+rscore::Error runVerifyInstallationSession();
    
 void proxyContentRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection) ;
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection) ;
 
 void proxyRpcRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection) ;
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection) ;
 
 void proxyEventsRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection);
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection);
 
 void proxyLocalhostRequest(
       const std::string& username,
-      boost::shared_ptr<core::http::AsyncConnection> ptrConnection);
+      boost::shared_ptr<rscore::http::AsyncConnection> ptrConnection);
    
-bool requiresSession(const core::http::Request& request);
+bool requiresSession(const rscore::http::Request& request);
 
 typedef boost::function<bool(
     const std::string&,
-    boost::shared_ptr<core::http::AsyncConnection>)> ProxyFilter;
+    boost::shared_ptr<rscore::http::AsyncConnection>)> ProxyFilter;
 void setProxyFilter(ProxyFilter filter);
 
 } // namespace session_proxy
diff --git a/src/cpp/server/include/server/ServerUriHandlers.hpp b/src/cpp/server/include/server/ServerUriHandlers.hpp
index 35ef4b8..dde5f44 100644
--- a/src/cpp/server/include/server/ServerUriHandlers.hpp
+++ b/src/cpp/server/include/server/ServerUriHandlers.hpp
@@ -26,17 +26,17 @@ namespace uri_handlers {
 
 // add async uri handler
 void add(const std::string& prefix,
-         const core::http::AsyncUriHandlerFunction& handler);
+         const rscore::http::AsyncUriHandlerFunction& handler);
 
 // add blocking uri handler
 void addBlocking(const std::string& prefix,
-                 const core::http::UriHandlerFunction& handler);
+                 const rscore::http::UriHandlerFunction& handler);
 
 // set async default handler
-void setDefault(const core::http::AsyncUriHandlerFunction& handler);
+void setDefault(const rscore::http::AsyncUriHandlerFunction& handler);
 
 // set blocking default handler
-void setBlockingDefault(const core::http::UriHandlerFunction& handler);
+void setBlockingDefault(const rscore::http::UriHandlerFunction& handler);
 
 } // namespace uri_handlers
 } // namespace server
diff --git a/src/cpp/server/include/server/auth/ServerAuthHandler.hpp b/src/cpp/server/include/server/auth/ServerAuthHandler.hpp
index 0ea0d16..08d27b2 100644
--- a/src/cpp/server/include/server/auth/ServerAuthHandler.hpp
+++ b/src/cpp/server/include/server/auth/ServerAuthHandler.hpp
@@ -35,15 +35,15 @@ extern const char * const kSignOut;
 extern const char * const kRefreshCredentialsAndContinue;
 
 // functions which can be called on the handler directly
-std::string getUserIdentifier(const core::http::Request& request);
+std::string getUserIdentifier(const rscore::http::Request& request);
 
 std::string userIdentifierToLocalUsername(const std::string& userIdentifier);
 
-bool mainPageFilter(const core::http::Request& request,
-                    core::http::Response* pResponse);
+bool mainPageFilter(const rscore::http::Request& request,
+                    rscore::http::Response* pResponse);
 
-void signInThenContinue(const core::http::Request& request,
-                        core::http::Response* pResponse);
+void signInThenContinue(const rscore::http::Request& request,
+                        rscore::http::Response* pResponse);
 
 // Special uri handler which attempts to refresh the user's
 // credentials then continues on to the originally requested
@@ -51,26 +51,26 @@ void signInThenContinue(const core::http::Request& request,
 // auth back-end doesn't support this behavior then it should
 // redirect to the sign-in page
 void refreshCredentialsThenContinue(
-      boost::shared_ptr<core::http::AsyncConnection> pConnection);
+      boost::shared_ptr<rscore::http::AsyncConnection> pConnection);
 
 
 // functions which must be provided by an auth handler
 struct Handler
 {
-   boost::function<std::string(const core::http::Request&)> getUserIdentifier;
+   boost::function<std::string(const rscore::http::Request&)> getUserIdentifier;
    boost::function<std::string(const std::string&)>
                                                 userIdentifierToLocalUsername;
-   core::http::UriFilterFunction mainPageFilter;
-   core::http::UriHandlerFunction signInThenContinue;
-   core::http::AsyncUriHandlerFunction refreshCredentialsThenContinue;
-   core::http::AsyncUriHandlerFunction updateCredentials;
-   core::http::UriHandlerFunction signIn;
-   core::http::UriHandlerFunction signOut;
-
-   boost::function<void(const core::http::Request&,
+   rscore::http::UriFilterFunction mainPageFilter;
+   rscore::http::UriHandlerFunction signInThenContinue;
+   rscore::http::AsyncUriHandlerFunction refreshCredentialsThenContinue;
+   rscore::http::AsyncUriHandlerFunction updateCredentials;
+   rscore::http::UriHandlerFunction signIn;
+   rscore::http::UriHandlerFunction signOut;
+
+   boost::function<void(const rscore::http::Request&,
                         const std::string&,
                         bool,
-                        core::http::Response*)> setSignInCookies;
+                        rscore::http::Response*)> setSignInCookies;
 };
 
 // register the auth handler
@@ -81,14 +81,14 @@ bool isRegistered();
 
 // set sign in cookies
 bool canSetSignInCookies();
-void setSignInCookies(const core::http::Request& request,
+void setSignInCookies(const rscore::http::Request& request,
                       const std::string& username,
                       bool persist,
-                      core::http::Response* pResponse);
+                      rscore::http::Response* pResponse);
 
 // sign out
-void signOut(const core::http::Request& request,
-             core::http::Response* pResponse);
+void signOut(const rscore::http::Request& request,
+             rscore::http::Response* pResponse);
 
 } // namespace handler
 } // namespace auth
diff --git a/src/cpp/server/include/server/auth/ServerSecureCookie.hpp b/src/cpp/server/include/server/auth/ServerSecureCookie.hpp
index a29e4fc..ceef076 100644
--- a/src/cpp/server/include/server/auth/ServerSecureCookie.hpp
+++ b/src/cpp/server/include/server/auth/ServerSecureCookie.hpp
@@ -20,7 +20,7 @@
 #include <boost/optional.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    namespace http {
       class Request;
@@ -28,13 +28,13 @@ namespace core {
    }
 }
 
-using namespace core;
+using namespace rscore;
 
 namespace server {
 namespace auth {
 namespace secure_cookie {
 
-std::string readSecureCookie(const core::http::Request& request,
+std::string readSecureCookie(const rscore::http::Request& request,
                              const std::string& name);
 
 void set(const std::string& name,
@@ -55,9 +55,9 @@ void set(const std::string& name,
 void remove(const http::Request& request,
             const std::string& name,
             const std::string& path,
-            core::http::Response* pResponse);
+            rscore::http::Response* pResponse);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace secure_cookie
 } // namespace auth
diff --git a/src/cpp/server/include/server/auth/ServerSecureUriHandler.hpp b/src/cpp/server/include/server/auth/ServerSecureUriHandler.hpp
index 6bfddbb..4f65be4 100644
--- a/src/cpp/server/include/server/auth/ServerSecureUriHandler.hpp
+++ b/src/cpp/server/include/server/auth/ServerSecureUriHandler.hpp
@@ -21,45 +21,45 @@
 #include <core/http/UriHandler.hpp>
 #include <core/http/AsyncUriHandler.hpp>
 
-namespace core {
+namespace rscore {
 namespace http { 
    class Request;
    class Response;
 } // namespace http
-} // namespace core
+} // namespace rscore
 
 namespace server {
 namespace auth {
    
 typedef boost::function<void(
                            const std::string& username,
-                           const core::http::Request&,
-                           core::http::Response*)> SecureUriHandlerFunction ;
+                           const rscore::http::Request&,
+                           rscore::http::Response*)> SecureUriHandlerFunction ;
 
 typedef boost::function<void(
                      const std::string& username,
-                     boost::shared_ptr<core::http::AsyncConnection>)>
+                     boost::shared_ptr<rscore::http::AsyncConnection>)>
                                           SecureAsyncUriHandlerFunction;
 
       
-core::http::UriHandlerFunction secureHttpHandler(
+rscore::http::UriHandlerFunction secureHttpHandler(
                                     SecureUriHandlerFunction handler,
                                     bool authenticate = false);
 
-core::http::UriHandlerFunction secureJsonRpcHandler(
+rscore::http::UriHandlerFunction secureJsonRpcHandler(
                                     SecureUriHandlerFunction handler);
 
-core::http::UriHandlerFunction secureUploadHandler(
+rscore::http::UriHandlerFunction secureUploadHandler(
                                     SecureUriHandlerFunction handler);
 
-core::http::AsyncUriHandlerFunction secureAsyncHttpHandler(
+rscore::http::AsyncUriHandlerFunction secureAsyncHttpHandler(
                                     SecureAsyncUriHandlerFunction handler,
                                     bool authenticate = false);
 
-core::http::AsyncUriHandlerFunction secureAsyncJsonRpcHandler(
+rscore::http::AsyncUriHandlerFunction secureAsyncJsonRpcHandler(
                                     SecureAsyncUriHandlerFunction handler);
 
-core::http::AsyncUriHandlerFunction secureAsyncUploadHandler(
+rscore::http::AsyncUriHandlerFunction secureAsyncUploadHandler(
                                     SecureAsyncUriHandlerFunction handler);
 
 } // namespace auth
diff --git a/src/cpp/server/pam/PamMain.cpp b/src/cpp/server/pam/PamMain.cpp
index 85d2a7d..801beeb 100644
--- a/src/cpp/server/pam/PamMain.cpp
+++ b/src/cpp/server/pam/PamMain.cpp
@@ -25,7 +25,7 @@
 #include <core/system/PosixUser.hpp>
 #include <core/system/Pam.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace {
 
@@ -34,8 +34,8 @@ int inappropriateUsage(const ErrorLocation& location)
    // log warning
    boost::format fmt("Inappropriate use of pam helper binary (user=%1%)");
    std::string msg = boost::str(
-               fmt % core::system::user::currentUserIdentity().userId);
-   core::log::logWarningMessage(msg, location);
+               fmt % rscore::system::user::currentUserIdentity().userId);
+   rscore::log::logWarningMessage(msg, location);
 
    // additional notification to the user
    std::cerr << "\nThis binary is not designed for running this way\n"
@@ -55,10 +55,10 @@ int main(int argc, char * const argv[])
    try
    { 
       // initialize log
-      initializeSystemLog("rserver-pam", core::system::kLogLevelWarning);
+      initializeSystemLog("rserver-pam", rscore::system::kLogLevelWarning);
 
       // ignore SIGPIPE
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
@@ -93,7 +93,7 @@ int main(int argc, char * const argv[])
       }
 
       // verify password
-      if (core::system::PAM("rstudio", false).login(username,
+      if (rscore::system::PAM("rstudio", false).login(username,
                                                     password) == PAM_SUCCESS)
          return EXIT_SUCCESS;
       else
diff --git a/src/cpp/session/SessionAddins.cpp.in b/src/cpp/session/SessionAddins.cpp.in
index 6a08c3c..9a2e1a6 100644
--- a/src/cpp/session/SessionAddins.cpp.in
+++ b/src/cpp/session/SessionAddins.cpp.in
@@ -16,7 +16,7 @@
 #include <core/Error.hpp>
 #include <core/Exec.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace addins {
diff --git a/src/cpp/session/SessionAddins.hpp b/src/cpp/session/SessionAddins.hpp
index 621e407..e6eac77 100644
--- a/src/cpp/session/SessionAddins.hpp
+++ b/src/cpp/session/SessionAddins.hpp
@@ -16,14 +16,14 @@
 #ifndef SESSION_ADDINS_HPP
 #define SESSION_ADDINS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
 namespace session {
 namespace addins {
    
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace addins
 } // namespace session
diff --git a/src/cpp/session/SessionAsyncRProcess.cpp b/src/cpp/session/SessionAsyncRProcess.cpp
index 8907ee4..5e4d373 100644
--- a/src/cpp/session/SessionAsyncRProcess.cpp
+++ b/src/cpp/session/SessionAsyncRProcess.cpp
@@ -22,7 +22,7 @@
 
 #include <session/SessionAsyncRProcess.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace async_r {
@@ -34,12 +34,12 @@ AsyncRProcess::AsyncRProcess():
 }
 
 void AsyncRProcess::start(const char* rCommand, 
-                          const core::FilePath& workingDir, 
+                          const rscore::FilePath& workingDir, 
                           AsyncRProcessOptions rOptions)
 {
    // R binary
-   core::FilePath rProgramPath;
-   core::Error error = module_context::rScriptPath(&rProgramPath);
+   rscore::FilePath rProgramPath;
+   rscore::Error error = module_context::rScriptPath(&rProgramPath);
    if (error)
    {
       LOG_ERROR(error);
@@ -48,7 +48,7 @@ void AsyncRProcess::start(const char* rCommand,
    }
 
    // program path and args
-   core::FilePath programPath;
+   rscore::FilePath programPath;
    std::vector<std::string> args;
 
    // call R through a login shell on OSX so that it can pickup
@@ -70,7 +70,7 @@ void AsyncRProcess::start(const char* rCommand,
    args.push_back(rCommand);
 
    // options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.terminateChildren = true;
    if (rOptions & R_PROCESS_REDIRECTSTDERR)
       options.redirectStdErrToStdOut = true;
@@ -83,16 +83,16 @@ void AsyncRProcess::start(const char* rCommand,
 
    // forward R_LIBS so the child process has access to the same libraries
    // we do
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
    std::string libPaths = module_context::libPathsString();
    if (!libPaths.empty())
    {
-      core::system::setenv(&childEnv, "R_LIBS", libPaths);
+      rscore::system::setenv(&childEnv, "R_LIBS", libPaths);
       options.environment = childEnv;
    }
 
-   core::system::ProcessCallbacks cb;
+   rscore::system::ProcessCallbacks cb;
    using namespace module_context;
    cb.onContinue = boost::bind(&AsyncRProcess::onContinue,
                                AsyncRProcess::shared_from_this());
diff --git a/src/cpp/session/SessionClientEvent.cpp b/src/cpp/session/SessionClientEvent.cpp
index 71dc5d1..752aed4 100644
--- a/src/cpp/session/SessionClientEvent.cpp
+++ b/src/cpp/session/SessionClientEvent.cpp
@@ -24,7 +24,7 @@
 #include <core/FileSerializer.hpp>
 #include <core/system/System.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -126,7 +126,7 @@ void ClientEvent::init(int type, const json::Value& data)
 {
    type_ = type;
    data_ = data;
-   id_ = core::system::generateUuid();
+   id_ = rscore::system::generateUuid();
 }
    
 void ClientEvent::asJsonObject(int id, json::Object* pObject) const
diff --git a/src/cpp/session/SessionClientEventQueue.cpp b/src/cpp/session/SessionClientEventQueue.cpp
index 737de28..2fa029d 100644
--- a/src/cpp/session/SessionClientEventQueue.cpp
+++ b/src/cpp/session/SessionClientEventQueue.cpp
@@ -25,7 +25,7 @@
 
 #include <r/session/RConsoleActions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
  
diff --git a/src/cpp/session/SessionClientEventService.cpp b/src/cpp/session/SessionClientEventService.cpp
index 5c4d451..a989f72 100644
--- a/src/cpp/session/SessionClientEventService.cpp
+++ b/src/cpp/session/SessionClientEventService.cpp
@@ -34,7 +34,7 @@
 
 #include "SessionClientEventQueue.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
    
@@ -64,7 +64,7 @@ Error ClientEventService::start(const std::string& clientId)
    
    // block all signals for launch of background thread (will cause it
    // to never receive signals)
-   core::system::SignalBlocker signalBlocker;
+   rscore::system::SignalBlocker signalBlocker;
    Error error = signalBlocker.blockAll();
    if (error)
       return error ;
@@ -173,7 +173,7 @@ void ClientEventService::addClientEvent(const json::Object& eventObject)
 }
 
 void ClientEventService::setClientEventResult(
-                                       core::json::JsonRpcResponse* pResponse)
+                                       rscore::json::JsonRpcResponse* pResponse)
 {
    LOCK_MUTEX(mutex_)
    {
diff --git a/src/cpp/session/SessionClientEventService.hpp b/src/cpp/session/SessionClientEventService.hpp
index 91b15e0..35249de 100644
--- a/src/cpp/session/SessionClientEventService.hpp
+++ b/src/cpp/session/SessionClientEventService.hpp
@@ -24,7 +24,7 @@
 
 #include <core/json/JsonRpc.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -44,7 +44,7 @@ private:
 public:
    // COPYING: boost::noncopyable
 
-   core::Error start(const std::string& clientId);
+   rscore::Error start(const std::string& clientId);
    void stop();
    
    void setClientId(const std::string& clientId, bool clearEvents);
@@ -57,8 +57,8 @@ private:
 
    void erasePreviouslyDeliveredEvents(int lastClientEventIdSeen);
    bool havePendingClientEvents();
-   void addClientEvent(const core::json::Object& eventObject);
-   void setClientEventResult(core::json::JsonRpcResponse* pResponse);
+   void addClientEvent(const rscore::json::Object& eventObject);
+   void setClientEventResult(rscore::json::JsonRpcResponse* pResponse);
 
   
 private:
@@ -66,7 +66,7 @@ private:
    boost::thread serviceThread_ ;
 
    std::string clientId_ ;
-   core::json::Array clientEvents_ ;
+   rscore::json::Array clientEvents_ ;
 };
    
   
diff --git a/src/cpp/session/SessionConsoleProcess.cpp b/src/cpp/session/SessionConsoleProcess.cpp
index 138380f..052ab24 100644
--- a/src/cpp/session/SessionConsoleProcess.cpp
+++ b/src/cpp/session/SessionConsoleProcess.cpp
@@ -36,7 +36,7 @@
 #include <core/system/Crypto.hpp>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace console_process {
@@ -62,7 +62,7 @@ ConsoleProcess::ConsoleProcess()
 }
 
 ConsoleProcess::ConsoleProcess(const std::string& command,
-                               const core::system::ProcessOptions& options,
+                               const rscore::system::ProcessOptions& options,
                                const std::string& caption,
                                bool dialog,
                                InteractionMode interactionMode,
@@ -78,7 +78,7 @@ ConsoleProcess::ConsoleProcess(const std::string& command,
 
 ConsoleProcess::ConsoleProcess(const std::string& program,
                                const std::vector<std::string>& args,
-                               const core::system::ProcessOptions& options,
+                               const rscore::system::ProcessOptions& options,
                                const std::string& caption,
                                bool dialog,
                                InteractionMode interactionMode,
@@ -102,7 +102,7 @@ void ConsoleProcess::commonInit()
 {
    regexInit();
 
-   handle_ = core::system::generateUuid(false);
+   handle_ = rscore::system::generateUuid(false);
 
    // always redirect stderr to stdout so output is interleaved
    options_.redirectStdErrToStdOut = true;
@@ -135,17 +135,17 @@ void ConsoleProcess::commonInit()
       }
 #else
       // request a pseudoterminal if this is an interactive console process
-      options_.pseudoterminal = core::system::Pseudoterminal(80, 1);
+      options_.pseudoterminal = rscore::system::Pseudoterminal(80, 1);
 
       // define TERM to dumb (but first make sure we have an environment
       // block to modify)
       if (!options_.environment)
       {
-         core::system::Options childEnv;
-         core::system::environment(&childEnv);
+         rscore::system::Options childEnv;
+         rscore::system::environment(&childEnv);
          options_.environment = childEnv;
       }
-      core::system::setenv(&(options_.environment.get()), "TERM", "dumb");
+      rscore::system::setenv(&(options_.environment.get()), "TERM", "dumb");
 #endif
    }
 
@@ -205,7 +205,7 @@ void ConsoleProcess::interrupt()
    interrupt_ = true;
 }
 
-bool ConsoleProcess::onContinue(core::system::ProcessOperations& ops)
+bool ConsoleProcess::onContinue(rscore::system::ProcessOperations& ops)
 {
    // full stop interrupt if requested
    if (interrupt_)
@@ -275,7 +275,7 @@ void ConsoleProcess::enqueOutputEvent(const std::string &output, bool error)
          ClientEvent(client_events::kConsoleProcessOutput, data));
 }
 
-void ConsoleProcess::onStdout(core::system::ProcessOperations& ops,
+void ConsoleProcess::onStdout(rscore::system::ProcessOperations& ops,
                               const std::string& output)
 {
    // convert line endings to posix
@@ -305,7 +305,7 @@ void ConsoleProcess::onStdout(core::system::ProcessOperations& ops,
    }
 }
 
-void ConsoleProcess::maybeConsolePrompt(core::system::ProcessOperations& ops,
+void ConsoleProcess::maybeConsolePrompt(rscore::system::ProcessOperations& ops,
                                         const std::string& output)
 {
    boost::smatch smatch;
@@ -323,7 +323,7 @@ void ConsoleProcess::maybeConsolePrompt(core::system::ProcessOperations& ops,
       handleConsolePrompt(ops, output);
 }
 
-void ConsoleProcess::handleConsolePrompt(core::system::ProcessOperations& ops,
+void ConsoleProcess::handleConsolePrompt(rscore::system::ProcessOperations& ops,
                                          const std::string& prompt)
 {
    // if there is a custom prmopt handler then give it a chance to
@@ -370,7 +370,7 @@ void ConsoleProcess::onExit(int exitCode)
    onExit_(exitCode);
 }
 
-core::json::Object ConsoleProcess::toJson() const
+rscore::json::Object ConsoleProcess::toJson() const
 {
    json::Object result;
    result["handle"] = handle_;
@@ -388,7 +388,7 @@ core::json::Object ConsoleProcess::toJson() const
 }
 
 boost::shared_ptr<ConsoleProcess> ConsoleProcess::fromJson(
-                                             core::json::Object &obj)
+                                             rscore::json::Object &obj)
 {
    boost::shared_ptr<ConsoleProcess> pProc(new ConsoleProcess());
    pProc->handle_ = obj["handle"].get_str();
@@ -425,9 +425,9 @@ boost::shared_ptr<ConsoleProcess> ConsoleProcess::fromJson(
    return pProc;
 }
 
-core::system::ProcessCallbacks ConsoleProcess::createProcessCallbacks()
+rscore::system::ProcessCallbacks ConsoleProcess::createProcessCallbacks()
 {
-   core::system::ProcessCallbacks cb;
+   rscore::system::ProcessCallbacks cb;
    cb.onContinue = boost::bind(&ConsoleProcess::onContinue, ConsoleProcess::shared_from_this(), _1);
    cb.onStdout = boost::bind(&ConsoleProcess::onStdout, ConsoleProcess::shared_from_this(), _1, _2);
    cb.onExit = boost::bind(&ConsoleProcess::onExit, ConsoleProcess::shared_from_this(), _1);
@@ -516,7 +516,7 @@ Error procWriteStdin(const json::JsonRpcRequest& request,
       {
          if (!input.interrupt)
          {
-            error = core::system::crypto::rsaPrivateDecrypt(input.text,
+            error = rscore::system::crypto::rsaPrivateDecrypt(input.text,
                                                             &input.text);
             if (error)
                return error;
@@ -537,7 +537,7 @@ Error procWriteStdin(const json::JsonRpcRequest& request,
 
 boost::shared_ptr<ConsoleProcess> ConsoleProcess::create(
       const std::string& command,
-      core::system::ProcessOptions options,
+      rscore::system::ProcessOptions options,
       const std::string& caption,
       bool dialog,
       InteractionMode interactionMode,
@@ -558,7 +558,7 @@ boost::shared_ptr<ConsoleProcess> ConsoleProcess::create(
 boost::shared_ptr<ConsoleProcess> ConsoleProcess::create(
       const std::string& program,
       const std::vector<std::string>& args,
-      core::system::ProcessOptions options,
+      rscore::system::ProcessOptions options,
       const std::string& caption,
       bool dialog,
       InteractionMode interactionMode,
@@ -693,7 +693,7 @@ bool PasswordManager::forgetOnExit(const CachedPassword& cachedPassword,
    return hasHandle(cachedPassword, cpHandle) && !cachedPassword.remember;
 }
 
-core::json::Array processesAsJson()
+rscore::json::Array processesAsJson()
 {
    json::Array procInfos;
    for (ProcTable::const_iterator it = s_procs.begin();
@@ -705,7 +705,7 @@ core::json::Array processesAsJson()
    return procInfos;
 }
 
-void onSuspend(core::Settings* pSettings)
+void onSuspend(rscore::Settings* pSettings)
 {
    json::Array array;
    for (ProcTable::const_iterator it = s_procs.begin();
@@ -720,7 +720,7 @@ void onSuspend(core::Settings* pSettings)
    pSettings->set("console_procs", ostr.str());
 }
 
-void onResume(const core::Settings& settings)
+void onResume(const rscore::Settings& settings)
 {
    std::string strVal = settings.get("console_procs");
    if (strVal.empty())
diff --git a/src/cpp/session/SessionContentUrls.cpp b/src/cpp/session/SessionContentUrls.cpp
index 3f356bb..0a41712 100644
--- a/src/cpp/session/SessionContentUrls.cpp
+++ b/src/cpp/session/SessionContentUrls.cpp
@@ -35,7 +35,7 @@ extern "C" const char *locale2charset(const char *);
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace content_urls {
@@ -63,7 +63,7 @@ std::string buildContentUrl(const std::string& title,
 
 Error contentFileInfo(const std::string& contentUrl,
                       std::string* pTitle,
-                      core::FilePath* pFilePath)
+                      rscore::FilePath* pFilePath)
 {
    // extract and parse query string
    std::string queryString;
@@ -102,7 +102,7 @@ Error contentFileInfo(const std::string& contentUrl,
 std::string provision(const std::string& title, const FilePath& filePath)
 {
    // calculate content path
-   std::string contentFile = core::system::generateUuid(false) +
+   std::string contentFile = rscore::system::generateUuid(false) +
                              filePath.extension();
    FilePath contentPath = contentUrlPath().complete(contentFile);
 
@@ -120,7 +120,7 @@ std::string provision(const std::string& title,
                       const std::string& extension)
 {
    // calculate content path
-   std::string contentFile = core::system::generateUuid(false) + extension;
+   std::string contentFile = rscore::system::generateUuid(false) + extension;
    FilePath contentPath = contentUrlPath().complete(contentFile);
 
    // write the file
@@ -158,7 +158,7 @@ void handleContentRequest(const http::Request& request, http::Response* pRespons
       // If the content looks like valid UTF-8, assume it is. Otherwise, assume
       // it's the system encoding.
       std::string contents;
-      error = core::readStringFromFile(contentFilePath, &contents);
+      error = rscore::readStringFromFile(contentFilePath, &contents);
       if (!error)
       {
          for (std::string::iterator pos = contents.begin(); pos != contents.end(); )
diff --git a/src/cpp/session/SessionMain.cpp b/src/cpp/session/SessionMain.cpp
index b4454f8..0641089 100644
--- a/src/cpp/session/SessionMain.cpp
+++ b/src/cpp/session/SessionMain.cpp
@@ -150,7 +150,7 @@ extern "C" const char *locale2charset(const char *);
 
 #include "session-config.h"
 
-using namespace core; 
+using namespace rscore; 
 using namespace session;
 using namespace session::client_events;
 
@@ -168,7 +168,7 @@ http::UriHandlers s_uriHandlers;
 http::UriHandlerFunction s_defaultUriHandler;
 
 // json rpc methods
-core::json::JsonRpcAsyncMethods s_jsonRpcMethods;
+rscore::json::JsonRpcAsyncMethods s_jsonRpcMethods;
    
 // R browseUrl handlers
 std::vector<module_context::RBrowseUrlHandler> s_rBrowseUrlHandlers;
@@ -424,7 +424,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
    if (options.programMode() == kSessionProgramModeServer)
    {
       std::string referer = ptrConnection->request().headerValue("referer");
-      core::system::setenv("RSTUDIO_HTTP_REFERER", referer);
+      rscore::system::setenv("RSTUDIO_HTTP_REFERER", referer);
    }
 
    // prepare session info 
@@ -600,10 +600,10 @@ void handleClientInit(const boost::function<void()>& initFunction,
                               r::session::consoleHistory().capacity();
 
    sessionInfo["disable_packages"] =
-           !core::system::getenv("RSTUDIO_DISABLE_PACKAGES").empty();
+           !rscore::system::getenv("RSTUDIO_DISABLE_PACKAGES").empty();
 
    sessionInfo["disable_check_for_updates"] =
-          !core::system::getenv("RSTUDIO_DISABLE_CHECK_FOR_UPDATES").empty();
+          !rscore::system::getenv("RSTUDIO_DISABLE_CHECK_FOR_UPDATES").empty();
 
    sessionInfo["allow_vcs_exe_edit"] = options.allowVcsExecutableEdit();
    sessionInfo["allow_cran_repos_edit"] = options.allowCRANReposEdit();
@@ -657,7 +657,7 @@ enum ConnectionType
 
 void endHandleRpcRequestDirect(boost::shared_ptr<HttpConnection> ptrConnection,
                          boost::posix_time::ptime executeStartTime,
-                         const core::Error& executeError,
+                         const rscore::Error& executeError,
                          json::JsonRpcResponse* pJsonRpcResponse)
 {
    // return error or result then continue waiting for requests
@@ -694,7 +694,7 @@ void endHandleRpcRequestDirect(boost::shared_ptr<HttpConnection> ptrConnection,
 
 void endHandleRpcRequestIndirect(
       const std::string& asyncHandle,
-      const core::Error& executeError,
+      const rscore::Error& executeError,
       json::JsonRpcResponse* pJsonRpcResponse)
 {
    json::JsonRpcResponse temp;
@@ -713,7 +713,7 @@ void endHandleRpcRequestIndirect(
    module_context::enqueClientEvent(evt);
 }
 
-void handleRpcRequest(const core::json::JsonRpcRequest& request,
+void handleRpcRequest(const rscore::json::JsonRpcRequest& request,
                       boost::shared_ptr<HttpConnection> ptrConnection,
                       ConnectionType connectionType)
 {
@@ -743,7 +743,7 @@ void handleRpcRequest(const core::json::JsonRpcRequest& request,
       else
       {
          // indirect return (asyncHandle style)
-         std::string handle = core::system::generateUuid(true);
+         std::string handle = rscore::system::generateUuid(true);
          json::JsonRpcResponse response;
          response.setAsyncHandle(handle);
          response.setField(kEventsPending, "false");
@@ -1213,7 +1213,7 @@ void processDesktopGuiEvents()
 bool waitForMethod(const std::string& method,
                    const boost::function<void()>& initFunction,
                    const boost::function<bool()>& allowSuspend,
-                   core::json::JsonRpcRequest* pRequest)
+                   rscore::json::JsonRpcRequest* pRequest)
 {
    if (s_wasForked)
    {
@@ -1326,7 +1326,7 @@ bool waitForMethod(const std::string& method,
 bool waitForMethod(const std::string& method,
                    const ClientEvent& initEvent,
                    const boost::function<bool()>& allowSuspend,
-                   core::json::JsonRpcRequest* pRequest)
+                   rscore::json::JsonRpcRequest* pRequest)
 {
    return waitForMethod(method,
                         boost::bind(module_context::enqueClientEvent,
@@ -1397,7 +1397,7 @@ Error extractConsoleInput(const json::JsonRpcRequest& request)
 // allow console_input requests to come in when we aren't explicitly waiting
 // on them (i.e. waitForMethod("console_input")). place them into into a buffer
 // which is then checked by rConsoleRead prior to it calling waitForMethod
-Error bufferConsoleInput(const core::json::JsonRpcRequest& request,
+Error bufferConsoleInput(const rscore::json::JsonRpcRequest& request,
                          json::JsonRpcResponse* pResponse)
 {
    // extract the input
@@ -1412,7 +1412,7 @@ void doSuspendForRestart(const r::session::RSuspendOptions& options)
    r::session::suspendForRestart(options);
 }
 
-Error suspendForRestart(const core::json::JsonRpcRequest& request,
+Error suspendForRestart(const rscore::json::JsonRpcRequest& request,
                         json::JsonRpcResponse* pResponse)
 {
    r::session::RSuspendOptions options;
@@ -1429,7 +1429,7 @@ Error suspendForRestart(const core::json::JsonRpcRequest& request,
 }
 
 
-Error ping(const core::json::JsonRpcRequest& request,
+Error ping(const rscore::json::JsonRpcRequest& request,
            json::JsonRpcResponse* pResponse)
 {
    return Success();
@@ -1474,7 +1474,7 @@ void registerGwtHandlers()
 Error registerSignalHandlers()
 {
    using boost::bind;
-   using namespace core::system;
+   using namespace rscore::system;
 
    // USR1 and USR2: perform suspend in server mode
    if (session::options().programMode() == kSessionProgramModeServer)
@@ -1513,9 +1513,9 @@ Error runPreflightScript()
             // run the script (ignore errors and continue no matter what
             // the outcome of the script is)
             std::string script = preflightScriptPath.absolutePath();
-            core::system::ProcessResult result;
+            rscore::system::ProcessResult result;
             Error error = runCommand(script,
-                                     core::system::ProcessOptions(),
+                                     rscore::system::ProcessOptions(),
                                      &result);
             if (error)
             {
@@ -1549,7 +1549,7 @@ Error rInit(const r::session::RInitInfo& rInitInfo)
 
    // execute core initialization functions
    using boost::bind;
-   using namespace core::system;
+   using namespace rscore::system;
    using namespace session::module_context;
    ExecBlock initialize ;
    initialize.addFunctions()
@@ -1842,7 +1842,7 @@ int rEditFile(const std::string& file)
    // read file contents
    FilePath filePath(file);
    std::string fileContents;
-   Error readError = core::readStringFromFile(filePath, &fileContents);
+   Error readError = rscore::readStringFromFile(filePath, &fileContents);
    if (readError)
    {
       LOG_ERROR(readError);
@@ -1883,7 +1883,7 @@ int rEditFile(const std::string& file)
       
       // write the content back to the file (append newline expected by R) 
       editedFileContents += "\n";
-      Error writeError = core::writeStringToFile(filePath, editedFileContents);
+      Error writeError = rscore::writeStringToFile(filePath, editedFileContents);
       if (writeError)
       {
          LOG_ERROR(writeError);
@@ -2070,7 +2070,7 @@ void rBrowseURL(const std::string& url)
    session::clientEventQueue().add(browseUrlEvent(url));
 }
    
-void rBrowseFile(const core::FilePath& filePath)
+void rBrowseFile(const rscore::FilePath& filePath)
 {
    // see if any of our handlers want to take it
    for (std::vector<module_context::RBrowseFileHandler>::const_iterator 
@@ -2189,7 +2189,7 @@ void rSuicide(const std::string& message)
 
 // terminate all children of the provided process supervisor
 // and then wait a brief period to attempt to reap the child
-void terminateAllChildren(core::system::ProcessSupervisor* pSupervisor,
+void terminateAllChildren(rscore::system::ProcessSupervisor* pSupervisor,
                           const ErrorLocation& location)
 {
    // send kill signal
@@ -2199,7 +2199,7 @@ void terminateAllChildren(core::system::ProcessSupervisor* pSupervisor,
    if (!pSupervisor->wait(boost::posix_time::milliseconds(10),
                           boost::posix_time::milliseconds(1000)))
    {
-      core::log::logWarningMessage(
+      rscore::log::logWarningMessage(
             "Process supervisor did not terminate within 1 second",
             location);
    }
@@ -2339,7 +2339,7 @@ void ensurePublicFolder()
    }
 }
 
-void ensureRLibsUser(const core::FilePath& userHomePath,
+void ensureRLibsUser(const rscore::FilePath& userHomePath,
                      const std::string& rLibsUser)
 {
    FilePath rLibsUserPath = FilePath::resolveAliasedPath(rLibsUser,
@@ -2376,7 +2376,7 @@ void detectParentTermination()
    if (result == ParentTerminationAbnormal)
    {
       LOG_ERROR_MESSAGE("Parent terminated");
-      core::system::abort();
+      rscore::system::abort();
    }
    else if (result == ParentTerminationNormal)
    {
@@ -2571,7 +2571,7 @@ Error registerLocalUriHandler(const std::string& name,
 
 
 Error registerAsyncRpcMethod(const std::string& name,
-                             const core::json::JsonRpcAsyncFunction& function)
+                             const rscore::json::JsonRpcAsyncFunction& function)
 {
    s_jsonRpcMethods.insert(
          std::make_pair(name, std::make_pair(false, function)));
@@ -2579,7 +2579,7 @@ Error registerAsyncRpcMethod(const std::string& name,
 }
 
 Error registerRpcMethod(const std::string& name,
-                        const core::json::JsonRpcFunction& function)
+                        const rscore::json::JsonRpcFunction& function)
 {
    s_jsonRpcMethods.insert(
          std::make_pair(name,
@@ -2678,7 +2678,7 @@ namespace {
 
 bool registeredWaitForMethod(const std::string& method,
                              const ClientEvent& event,
-                             core::json::JsonRpcRequest* pRequest)
+                             rscore::json::JsonRpcRequest* pRequest)
 {
    // enque the event which notifies the client we want input
    module_context::enqueClientEvent(event);
@@ -2704,22 +2704,22 @@ WaitForMethodFunction registerWaitForMethod(const std::string& methodName)
 
 namespace {
 
-int sessionExitFailure(const core::Error& error,
-                       const core::ErrorLocation& location)
+int sessionExitFailure(const rscore::Error& error,
+                       const rscore::ErrorLocation& location)
 {
    if (!error.expected())
-      core::log::logError(error, location);
+      rscore::log::logError(error, location);
 
    return EXIT_FAILURE;
 }
 
 std::string ctypeEnvName()
 {
-   if (!core::system::getenv("LC_ALL").empty())
+   if (!rscore::system::getenv("LC_ALL").empty())
       return "LC_ALL";
-   if (!core::system::getenv("LC_CTYPE").empty())
+   if (!rscore::system::getenv("LC_CTYPE").empty())
       return "LC_CTYPE";
-   if (!core::system::getenv("LANG").empty())
+   if (!rscore::system::getenv("LANG").empty())
       return "LANG";
    return "LC_CTYPE";
 }
@@ -2745,7 +2745,7 @@ bool ensureUtf8Charset()
    return true;
 #else
    std::string name = ctypeEnvName();
-   std::string ctype = core::system::getenv(name);
+   std::string ctype = rscore::system::getenv(name);
 
    if (boost::regex_search(ctype, boost::regex("UTF-8$")))
       return true;
@@ -2777,7 +2777,7 @@ bool ensureUtf8Charset()
    {
       if (setlocale(LC_CTYPE, newCType.c_str()))
       {
-         core::system::setenv(name, newCType);
+         rscore::system::setenv(name, newCType);
          setlocale(LC_CTYPE, "");
          return true;
       }
@@ -2799,11 +2799,11 @@ int main (int argc, char * const argv[])
       // initialize log so we capture all errors including ones which occur
       // reading the config file (if we are in desktop mode then the log
       // will get re-initialized below)
-      initializeSystemLog("rsession-" + core::system::username(),
-                          core::system::kLogLevelWarning);
+      initializeSystemLog("rsession-" + rscore::system::username(),
+                          rscore::system::kLogLevelWarning);
 
       // ignore SIGPIPE
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
@@ -2821,7 +2821,7 @@ int main (int argc, char * const argv[])
          return status.exitCode() ;
 
       // reflect stderr logging
-      core::system::setLogToStderr(options.logStderr());
+      rscore::system::setLogToStderr(options.logStderr());
 
       // initialize monitor
       monitor::initializeMonitorClient(kMonitorSocketPath,
@@ -2830,7 +2830,7 @@ int main (int argc, char * const argv[])
       // register monitor log writer (but not in standalone mode)
       if (!options.standalone())
       {
-         core::system::addLogWriter(monitor::client().createLogWriter(
+         rscore::system::addLogWriter(monitor::client().createLogWriter(
                                                 options.programIdentity()));
       }
 
@@ -2844,12 +2844,12 @@ int main (int argc, char * const argv[])
          if (options.verifyInstallation())
          {
             initializeStderrLog(options.programIdentity(),
-                                core::system::kLogLevelWarning);
+                                rscore::system::kLogLevelWarning);
          }
          else
          {
             initializeLog(options.programIdentity(),
-                          core::system::kLogLevelWarning,
+                          rscore::system::kLogLevelWarning,
                           options.userLogPath());
          }
       }
@@ -2864,27 +2864,27 @@ int main (int argc, char * const argv[])
 
       // set the rstudio environment variable so code can check for
       // whether rstudio is running
-      core::system::setenv("RSTUDIO", "1");
+      rscore::system::setenv("RSTUDIO", "1");
 
       // set the rstudio user identity environment variable (can differ from
       // username in debug configurations). this is provided so that 
       // rpostback knows what local stream to connect back to
-      core::system::setenv(kRStudioUserIdentity, options.userIdentity());
+      rscore::system::setenv(kRStudioUserIdentity, options.userIdentity());
       if (desktopMode)
       {
          // do the same for port number, for rpostback in rdesktop configs
-         core::system::setenv(kRSessionPortNumber, options.wwwPort());
+         rscore::system::setenv(kRSessionPortNumber, options.wwwPort());
       }
 
       // set the standalone port if we are running in standalone mode
       if (options.standalone())
       {
-         core::system::setenv(kRSessionStandalonePortNumber, options.wwwPort());
+         rscore::system::setenv(kRSessionStandalonePortNumber, options.wwwPort());
       }
            
       // ensure we aren't being started as a low (priviliged) account
       if (serverMode &&
-          core::system::currentUserIsPrivilleged(options.minimumUserId()))
+          rscore::system::currentUserIsPrivilleged(options.minimumUserId()))
       {
          Error error = systemError(boost::system::errc::permission_denied,
                                    ERROR_LOCATION);
@@ -2894,14 +2894,14 @@ int main (int argc, char * const argv[])
 #ifdef RSTUDIO_SERVER
       if (serverMode)
       {
-         Error error = core::system::crypto::rsaInit();
+         Error error = rscore::system::crypto::rsaInit();
          if (error)
             LOG_ERROR(error);
       }
 #endif
 
       // start the file monitor
-      core::system::file_monitor::initialize();
+      rscore::system::file_monitor::initialize();
 
       // initialize client event queue. this must be done very early
       // in main so that any other code which needs to enque an event
@@ -2910,13 +2910,13 @@ int main (int argc, char * const argv[])
 
       // detect parent termination
       if (desktopMode)
-         core::thread::safeLaunchThread(detectParentTermination);
+         rscore::thread::safeLaunchThread(detectParentTermination);
 
       // set the rpostback absolute path
       FilePath rpostback = options.rpostbackPath()
                            .parent().parent()
                            .childPath("rpostback");
-      core::system::setenv(
+      rscore::system::setenv(
             "RS_RPOSTBACK_PATH",
             string_utils::utf8ToSystem(rpostback.absolutePath()));
 
@@ -2978,9 +2978,9 @@ int main (int argc, char * const argv[])
 
       // install home and doc dir overrides if requested (for debugger mode)
       if (!options.rHomeDirOverride().empty())
-         core::system::setenv("R_HOME", options.rHomeDirOverride());
+         rscore::system::setenv("R_HOME", options.rHomeDirOverride());
       if (!options.rDocDirOverride().empty())
-         core::system::setenv("R_DOC_DIR", options.rDocDirOverride());
+         rscore::system::setenv("R_DOC_DIR", options.rDocDirOverride());
 
       // r options
       r::session::ROptions rOptions ;
diff --git a/src/cpp/session/SessionMainOverlay.cpp b/src/cpp/session/SessionMainOverlay.cpp
index 698061a..da17fa0 100644
--- a/src/cpp/session/SessionMainOverlay.cpp
+++ b/src/cpp/session/SessionMainOverlay.cpp
@@ -15,7 +15,7 @@
 
 #include <core/Error.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace overlay {
diff --git a/src/cpp/session/SessionModuleContext.cpp b/src/cpp/session/SessionModuleContext.cpp
index d7176c3..15451eb 100644
--- a/src/cpp/session/SessionModuleContext.cpp
+++ b/src/cpp/session/SessionModuleContext.cpp
@@ -72,7 +72,7 @@
 
 #include "session-config.h"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {   
 namespace module_context {
@@ -199,7 +199,7 @@ SEXP rs_ensureFileHidden(SEXP fileSEXP)
    if (!file.empty())
    {
       FilePath filePath = module_context::resolveAliasedPath(file);
-      Error error = core::system::makeFileHidden(filePath);
+      Error error = rscore::system::makeFileHidden(filePath);
       if (error)
          LOG_ERROR(error);
    }
@@ -298,9 +298,9 @@ bool monitoredScratchFilter(const FileInfo& fileInfo)
 }
 
 
-void onFilesChanged(const std::vector<core::system::FileChangeEvent>& changes)
+void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& changes)
 {
-   BOOST_FOREACH(const core::system::FileChangeEvent& fileChange, changes)
+   BOOST_FOREACH(const rscore::system::FileChangeEvent& fileChange, changes)
    {
       FilePath changedFilePath(fileChange.fileInfo().absolutePath());
       for (MonitoredScratchPaths::const_iterator
@@ -321,7 +321,7 @@ void onFilesChanged(const std::vector<core::system::FileChangeEvent>& changes)
 boost::shared_ptr<tree<FileInfo> > monitoredPathTree()
 {
    boost::shared_ptr<tree<FileInfo> > pMonitoredTree(new tree<FileInfo>());
-   core::system::FileScannerOptions options;
+   rscore::system::FileScannerOptions options;
    options.recursive = true;
    options.filter = monitoredScratchFilter;
    Error scanError = scanFiles(FileInfo(monitoredParentPath()),
@@ -336,9 +336,9 @@ boost::shared_ptr<tree<FileInfo> > monitoredPathTree()
 bool scanForMonitoredPathChanges(boost::shared_ptr<tree<FileInfo> > pPrevTree)
 {
    // check for changes
-   std::vector<core::system::FileChangeEvent> changes;
+   std::vector<rscore::system::FileChangeEvent> changes;
    boost::shared_ptr<tree<FileInfo> > pCurrentTree = monitoredPathTree();
-   core::system::collectFileChangeEvents(pPrevTree->begin(),
+   rscore::system::collectFileChangeEvents(pPrevTree->begin(),
                                          pPrevTree->end(),
                                          pCurrentTree->begin(),
                                          pCurrentTree->end(),
@@ -373,11 +373,11 @@ void onMonitoringError(const Error& error)
 void initializeMonitoredUserScratchDir()
 {
    // setup callbacks and register
-   core::system::file_monitor::Callbacks cb;
+   rscore::system::file_monitor::Callbacks cb;
    cb.onRegistrationError = onMonitoringError;
    cb.onMonitoringError = onMonitoringError;
    cb.onFilesChanged = onFilesChanged;
-   core::system::file_monitor::registerMonitor(
+   rscore::system::file_monitor::registerMonitor(
                                     monitoredParentPath(),
                                     true,
                                     monitoredScratchFilter,
@@ -685,7 +685,7 @@ void onBackgroundProcessing(bool isIdle)
    processSupervisor().poll();
 
    // check for file monitor changes
-   core::system::file_monitor::checkForChanges();
+   rscore::system::file_monitor::checkForChanges();
 
    // fire event
    events().onBackgroundProcessing(isIdle);
@@ -869,14 +869,14 @@ bool isTextFile(const FilePath& targetPath)
       return true;
 
 #ifndef _WIN32
-   core::shell_utils::ShellCommand cmd("file");
+   rscore::shell_utils::ShellCommand cmd("file");
    cmd << "--dereference";
    cmd << "--mime";
    cmd << "--brief";
    cmd << targetPath;
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(cmd,
-                                          core::system::ProcessOptions(),
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(cmd,
+                                          rscore::system::ProcessOptions(),
                                           &result);
    if (error)
    {
@@ -898,7 +898,7 @@ bool isTextFile(const FilePath& targetPath)
 
    // read contents of file
    std::string contents;
-   Error error = core::readStringFromFile(targetPath, &contents);
+   Error error = rscore::readStringFromFile(targetPath, &contents);
    if (error)
    {
       LOG_ERROR(error);
@@ -915,7 +915,7 @@ bool isTextFile(const FilePath& targetPath)
 
 }
 
-Error rBinDir(core::FilePath* pRBinDirPath)
+Error rBinDir(rscore::FilePath* pRBinDirPath)
 {
    std::string rHomeBin;
    r::exec::RFunction rHomeBinFunc("R.home", "bin");
@@ -943,7 +943,7 @@ Error rScriptPath(FilePath* pRScriptPath)
    return Success();
 }
 
-shell_utils::ShellCommand rCmd(const core::FilePath& rBinDir)
+shell_utils::ShellCommand rCmd(const rscore::FilePath& rBinDir)
 {
 #ifdef _WIN32
       return shell_utils::ShellCommand(rBinDir.childPath("Rcmd.exe"));
@@ -1041,14 +1041,14 @@ Error installPackage(const std::string& pkgPath, const std::string& libPath)
       return error;
 
    // setup options and command
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 #ifdef _WIN32
    shell_utils::ShellCommand installCommand(rBinDir.childPath("R.exe"));
 #else
    shell_utils::ShellCommand installCommand(rBinDir.childPath("R"));
 #endif
 
-   installCommand << core::shell_utils::EscapeFilesOnly;
+   installCommand << rscore::shell_utils::EscapeFilesOnly;
 
    // for packrat projects we execute the profile and set the working
    // directory to the project directory; for other contexts we just
@@ -1060,11 +1060,11 @@ Error installPackage(const std::string& pkgPath, const std::string& libPath)
    else
    {
       installCommand << "--vanilla";
-      core::system::Options env;
-      core::system::environment(&env);
+      rscore::system::Options env;
+      rscore::system::environment(&env);
       std::string libPaths = libPathsString();
       if (!libPaths.empty())
-         core::system::setenv(&env, "R_LIBS", libPathsString());
+         rscore::system::setenv(&env, "R_LIBS", libPathsString());
       options.environment = env;
    }
 
@@ -1079,10 +1079,10 @@ Error installPackage(const std::string& pkgPath, const std::string& libPath)
 
    // add pakage path
    installCommand << "\"" + pkgPath + "\"";
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
 
    // run the command
-   error = core::system::runCommand(installCommand,
+   error = rscore::system::runCommand(installCommand,
                                     options,
                                     &result);
 
@@ -1100,7 +1100,7 @@ Error installPackage(const std::string& pkgPath, const std::string& libPath)
 }
 
 
-std::string packageNameForSourceFile(const core::FilePath& sourceFilePath)
+std::string packageNameForSourceFile(const rscore::FilePath& sourceFilePath)
 {
    // check whether we are in a package
    FilePath sourceDir = sourceFilePath.parent();
@@ -1184,7 +1184,7 @@ Error sourceModuleRFile(const std::string& rSourceFile)
 
 Error sourceModuleRFileWithResult(const std::string& rSourceFile,
                                   const FilePath& workingDir,
-                                  core::system::ProcessResult* pResult)
+                                  rscore::system::ProcessResult* pResult)
 {
    // R binary
    FilePath rProgramPath;
@@ -1203,27 +1203,27 @@ Error sourceModuleRFileWithResult(const std::string& rSourceFile,
    boost::format fmt("source('%1%')");
    FilePath modulesPath = session::options().modulesRSourcePath();
    FilePath srcFilePath = modulesPath.complete(rSourceFile);
-   std::string srcPath = core::string_utils::utf8ToSystem(
+   std::string srcPath = rscore::string_utils::utf8ToSystem(
                                                 srcFilePath.absolutePath());
    std::string escapedSrcPath = string_utils::jsLiteralEscape(srcPath);
    std::string cmd = boost::str(fmt % escapedSrcPath);
    args.push_back(cmd);
 
    // options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.terminateChildren = true;
    options.workingDir = workingDir;
 
    // allow child process to inherit our R_LIBS
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
    std::string libPaths = libPathsString();
    if (!libPaths.empty())
-      core::system::setenv(&childEnv, "R_LIBS", libPaths);
+      rscore::system::setenv(&childEnv, "R_LIBS", libPaths);
    options.environment = childEnv;
 
    // run the child
-   return core::system::runProgram(rBin, args, "", options, pResult);
+   return rscore::system::runProgram(rBin, args, "", options, pResult);
 }
 
       
@@ -1254,10 +1254,10 @@ bool isRScriptInPackageBuildTarget(const FilePath &filePath)
    }
 }
 
-bool fileListingFilter(const core::FileInfo& fileInfo)
+bool fileListingFilter(const rscore::FileInfo& fileInfo)
 {
    // check extension for special file types which are always visible
-   core::FilePath filePath(fileInfo.absolutePath());
+   rscore::FilePath filePath(fileInfo.absolutePath());
    std::string ext = filePath.extensionLowerCase();
    std::string name = filePath.filename();
    if (ext == ".rprofile" ||
@@ -1287,7 +1287,7 @@ bool fileListingFilter(const core::FileInfo& fileInfo)
 namespace {
 // enque file changed event
 void enqueFileChangedEvent(
-      const core::system::FileChangeEvent& event,
+      const rscore::system::FileChangeEvent& event,
       boost::shared_ptr<modules::source_control::FileDecorationContext> pCtx)
 {
    // create file change object
@@ -1306,7 +1306,7 @@ void enqueFileChangedEvent(
 }
 } // namespace
 
-void enqueFileChangedEvent(const core::system::FileChangeEvent &event)
+void enqueFileChangedEvent(const rscore::system::FileChangeEvent &event)
 {
    FilePath filePath = FilePath(event.fileInfo().absolutePath());
 
@@ -1317,8 +1317,8 @@ void enqueFileChangedEvent(const core::system::FileChangeEvent &event)
    enqueFileChangedEvent(event, pCtx);
 }
 
-void enqueFileChangedEvents(const core::FilePath& vcsStatusRoot,
-                            const std::vector<core::system::FileChangeEvent>& events)
+void enqueFileChangedEvents(const rscore::FilePath& vcsStatusRoot,
+                            const std::vector<rscore::system::FileChangeEvent>& events)
 {
    using namespace modules::source_control;
 
@@ -1327,7 +1327,7 @@ void enqueFileChangedEvents(const core::FilePath& vcsStatusRoot,
 
    // try to find the common parent of the events
    FilePath commonParentPath = FilePath(events.front().fileInfo().absolutePath()).parent();
-   BOOST_FOREACH(const core::system::FileChangeEvent& event, events)
+   BOOST_FOREACH(const rscore::system::FileChangeEvent& event, events)
    {
       // if not within the common parent then revert to the vcs status root
       if (!FilePath(event.fileInfo().absolutePath()).isWithin(commonParentPath))
@@ -1342,7 +1342,7 @@ void enqueFileChangedEvents(const core::FilePath& vcsStatusRoot,
                                   fileDecorationContext(commonParentPath);
 
    // fire client events as necessary
-   BOOST_FOREACH(const core::system::FileChangeEvent& event, events)
+   BOOST_FOREACH(const rscore::system::FileChangeEvent& event, events)
    {
       enqueFileChangedEvent(event, pCtx);
    }
@@ -1432,7 +1432,7 @@ void showFile(const FilePath& filePath, const std::string& window)
    }
 }
 
-std::string createFileUrl(const core::FilePath& filePath)
+std::string createFileUrl(const rscore::FilePath& filePath)
 {
     // determine url based on whether this is in ~ or not
     std::string url ;
@@ -1451,7 +1451,7 @@ std::string createFileUrl(const core::FilePath& filePath)
 }
 
 
-void showContent(const std::string& title, const core::FilePath& filePath)
+void showContent(const std::string& title, const rscore::FilePath& filePath)
 {
    // first provision a content url
    std::string contentUrl = content_urls::provision(title, filePath);
@@ -1559,9 +1559,9 @@ Events& events()
 }
 
 
-core::system::ProcessSupervisor& processSupervisor()
+rscore::system::ProcessSupervisor& processSupervisor()
 {
-   static core::system::ProcessSupervisor instance;
+   static rscore::system::ProcessSupervisor instance;
    return instance;
 }
 
@@ -1611,7 +1611,7 @@ void beginRpcHandler(json::JsonRpcFunction function,
 }
 } // anonymous namespace
 
-core::Error executeAsync(const json::JsonRpcFunction& function,
+rscore::Error executeAsync(const json::JsonRpcFunction& function,
                          const json::JsonRpcRequest& request,
                          json::JsonRpcResponse* pResponse)
 {
@@ -1619,8 +1619,8 @@ core::Error executeAsync(const json::JsonRpcFunction& function,
    // identifies this invocation. In the meantime, kick off the actual
    // operation on a new thread.
 
-   std::string handle = core::system::generateUuid(true);
-   core::thread::safeLaunchThread(bind(beginRpcHandler,
+   std::string handle = rscore::system::generateUuid(true);
+   rscore::thread::safeLaunchThread(bind(beginRpcHandler,
                                        function,
                                        request,
                                        handle));
@@ -1628,7 +1628,7 @@ core::Error executeAsync(const json::JsonRpcFunction& function,
    return Success();
 }
 
-core::json::Object compileOutputAsJson(const CompileOutput& compileOutput)
+rscore::json::Object compileOutputAsJson(const CompileOutput& compileOutput)
 {
    json::Object compileOutputJson;
    compileOutputJson["type"] = compileOutput.type;
@@ -1645,7 +1645,7 @@ std::string CRANReposURL()
    return url;
 }
 
-shell_utils::ShellCommand RCommand::buildRCmd(const core::FilePath& rBinDir)
+shell_utils::ShellCommand RCommand::buildRCmd(const rscore::FilePath& rBinDir)
 {
 #if defined(_WIN32)
    shell_utils::ShellCommand rCmd(rBinDir.childPath("Rcmd.exe"));
@@ -1656,8 +1656,8 @@ shell_utils::ShellCommand RCommand::buildRCmd(const core::FilePath& rBinDir)
    return rCmd;
 }
 
-core::Error recursiveCopyDirectory(const core::FilePath& fromDir,
-                                   const core::FilePath& toDir)
+rscore::Error recursiveCopyDirectory(const rscore::FilePath& fromDir,
+                                   const rscore::FilePath& toDir)
 {
    using namespace string_utils;
    r::exec::RFunction fileCopy("file.copy");
diff --git a/src/cpp/session/SessionModuleContextInternal.hpp b/src/cpp/session/SessionModuleContextInternal.hpp
index 1a0e68d..384630e 100644
--- a/src/cpp/session/SessionModuleContextInternal.hpp
+++ b/src/cpp/session/SessionModuleContextInternal.hpp
@@ -18,7 +18,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    class Settings;
@@ -34,19 +34,19 @@ namespace session {
 namespace module_context {
  
 // initialize
-core::Error initialize();
+rscore::Error initialize();
       
 // suspend and resume
 
 void onSuspended(const r::session::RSuspendOptions& options,
-                 core::Settings* pPersistentState);
-void onResumed(const core::Settings& persistentState);
+                 rscore::Settings* pPersistentState);
+void onResumed(const rscore::Settings& persistentState);
 
 // notify of backgound processing
 void onBackgroundProcessing(bool isIdle);
 
 // source diagnostics
-core::FilePath sourceDiagnostics();
+rscore::FilePath sourceDiagnostics();
 
 } // namespace module_context
 } // namespace session
diff --git a/src/cpp/session/SessionOptions.cpp b/src/cpp/session/SessionOptions.cpp
index 68799a4..093de71 100644
--- a/src/cpp/session/SessionOptions.cpp
+++ b/src/cpp/session/SessionOptions.cpp
@@ -37,7 +37,7 @@
 
 #include "session-config.h"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 
@@ -53,17 +53,17 @@ Options& options()
    return instance ;
 }
    
-core::ProgramStatus Options::read(int argc, char * const argv[])
+rscore::ProgramStatus Options::read(int argc, char * const argv[])
 {
    using namespace boost::program_options ;
    
    // get the shared secret
-   monitorSharedSecret_ = core::system::getenv(kMonitorSharedSecretEnvVar);
-   core::system::unsetenv(kMonitorSharedSecretEnvVar);
+   monitorSharedSecret_ = rscore::system::getenv(kMonitorSharedSecretEnvVar);
+   rscore::system::unsetenv(kMonitorSharedSecretEnvVar);
 
    // compute the resource path
    FilePath resourcePath;
-   Error error = core::system::installPath("..", argv[0], &resourcePath);
+   Error error = rscore::system::installPath("..", argv[0], &resourcePath);
    if (error)
    {
       LOG_ERROR_MESSAGE("Unable to determine install path: "+error.summary());
@@ -289,7 +289,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
         "Path to libclang builtin headers");
 
    // user options (default user identity to current username)
-   std::string currentUsername = core::system::username();
+   std::string currentUsername = rscore::system::username();
    options_description user("user") ;
    user.add_options()
       (kUserIdentitySessionOption "," kUserIdentitySessionOptionShort,
@@ -307,7 +307,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
    FilePath defaultConfigPath("/etc/rstudio/rsession.conf");
    std::string configFile = defaultConfigPath.exists() ?
                                  defaultConfigPath.absolutePath() : "";
-   core::program_options::OptionsDescription optionsDesc("rsession",
+   rscore::program_options::OptionsDescription optionsDesc("rsession",
                                                          configFile);
 
    optionsDesc.commandLine.add(verify);
@@ -338,7 +338,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
    optionsDesc.configFile.add(overlay);
 
    // read configuration
-   ProgramStatus status = core::program_options::read(optionsDesc, argc,argv);
+   ProgramStatus status = rscore::program_options::read(optionsDesc, argc,argv);
    if (status.exit())
       return status;
    
@@ -376,7 +376,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
             LOG_ERROR(error);
             return ProgramStatus::exitFailure();
          }
-         core::system::setenv("R_USER", verifyInstallationHomeDir_);
+         rscore::system::setenv("R_USER", verifyInstallationHomeDir_);
       }
    }
 
@@ -393,7 +393,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
    // set HOME if we are in standalone mode (this enables us to reflect
    // R_USER back into HOME on Linux)
    if (standalone())
-      core::system::setenv("HOME", userHomePath_);
+      rscore::system::setenv("HOME", userHomePath_);
 
    // session timeout seconds is always -1 in desktop mode
    if (programMode_ == kSessionProgramModeDesktop)
@@ -450,7 +450,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
    resolveRsclangPath(resourcePath, &libclangPath_);
 
    // shared secret with parent
-   secret_ = core::system::getenv("RS_SHARED_SECRET");
+   secret_ = rscore::system::getenv("RS_SHARED_SECRET");
    /* SECURITY: Need RS_SHARED_SECRET to be available to
       rpostback. However, we really ought to communicate
       it in a more secure manner than this, at least on
@@ -459,27 +459,27 @@ core::ProgramStatus Options::read(int argc, char * const argv[])
       levels) than others. For example, using a named pipe
       with proper SACL to retrieve the shared secret, where
       the name of the pipe is in an environment variable. */
-   //core::system::unsetenv("RS_SHARED_SECRET");
+   //rscore::system::unsetenv("RS_SHARED_SECRET");
 
    // initial working dir override
-   initialWorkingDirOverride_ = core::system::getenv(kRStudioInitialWorkingDir);
-   core::system::unsetenv(kRStudioInitialWorkingDir);
+   initialWorkingDirOverride_ = rscore::system::getenv(kRStudioInitialWorkingDir);
+   rscore::system::unsetenv(kRStudioInitialWorkingDir);
 
    // initial environment file override
-   initialEnvironmentFileOverride_ = core::system::getenv(kRStudioInitialEnvironment);
-   core::system::unsetenv(kRStudioInitialEnvironment);
+   initialEnvironmentFileOverride_ = rscore::system::getenv(kRStudioInitialEnvironment);
+   rscore::system::unsetenv(kRStudioInitialEnvironment);
 
    // initial project
-   initialProjectPath_ = core::system::getenv(kRStudioInitialProject);
-   core::system::unsetenv(kRStudioInitialProject);
+   initialProjectPath_ = rscore::system::getenv(kRStudioInitialProject);
+   rscore::system::unsetenv(kRStudioInitialProject);
 
    // limit rpc client uid
    limitRpcClientUid_ = -1;
-   std::string limitUid = core::system::getenv(kRStudioLimitRpcClientUid);
+   std::string limitUid = rscore::system::getenv(kRStudioLimitRpcClientUid);
    if (!limitUid.empty())
    {
-      limitRpcClientUid_ = core::safe_convert::stringTo<int>(limitUid, -1);
-      core::system::unsetenv(kRStudioLimitRpcClientUid);
+      limitRpcClientUid_ = rscore::safe_convert::stringTo<int>(limitUid, -1);
+      rscore::system::unsetenv(kRStudioLimitRpcClientUid);
    }
 
    // return status
diff --git a/src/cpp/session/SessionOptionsOverlay.cpp b/src/cpp/session/SessionOptionsOverlay.cpp
index 76d6bc8..8e62b64 100644
--- a/src/cpp/session/SessionOptionsOverlay.cpp
+++ b/src/cpp/session/SessionOptionsOverlay.cpp
@@ -15,7 +15,7 @@
 
 #include <session/SessionOptions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
diff --git a/src/cpp/session/SessionPersistentState.cpp b/src/cpp/session/SessionPersistentState.cpp
index 73f41a7..e16e73a 100644
--- a/src/cpp/session/SessionPersistentState.cpp
+++ b/src/cpp/session/SessionPersistentState.cpp
@@ -23,7 +23,7 @@
 #include <session/SessionOptions.hpp>
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 
@@ -72,7 +72,7 @@ std::string PersistentState::newActiveClientId()
 {
    if (serverMode_)
    {
-      std::string newId = core::system::generateUuid();
+      std::string newId = rscore::system::generateUuid();
       settings_.set(kActiveClientId, newId);
       return newId;
    }
diff --git a/src/cpp/session/SessionPostback.cpp b/src/cpp/session/SessionPostback.cpp
index fa5dbfb..c3cbf29 100644
--- a/src/cpp/session/SessionPostback.cpp
+++ b/src/cpp/session/SessionPostback.cpp
@@ -52,7 +52,7 @@ To create a new postback handler for an action 'foo' do the following:
 
 #include <session/SessionOptions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace module_context {
diff --git a/src/cpp/session/SessionSSH.cpp b/src/cpp/session/SessionSSH.cpp
index 8721bf1..408f185 100644
--- a/src/cpp/session/SessionSSH.cpp
+++ b/src/cpp/session/SessionSSH.cpp
@@ -20,7 +20,7 @@
 
 // TODO: Implement ProcessOptions.workingDir for Windows
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace ssh {
@@ -35,12 +35,12 @@ void ProcessOptionsCreator::rmEnv(const std::string& name)
    env_.erase(name);
 }
 
-void ProcessOptionsCreator::addToPath(const core::FilePath& dir)
+void ProcessOptionsCreator::addToPath(const rscore::FilePath& dir)
 {
    pathDirs_.push_back(dir);
 }
 
-void ProcessOptionsCreator::setWorkingDirectory(const core::FilePath& dir)
+void ProcessOptionsCreator::setWorkingDirectory(const rscore::FilePath& dir)
 {
    workingDir_ = dir;
 }
@@ -50,25 +50,25 @@ void ProcessOptionsCreator::clearWorkingDirectory()
    workingDir_ = FilePath();
 }
 
-core::system::ProcessOptions ProcessOptionsCreator::processOptions() const
+rscore::system::ProcessOptions ProcessOptionsCreator::processOptions() const
 {
-   core::system::ProcessOptions options = baseOptions_;
+   rscore::system::ProcessOptions options = baseOptions_;
 
    // Set up environment
-   core::system::Options envOpts;
-   core::system::environment(&envOpts);
+   rscore::system::Options envOpts;
+   rscore::system::environment(&envOpts);
    typedef std::pair<std::string, std::string> StringPair;
    BOOST_FOREACH(StringPair var, env_)
    {
       if (var.second.empty())
-         core::system::unsetenv(&envOpts, var.first);
+         rscore::system::unsetenv(&envOpts, var.first);
       else
-         core::system::setenv(&envOpts, var.first, var.second);
+         rscore::system::setenv(&envOpts, var.first, var.second);
    }
 
    if (!pathDirs_.empty())
    {
-      std::string path = core::system::getenv(envOpts, "PATH");
+      std::string path = rscore::system::getenv(envOpts, "PATH");
       BOOST_FOREACH(FilePath pathDir, pathDirs_)
       {
 #ifdef _WIN32
@@ -78,7 +78,7 @@ core::system::ProcessOptions ProcessOptionsCreator::processOptions() const
 #endif
          path += pathDir.absolutePathNative();
       }
-      core::system::setenv(&envOpts, "PATH", path);
+      rscore::system::setenv(&envOpts, "PATH", path);
    }
 
    if (!workingDir_.empty())
diff --git a/src/cpp/session/SessionSourceDatabase.cpp b/src/cpp/session/SessionSourceDatabase.cpp
index 1768d7b..d52bc63 100644
--- a/src/cpp/session/SessionSourceDatabase.cpp
+++ b/src/cpp/session/SessionSourceDatabase.cpp
@@ -54,7 +54,7 @@
 // One way to overcome this might be to use filesystem metadata to store
 // properties rather than a side-database
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace source_database {
@@ -321,7 +321,7 @@ void SourceDocument::checkForExternalEdit(std::time_t* pTime)
    if (lastKnownWriteTime_ == 0)
       return;
 
-   core::FilePath filePath = module_context::resolveAliasedPath(path_);
+   rscore::FilePath filePath = module_context::resolveAliasedPath(path_);
    if (!filePath.exists())
       return;
 
@@ -336,7 +336,7 @@ void SourceDocument::updateLastKnownWriteTime()
    if (path_.empty())
       return;
 
-   core::FilePath filePath = module_context::resolveAliasedPath(path_);
+   rscore::FilePath filePath = module_context::resolveAliasedPath(path_);
    if (!filePath.exists())
       return;
 
diff --git a/src/cpp/session/SessionSourceDatabaseSupervisor.cpp b/src/cpp/session/SessionSourceDatabaseSupervisor.cpp
index 60df239..04faf54 100644
--- a/src/cpp/session/SessionSourceDatabaseSupervisor.cpp
+++ b/src/cpp/session/SessionSourceDatabaseSupervisor.cpp
@@ -34,7 +34,7 @@
 #include <session/SessionModuleContext.hpp>
 #include "session/SessionSourceDatabase.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace source_database {
diff --git a/src/cpp/session/SessionSourceDatabaseSupervisor.hpp b/src/cpp/session/SessionSourceDatabaseSupervisor.hpp
index ec21dbc..23b9618 100644
--- a/src/cpp/session/SessionSourceDatabaseSupervisor.hpp
+++ b/src/cpp/session/SessionSourceDatabaseSupervisor.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SOURCE_DATABASE_SUPERVISOR_HPP
 #define SESSION_SOURCE_DATABASE_SUPERVISOR_HPP
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -25,9 +25,9 @@ namespace session {
 namespace source_database {
 namespace supervisor {
 
-core::Error attachToSourceDatabase(core::FilePath* pSessionDir);
+rscore::Error attachToSourceDatabase(rscore::FilePath* pSessionDir);
 
-core::Error detachFromSourceDatabase();
+rscore::Error detachFromSourceDatabase();
 
 } // namespace supervisor
 } // namespace source_database
diff --git a/src/cpp/session/SessionUserSettings.cpp b/src/cpp/session/SessionUserSettings.cpp
index 532b2ea..331044c 100644
--- a/src/cpp/session/SessionUserSettings.cpp
+++ b/src/cpp/session/SessionUserSettings.cpp
@@ -35,7 +35,7 @@
 #include <r/session/RSession.hpp>
 #include <r/session/RConsoleHistory.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
    
@@ -114,13 +114,13 @@ Error UserSettings::initialize()
 
    // make sure we have a context id
    if (contextId().empty())
-      setContextId(core::system::generateShortenedUuid());
+      setContextId(rscore::system::generateShortenedUuid());
 
    return Success();
 }
 
 void UserSettings::onSettingsFileChanged(
-                     const core::system::FileChangeEvent& changeEvent)
+                     const rscore::system::FileChangeEvent& changeEvent)
 {
    // ensure this is for our target file
    if (settingsFilePath_.absolutePath() !=
@@ -193,18 +193,18 @@ void UserSettings::setAutoCreatedProfile(bool autoCreated)
    settings_.set(kAutoCreatedProfile, autoCreated);
 }
 
-core::json::Object UserSettings::uiPrefs() const
+rscore::json::Object UserSettings::uiPrefs() const
 {
    std::string value = settings_.get(kUiPrefs, "{}");
    json::Value jsonValue;
-   bool success = core::json::parse(value, &jsonValue);
+   bool success = rscore::json::parse(value, &jsonValue);
    if (success)
       return jsonValue.get_obj();
    else
       return json::Object();
 }
 
-void UserSettings::setUiPrefs(const core::json::Object& prefsObject)
+void UserSettings::setUiPrefs(const rscore::json::Object& prefsObject)
 {
    std::ostringstream output;
    json::writeFormatted(prefsObject, output);
@@ -266,7 +266,7 @@ void UserSettings::updatePrefsCache(const json::Object& prefs) const
    std::string spellingLanguage = readPref<std::string>(prefs, "spelling_dictionary_language", "en_US");
    pSpellingLanguage_.reset(new std::string(spellingLanguage));
 
-   json::Array spellingCustomDicts = readPref<core::json::Array>(prefs, "spelling_custom_dictionaries", core::json::Array());
+   json::Array spellingCustomDicts = readPref<rscore::json::Array>(prefs, "spelling_custom_dictionaries", rscore::json::Array());
    pSpellingCustomDicts_.reset(new json::Array(spellingCustomDicts));
 
    bool handleErrorsInUserCodeOnly = readPref<bool>(prefs, "handle_errors_in_user_code_only", true);
@@ -390,7 +390,7 @@ void UserSettings::setLoadRData(bool loadRData)
    settings_.set(kLoadRData, loadRData);
 }
 
-core::FilePath UserSettings::initialWorkingDirectory() const
+rscore::FilePath UserSettings::initialWorkingDirectory() const
 {
    return getWorkingDirectoryValue(kInitialWorkingDirectory);
 }
diff --git a/src/cpp/session/SessionWorkerContext.cpp b/src/cpp/session/SessionWorkerContext.cpp
index d2b0a7d..81acf77 100644
--- a/src/cpp/session/SessionWorkerContext.cpp
+++ b/src/cpp/session/SessionWorkerContext.cpp
@@ -22,7 +22,7 @@
 #include <session/SessionClientEvent.hpp>
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace worker_context {
diff --git a/src/cpp/session/consoleio/ConsoleIOMain.cpp b/src/cpp/session/consoleio/ConsoleIOMain.cpp
index e8237cc..3901e3f 100644
--- a/src/cpp/session/consoleio/ConsoleIOMain.cpp
+++ b/src/cpp/session/consoleio/ConsoleIOMain.cpp
@@ -25,7 +25,7 @@
 #include <core/BoostThread.hpp>
 #include <core/Error.hpp>
 
-using namespace core;
+using namespace rscore;
 
 HANDLE hSnapshotOutput;
 // Use this event to ensure that the transferConsoleOutToStdErr thread gets a
diff --git a/src/cpp/session/http/SessionHttpConnectionImpl.hpp b/src/cpp/session/http/SessionHttpConnectionImpl.hpp
index 159262e..ae4f353 100644
--- a/src/cpp/session/http/SessionHttpConnectionImpl.hpp
+++ b/src/cpp/session/http/SessionHttpConnectionImpl.hpp
@@ -75,25 +75,25 @@ public:
 public:
 
    // request/resposne (used by Handler)
-   virtual const core::http::Request& request() { return request_; }
+   virtual const rscore::http::Request& request() { return request_; }
 
-   virtual void sendResponse(const core::http::Response &response)
+   virtual void sendResponse(const rscore::http::Response &response)
    {
       try
       {
          // write the response
          boost::asio::write(socket_,
                             response.toBuffers(
-                                  core::http::Header::connectionClose()));
+                                  rscore::http::Header::connectionClose()));
       }
       catch(const boost::system::system_error& e)
       {
          // establish error
-         core::Error error = core::Error(e.code(), ERROR_LOCATION);
+         rscore::Error error = rscore::Error(e.code(), ERROR_LOCATION);
          error.addProperty("request-uri", request_.uri());
 
          // log the error if it wasn't connection terminated
-         if (!core::http::isConnectionTerminatedError(error))
+         if (!rscore::http::isConnectionTerminatedError(error))
             LOG_ERROR(error);
       }
       CATCH_UNEXPECTED_EXCEPTION
@@ -111,7 +111,7 @@ public:
    virtual void close()
    {
       // always close connection
-      core::Error error = core::http::closeSocket(socket_);
+      rscore::Error error = rscore::http::closeSocket(socket_);
       if (error)
          LOG_ERROR(error);
    }
@@ -158,16 +158,16 @@ private:
          if (!e)
          {
             // parse next chunk
-            core::http::RequestParser::status status = requestParser_.parse(
+            rscore::http::RequestParser::status status = requestParser_.parse(
                                         request_,
                                         buffer_.data(),
                                         buffer_.data() + bytesTransferred);
 
             // error - return bad request
-            if (status == core::http::RequestParser::error)
+            if (status == rscore::http::RequestParser::error)
             {
-               core::http::Response response;
-               response.setStatusCode(core::http::status::BadRequest);
+               rscore::http::Response response;
+               response.setStatusCode(rscore::http::status::BadRequest);
                sendResponse(response);
 
                // no more async operations w/ shared_from_this() initiated so this
@@ -175,7 +175,7 @@ private:
             }
 
             // incomplete -- keep reading
-            else if (status == core::http::RequestParser::incomplete)
+            else if (status == rscore::http::RequestParser::incomplete)
             {
                readSome();
             }
@@ -198,8 +198,8 @@ private:
          else // error reading
          {
             // log the error if it wasn't connection terminated
-            core::Error error(e, ERROR_LOCATION);
-            if (!core::http::isConnectionTerminatedError(error))
+            rscore::Error error(e, ERROR_LOCATION);
+            if (!rscore::http::isConnectionTerminatedError(error))
                LOG_ERROR(error);
 
             // close the connection
@@ -215,8 +215,8 @@ private:
 private:
    typename ProtocolType::socket socket_;
    boost::array<char, 8192> buffer_ ;
-   core::http::RequestParser requestParser_ ;
-   core::http::Request request_;
+   rscore::http::RequestParser requestParser_ ;
+   rscore::http::Request request_;
    std::string requestId_;
    Handler handler_;
 };
diff --git a/src/cpp/session/http/SessionHttpConnectionListenerImpl.hpp b/src/cpp/session/http/SessionHttpConnectionListenerImpl.hpp
index eff1fbf..8fd37a3 100644
--- a/src/cpp/session/http/SessionHttpConnectionListenerImpl.hpp
+++ b/src/cpp/session/http/SessionHttpConnectionListenerImpl.hpp
@@ -80,10 +80,10 @@ protected:
    // COPYING: boost::noncopyable
    
 public:
-   virtual core::Error start()
+   virtual rscore::Error start()
    {
       // cleanup any existing networking state
-      core::Error error = cleanup();
+      rscore::Error error = cleanup();
       if (error)
          return error ;
 
@@ -97,7 +97,7 @@ public:
 
       // block all signals for launch of listener thread (will cause it
       // to never receive signals)
-      core::system::SignalBlocker signalBlocker;
+      rscore::system::SignalBlocker signalBlocker;
       error = signalBlocker.blockAll();
       if (error)
          return error ;
@@ -113,11 +113,11 @@ public:
          // set started flag
          started_ = true;
 
-         return core::Success();
+         return rscore::Success();
       }
       catch(const boost::thread_resource_error& e)
       {
-         return core::Error(boost::thread_error::ec_from_exception(e),
+         return rscore::Error(boost::thread_error::ec_from_exception(e),
                             ERROR_LOCATION);
       }
    }
@@ -136,7 +136,7 @@ public:
       boost::system::error_code ec ;
       acceptorService_.closeAcceptor(ec);
       if (ec)
-         LOG_ERROR(core::Error(ec, ERROR_LOCATION));
+         LOG_ERROR(rscore::Error(ec, ERROR_LOCATION));
 
       // stop the server
       ioService().stop();
@@ -154,7 +154,7 @@ public:
       }
 
       // allow subclass specific cleanup
-      core::Error error = cleanup();
+      rscore::Error error = cleanup();
       if (error)
          LOG_ERROR(error);
    }
@@ -179,13 +179,13 @@ protected:
 
 private:
    // required subclass hooks
-   virtual core::Error initializeAcceptor(
-             core::http::SocketAcceptorService<ProtocolType>* pAcceptor) = 0;
+   virtual rscore::Error initializeAcceptor(
+             rscore::http::SocketAcceptorService<ProtocolType>* pAcceptor) = 0;
 
    virtual bool validateConnection(
       boost::shared_ptr<HttpConnectionImpl<ProtocolType> > ptrConnection) = 0;
 
-   virtual core::Error cleanup() = 0 ;
+   virtual rscore::Error cleanup() = 0 ;
 
 private:
    boost::asio::io_service& ioService() { return acceptorService_.ioService(); }
@@ -234,7 +234,7 @@ private:
             // for errors, log and continue,but don't log errors caused
             // by normal course of socket shutdown
             if (!isShutdownError(ec))
-               LOG_ERROR(core::Error(ec, ERROR_LOCATION)) ;
+               LOG_ERROR(rscore::Error(ec, ERROR_LOCATION)) ;
          }
       }
       catch(const boost::system::system_error& e)
@@ -262,7 +262,7 @@ private:
 
       if (!authenticate(ptrHttpConnection))
       {
-         core::http::Response response;
+         rscore::http::Response response;
          response.setStatusCode(403);
          response.setStatusMessage("Forbidden");
          ptrConnection->sendResponse(response);
@@ -297,7 +297,7 @@ private:
 private:
 
    // acceptor service (includes io service)
-   core::http::SocketAcceptorService<ProtocolType> acceptorService_;
+   rscore::http::SocketAcceptorService<ProtocolType> acceptorService_;
 
    // next connection
    boost::shared_ptr<HttpConnectionImpl<ProtocolType> > ptrNextConnection_;
diff --git a/src/cpp/session/http/SessionHttpConnectionQueue.cpp b/src/cpp/session/http/SessionHttpConnectionQueue.cpp
index ae088c0..5fe6fc3 100644
--- a/src/cpp/session/http/SessionHttpConnectionQueue.cpp
+++ b/src/cpp/session/http/SessionHttpConnectionQueue.cpp
@@ -21,7 +21,7 @@
 
 #include <core/http/Request.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
diff --git a/src/cpp/session/http/SessionHttpConnectionUtils.cpp b/src/cpp/session/http/SessionHttpConnectionUtils.cpp
index 74cf756..8b8409d 100644
--- a/src/cpp/session/http/SessionHttpConnectionUtils.cpp
+++ b/src/cpp/session/http/SessionHttpConnectionUtils.cpp
@@ -37,31 +37,31 @@
 
 namespace session {
 
-void HttpConnection::sendJsonRpcError(const core::Error& error)
+void HttpConnection::sendJsonRpcError(const rscore::Error& error)
 {
-   core::json::JsonRpcResponse jsonRpcResponse;
+   rscore::json::JsonRpcResponse jsonRpcResponse;
    jsonRpcResponse.setError(error);
    sendJsonRpcResponse(jsonRpcResponse);
 }
 
 void HttpConnection::sendJsonRpcResponse()
 {
-   core::json::JsonRpcResponse jsonRpcResponse ;
+   rscore::json::JsonRpcResponse jsonRpcResponse ;
    sendJsonRpcResponse(jsonRpcResponse);
 }
 
 void HttpConnection::sendJsonRpcResponse(
-                     const core::json::JsonRpcResponse& jsonRpcResponse)
+                     const rscore::json::JsonRpcResponse& jsonRpcResponse)
 {
    // setup response
-   core::http::Response response ;
+   rscore::http::Response response ;
 
    // automagic gzip support
-   if (request().acceptsEncoding(core::http::kGzipEncoding))
-      response.setContentEncoding(core::http::kGzipEncoding);
+   if (request().acceptsEncoding(rscore::http::kGzipEncoding))
+      response.setContentEncoding(rscore::http::kGzipEncoding);
 
    // set response
-   core::json::setJsonRpcResponse(jsonRpcResponse, &response);
+   rscore::json::setJsonRpcResponse(jsonRpcResponse, &response);
 
    // send the response
    sendResponse(response);
@@ -71,7 +71,7 @@ void HttpConnection::sendJsonRpcResponse(
 
 namespace connection {
 
-std::string rstudioRequestIdFromRequest(const core::http::Request& request)
+std::string rstudioRequestIdFromRequest(const rscore::http::Request& request)
 {
    return request.headerValue("X-RS-RID");
 }
@@ -94,13 +94,13 @@ void handleAbortNextProjParam(
                boost::shared_ptr<HttpConnection> ptrConnection)
 {
    std::string nextProj;
-   core::json::JsonRpcRequest jsonRpcRequest;
-   core::Error error = core::json::parseJsonRpcRequest(
+   rscore::json::JsonRpcRequest jsonRpcRequest;
+   rscore::Error error = rscore::json::parseJsonRpcRequest(
                                          ptrConnection->request().body(),
                                          &jsonRpcRequest);
    if (!error)
    {
-      error = core::json::readParam(jsonRpcRequest.params, 0, &nextProj);
+      error = rscore::json::readParam(jsonRpcRequest.params, 0, &nextProj);
       if (error)
          LOG_ERROR(error);
 
@@ -111,13 +111,13 @@ void handleAbortNextProjParam(
          // constants rather than code so that this code (which runs in
          // a background thread) don't call into the projects module (which
          // is designed to be foreground and single-threaded)
-         core::FilePath userScratch = session::options().userScratchPath();
-         core::FilePath settings = userScratch.complete(kProjectsSettings);
+         rscore::FilePath userScratch = session::options().userScratchPath();
+         rscore::FilePath settings = userScratch.complete(kProjectsSettings);
          error = settings.ensureDirectory();
          if (error)
             LOG_ERROR(error);
-         core::FilePath writePath = settings.complete(kNextSessionProject);
-         core::Error error = core::writeStringToFile(writePath, nextProj);
+         rscore::FilePath writePath = settings.complete(kNextSessionProject);
+         rscore::Error error = rscore::writeStringToFile(writePath, nextProj);
          if (error)
             LOG_ERROR(error);
       }
@@ -185,12 +185,12 @@ bool checkForSuspend(boost::shared_ptr<HttpConnection> ptrConnection)
 
 bool checkForSuspend(boost::shared_ptr<HttpConnection> ptrConnection)
 {
-   using namespace core::json;
+   using namespace rscore::json;
    if (isMethod(ptrConnection, "suspend_session"))
    {
       bool force = false;
       JsonRpcRequest jsonRpcRequest;
-      core::Error error = parseJsonRpcRequest(ptrConnection->request().body(),
+      rscore::Error error = parseJsonRpcRequest(ptrConnection->request().body(),
                                               &jsonRpcRequest);
       if (error)
       {
@@ -203,7 +203,7 @@ bool checkForSuspend(boost::shared_ptr<HttpConnection> ptrConnection)
       else
       {
          // send a signal to this process to suspend
-         using namespace core::system;
+         using namespace rscore::system;
          sendSignalToSelf(force ? SigUsr2 : SigUsr1);
 
          // send response
diff --git a/src/cpp/session/http/SessionHttpConnectionUtils.hpp b/src/cpp/session/http/SessionHttpConnectionUtils.hpp
index 1f5185b..fb37ee5 100644
--- a/src/cpp/session/http/SessionHttpConnectionUtils.hpp
+++ b/src/cpp/session/http/SessionHttpConnectionUtils.hpp
@@ -22,7 +22,7 @@
 
 #include <boost/function.hpp>
 
-namespace core {
+namespace rscore {
 namespace http {
    class Request;
 }
@@ -31,7 +31,7 @@ namespace http {
 namespace session {
 namespace connection {
 
-std::string rstudioRequestIdFromRequest(const core::http::Request& request);
+std::string rstudioRequestIdFromRequest(const rscore::http::Request& request);
 
 bool isMethod(boost::shared_ptr<HttpConnection> ptrConnection,
               const std::string& method);
diff --git a/src/cpp/session/http/SessionLocalStreamHttpConnectionListener.hpp b/src/cpp/session/http/SessionLocalStreamHttpConnectionListener.hpp
index 0569fbf..5e8c157 100644
--- a/src/cpp/session/http/SessionLocalStreamHttpConnectionListener.hpp
+++ b/src/cpp/session/http/SessionLocalStreamHttpConnectionListener.hpp
@@ -25,7 +25,7 @@
 
 #include "SessionHttpConnectionListenerImpl.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -35,7 +35,7 @@ class LocalStreamHttpConnectionListener :
 {
 public:
    LocalStreamHttpConnectionListener(const FilePath& streamPath,
-                                     core::system::FileMode streamFileMode,
+                                     rscore::system::FileMode streamFileMode,
                                      const std::string& secret,
                                      int limitRpcClientUid)
       : localStreamPath_(streamPath),
@@ -45,7 +45,7 @@ public:
       if (limitRpcClientUid != -1)
       {
          // always add current user
-         using namespace core::system::user;
+         using namespace rscore::system::user;
          permittedClients_.push_back(currentUserIdentity().userId);
 
          // also add rpc client
@@ -74,8 +74,8 @@ private:
          int socket = ptrConnection->socket().native();
 
          // get client identity
-         core::system::user::UserIdentity userIdentity;
-         core::Error error = socketPeerIdentity(socket,&userIdentity);
+         rscore::system::user::UserIdentity userIdentity;
+         rscore::Error error = socketPeerIdentity(socket,&userIdentity);
          if (error)
          {
             LOG_ERROR(error);
@@ -120,8 +120,8 @@ protected:
    }
 
 private:
-   core::FilePath localStreamPath_;
-   core::system::FileMode streamFileMode_;
+   rscore::FilePath localStreamPath_;
+   rscore::system::FileMode streamFileMode_;
 
    // desktop shared secret
    std::string secret_;
diff --git a/src/cpp/session/http/SessionNamedPipeHttpConnectionListener.hpp b/src/cpp/session/http/SessionNamedPipeHttpConnectionListener.hpp
index 8c2c930..8b0935e 100644
--- a/src/cpp/session/http/SessionNamedPipeHttpConnectionListener.hpp
+++ b/src/cpp/session/http/SessionNamedPipeHttpConnectionListener.hpp
@@ -58,7 +58,7 @@ extern "C" BOOL WINAPI ConvertStringSecurityDescriptorToSecurityDescriptorA(
 
 #include "SessionHttpConnectionUtils.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 #define kReadBufferSize 4096
 
@@ -84,7 +84,7 @@ public:
 
    bool readRequest()
    {
-      core::http::RequestParser parser;
+      rscore::http::RequestParser parser;
       CHAR buff[kReadBufferSize];
       DWORD bytesRead;
 
@@ -97,7 +97,7 @@ public:
          if (!result)
          {
             Error error = systemError(::GetLastError(), ERROR_LOCATION);
-            if (!core::http::isConnectionTerminatedError(error))
+            if (!rscore::http::isConnectionTerminatedError(error))
                LOG_ERROR(error);
 
             close();
@@ -111,8 +111,8 @@ public:
          {
             LOG_WARNING_MESSAGE("ReadFile returned 0 bytes");
 
-            core::http::Response response;
-            response.setStatusCode(core::http::status::BadRequest);
+            rscore::http::Response response;
+            response.setStatusCode(rscore::http::status::BadRequest);
             sendResponse(response);
 
             return false;
@@ -128,17 +128,17 @@ public:
                                                    buff + bytesRead);
 
             // error - return bad request
-            if (status == core::http::RequestParser::error)
+            if (status == rscore::http::RequestParser::error)
             {
-               core::http::Response response;
-               response.setStatusCode(core::http::status::BadRequest);
+               rscore::http::Response response;
+               response.setStatusCode(rscore::http::status::BadRequest);
                sendResponse(response);
 
                return false;
             }
 
             // incomplete -- keep reading
-            else if (status == core::http::RequestParser::incomplete)
+            else if (status == rscore::http::RequestParser::incomplete)
             {
                continue;
             }
@@ -156,13 +156,13 @@ public:
       return false;
    }
 
-   virtual const core::http::Request& request() { return request_; }
+   virtual const rscore::http::Request& request() { return request_; }
 
-   virtual void sendResponse(const core::http::Response &response)
+   virtual void sendResponse(const rscore::http::Response &response)
    {
       // get the buffers
       std::vector<boost::asio::const_buffer> buffers =response.toBuffers(
-                                        core::http::Header::connectionClose());
+                                        rscore::http::Header::connectionClose());
 
       // write them
       DWORD bytesWritten;
@@ -183,7 +183,7 @@ public:
             error.addProperty("request-uri", request_.uri());
 
             // log the error if it wasn't connection terminated
-            if (!core::http::isConnectionTerminatedError(error))
+            if (!rscore::http::isConnectionTerminatedError(error))
                LOG_ERROR(error);
 
             // close and terminate
@@ -218,7 +218,7 @@ public:
 
 private:
    HANDLE hPipe_;
-   core::http::Request request_;
+   rscore::http::Request request_;
    std::string requestId_;
 };
 
@@ -236,7 +236,7 @@ public:
 
    virtual Error start()
    {
-      core::thread::safeLaunchThread(
+      rscore::thread::safeLaunchThread(
          boost::bind(&NamedPipeHttpConnectionListener::listenerThread,
                      this));
 
@@ -286,7 +286,7 @@ private:
 
             // set pipe mode, specify rejection of remote clients if >= vista
             DWORD dwPipeMode = PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT;
-            if (core::system::isVistaOrLater())
+            if (rscore::system::isVistaOrLater())
                 dwPipeMode |= PIPE_REJECT_REMOTE_CLIENTS;
 
             // create pipe
@@ -345,7 +345,7 @@ private:
 
       if (!authenticate(ptrHttpConnection))
       {
-         core::http::Response response;
+         rscore::http::Response response;
          response.setStatusCode(403);
          response.setStatusMessage("Forbidden");
          ptrConnection->sendResponse(response);
@@ -382,7 +382,7 @@ private:
       return connection::authenticate(ptrConnection, secret_);
    }
 
-   core::Error cleanup()
+   rscore::Error cleanup()
    {
       return Success();
    }
@@ -419,13 +419,13 @@ private:
       }
    }
 
-   static core::Error logonSessionOnlyDescriptor(std::string* pDescriptor)
+   static rscore::Error logonSessionOnlyDescriptor(std::string* pDescriptor)
    {
       // token for current process
       HANDLE hToken = NULL;
       if (!OpenProcessToken(::GetCurrentProcess(), TOKEN_QUERY, &hToken))
          return systemError(::GetLastError(), ERROR_LOCATION);
-      core::system::CloseHandleOnExitScope tokenScope(&hToken, ERROR_LOCATION);
+      rscore::system::CloseHandleOnExitScope tokenScope(&hToken, ERROR_LOCATION);
 
       // size of token groups structure (note that we exepct the error
       // since we pass NULL for the token information buffer)
diff --git a/src/cpp/session/http/SessionPosixHttpConnectionListener.cpp b/src/cpp/session/http/SessionPosixHttpConnectionListener.cpp
index cd5a1c5..55bf596 100644
--- a/src/cpp/session/http/SessionPosixHttpConnectionListener.cpp
+++ b/src/cpp/session/http/SessionPosixHttpConnectionListener.cpp
@@ -25,7 +25,7 @@
 #include "SessionTcpIpHttpConnectionListener.hpp"
 #include "SessionLocalStreamHttpConnectionListener.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -44,13 +44,13 @@ void initializeHttpConnectionListener()
 
    if (options.programMode() == kSessionProgramModeDesktop)
    {
-      std::string localPeer = core::system::getenv("RS_LOCAL_PEER");
+      std::string localPeer = rscore::system::getenv("RS_LOCAL_PEER");
       if (!localPeer.empty())
       {
          FilePath streamPath(localPeer);
          s_pHttpConnectionListener = new LocalStreamHttpConnectionListener(
                                            streamPath,
-                                           core::system::UserReadWriteMode,
+                                           rscore::system::UserReadWriteMode,
                                            options.sharedSecret(),
                                            -1);
       }
@@ -78,7 +78,7 @@ void initializeHttpConnectionListener()
          FilePath localStreamPath = local_streams::streamPath(userIdentity);
          s_pHttpConnectionListener = new LocalStreamHttpConnectionListener(
                                           localStreamPath,
-                                          core::system::EveryoneReadWriteMode,
+                                          rscore::system::EveryoneReadWriteMode,
                                           "", // no shared secret
                                           options.limitRpcClientUid());
       }
diff --git a/src/cpp/session/http/SessionTcpIpHttpConnectionListener.hpp b/src/cpp/session/http/SessionTcpIpHttpConnectionListener.hpp
index f57a34f..09a9de4 100644
--- a/src/cpp/session/http/SessionTcpIpHttpConnectionListener.hpp
+++ b/src/cpp/session/http/SessionTcpIpHttpConnectionListener.hpp
@@ -20,7 +20,7 @@
 #include "SessionHttpConnectionUtils.hpp"
 #include "SessionHttpConnectionListenerImpl.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
diff --git a/src/cpp/session/http/SessionWin32HttpConnectionListener.cpp b/src/cpp/session/http/SessionWin32HttpConnectionListener.cpp
index 88b4598..631c7a0 100644
--- a/src/cpp/session/http/SessionWin32HttpConnectionListener.cpp
+++ b/src/cpp/session/http/SessionWin32HttpConnectionListener.cpp
@@ -24,7 +24,7 @@
 
 #include "SessionNamedPipeHttpConnectionListener.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -39,7 +39,7 @@ HttpConnectionListener* s_pHttpConnectionListener = NULL ;
 void initializeHttpConnectionListener()
 {
    session::Options& options = session::options();
-   std::string pipeName = core::system::getenv("RS_LOCAL_PEER");
+   std::string pipeName = rscore::system::getenv("RS_LOCAL_PEER");
    std::string secret = options.sharedSecret();
    s_pHttpConnectionListener = new NamedPipeHttpConnectionListener(pipeName,
                                                                    secret);
diff --git a/src/cpp/session/include/session/IncrementalFileChangeHandler.hpp b/src/cpp/session/include/session/IncrementalFileChangeHandler.hpp
index 9cae4c9..3131d4f 100644
--- a/src/cpp/session/include/session/IncrementalFileChangeHandler.hpp
+++ b/src/cpp/session/include/session/IncrementalFileChangeHandler.hpp
@@ -37,8 +37,8 @@ namespace session {
 class IncrementalFileChangeHandler : boost::noncopyable
 {
 public:
-   typedef boost::function<bool(const core::FileInfo&)> Filter;
-   typedef boost::function<void(const core::system::FileChangeEvent&)> Handler;
+   typedef boost::function<bool(const rscore::FileInfo&)> Filter;
+   typedef boost::function<void(const rscore::system::FileChangeEvent&)> Handler;
 
 public:
    IncrementalFileChangeHandler(
@@ -79,7 +79,7 @@ public:
    void enqueFiles(ForwardIterator begin, ForwardIterator end)
    {
       // add all files that meet the filter to the queue
-      using namespace core::system;
+      using namespace rscore::system;
       for ( ; begin != end; ++begin)
       {
          if (filter_(*begin))
@@ -104,7 +104,7 @@ public:
       }
    }
 
-   void enqueFileChange(const core::system::FileChangeEvent& event)
+   void enqueFileChange(const rscore::system::FileChangeEvent& event)
    {
       // screen out files which don't pass the filter
       if (!filter_(event.fileInfo()))
@@ -131,7 +131,7 @@ public:
    void clear()
    {
       processing_ = false;
-      queue_ = std::queue<core::system::FileChangeEvent>();
+      queue_ = std::queue<rscore::system::FileChangeEvent>();
    }
 
 private:
@@ -141,7 +141,7 @@ private:
       if (!queue_.empty())
       {
          // remove the event from the queue
-         core::system::FileChangeEvent event = queue_.front();
+         rscore::system::FileChangeEvent event = queue_.front();
          queue_.pop();
 
          // process the change
@@ -155,12 +155,12 @@ private:
 
    // hooks for file monitor subscription
 
-   void onMonitoringEnabled(const tree<core::FileInfo>& files)
+   void onMonitoringEnabled(const tree<rscore::FileInfo>& files)
    {
       enqueFiles(files.begin_leaf(), files.end_leaf());
    }
 
-   void onFilesChanged(const std::vector<core::system::FileChangeEvent>& events)
+   void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& events)
    {
       std::for_each(
         events.begin(),
@@ -170,7 +170,7 @@ private:
 
 private:
    bool processing_;
-   std::queue<core::system::FileChangeEvent> queue_;
+   std::queue<rscore::system::FileChangeEvent> queue_;
    Filter filter_;
    Handler handler_;
    boost::posix_time::time_duration initialWorkPeriod_;
diff --git a/src/cpp/session/include/session/SessionAsyncRProcess.hpp b/src/cpp/session/include/session/SessionAsyncRProcess.hpp
index 55acc81..1a68b71 100644
--- a/src/cpp/session/include/session/SessionAsyncRProcess.hpp
+++ b/src/cpp/session/include/session/SessionAsyncRProcess.hpp
@@ -17,7 +17,7 @@
 #ifndef SESSION_ASYNC_R_PROCESS_HPP
 #define SESSION_ASYNC_R_PROCESS_HPP
 
-namespace core
+namespace rscore
 {
    class FilePath;
 }
@@ -40,7 +40,7 @@ public:
    AsyncRProcess();
    virtual ~AsyncRProcess();
 
-   void start(const char* rCommand, const core::FilePath& workingDir,
+   void start(const char* rCommand, const rscore::FilePath& workingDir,
               AsyncRProcessOptions rOptions);
    bool isRunning();
    void terminate();
diff --git a/src/cpp/session/include/session/SessionConsoleProcess.hpp b/src/cpp/session/include/session/SessionConsoleProcess.hpp
index 6e5010b..1b4c2b7 100644
--- a/src/cpp/session/include/session/SessionConsoleProcess.hpp
+++ b/src/cpp/session/include/session/SessionConsoleProcess.hpp
@@ -27,7 +27,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -53,7 +53,7 @@ private:
 
    ConsoleProcess(
          const std::string& command,
-         const core::system::ProcessOptions& options,
+         const rscore::system::ProcessOptions& options,
          const std::string& caption,
          bool dialog,
          InteractionMode mode,
@@ -62,7 +62,7 @@ private:
    ConsoleProcess(
          const std::string& program,
          const std::vector<std::string>& args,
-         const core::system::ProcessOptions& options,
+         const rscore::system::ProcessOptions& options,
          const std::string& caption,
          bool dialog,
          InteractionMode mode,
@@ -95,7 +95,7 @@ public:
    // the runProgram codepath
    static boost::shared_ptr<ConsoleProcess> create(
          const std::string& command,
-         core::system::ProcessOptions options,
+         rscore::system::ProcessOptions options,
          const std::string& caption,
          bool dialog,
          InteractionMode mode,
@@ -104,7 +104,7 @@ public:
    static boost::shared_ptr<ConsoleProcess> create(
          const std::string& program,
          const std::vector<std::string>& args,
-         core::system::ProcessOptions options,
+         rscore::system::ProcessOptions options,
          const std::string& caption,
          bool dialog,
          InteractionMode mode,
@@ -124,29 +124,29 @@ public:
    std::string handle() const { return handle_; }
    InteractionMode interactionMode() const { return interactionMode_; }
 
-   core::Error start();
+   rscore::Error start();
    void enqueInput(const Input& input);
    void interrupt();
 
    void setShowOnOutput(bool showOnOutput) { showOnOutput_ = showOnOutput; }
 
-   core::json::Object toJson() const;
+   rscore::json::Object toJson() const;
    static boost::shared_ptr<ConsoleProcess> fromJson(
-                                              core::json::Object& obj);
+                                              rscore::json::Object& obj);
 
 private:
-   core::system::ProcessCallbacks createProcessCallbacks();
-   bool onContinue(core::system::ProcessOperations& ops);
-   void onStdout(core::system::ProcessOperations& ops,
+   rscore::system::ProcessCallbacks createProcessCallbacks();
+   bool onContinue(rscore::system::ProcessOperations& ops);
+   void onStdout(rscore::system::ProcessOperations& ops,
                  const std::string& output);
    void onExit(int exitCode);
 
    std::string bufferedOutput() const;
    void appendToOutputBuffer(const std::string& str);
    void enqueOutputEvent(const std::string& output, bool error);
-   void handleConsolePrompt(core::system::ProcessOperations& ops,
+   void handleConsolePrompt(rscore::system::ProcessOperations& ops,
                             const std::string& prompt);
-   void maybeConsolePrompt(core::system::ProcessOperations& ops,
+   void maybeConsolePrompt(rscore::system::ProcessOperations& ops,
                            const std::string& output);
 
 private:
@@ -154,7 +154,7 @@ private:
    std::string command_;
    std::string program_;
    std::vector<std::string> args_;
-   core::system::ProcessOptions options_;
+   rscore::system::ProcessOptions options_;
 
    std::string caption_;
    bool dialog_;
@@ -245,8 +245,8 @@ private:
    std::vector<CachedPassword> passwords_;
 };
 
-core::json::Array processesAsJson();
-core::Error initialize();
+rscore::json::Array processesAsJson();
+rscore::Error initialize();
 
 } // namespace console_process
 } // namespace session
diff --git a/src/cpp/session/include/session/SessionContentUrls.hpp b/src/cpp/session/include/session/SessionContentUrls.hpp
index 309c5a2..87cbf0b 100644
--- a/src/cpp/session/include/session/SessionContentUrls.hpp
+++ b/src/cpp/session/include/session/SessionContentUrls.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -26,13 +26,13 @@ namespace core {
 namespace session {    
 namespace content_urls {
 
-std::string provision(const std::string& title, const core::FilePath& filePath);
+std::string provision(const std::string& title, const rscore::FilePath& filePath);
 
 std::string provision(const std::string& title,
                       const std::string& content,
                       const std::string& extension);
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace content_urls
 } // namesapce session
diff --git a/src/cpp/session/include/session/SessionHttpConnection.hpp b/src/cpp/session/include/session/SessionHttpConnection.hpp
index 266a191..a0d6381 100644
--- a/src/cpp/session/include/session/SessionHttpConnection.hpp
+++ b/src/cpp/session/include/session/SessionHttpConnection.hpp
@@ -34,7 +34,7 @@
       therefore be sent on background threads.
 */
 
-namespace core {
+namespace rscore {
 
    class Error;
 
@@ -56,13 +56,13 @@ class HttpConnection
 public:
    virtual ~HttpConnection() {}
 
-   virtual const core::http::Request& request() = 0;
-   virtual void sendResponse(const core::http::Response& response) = 0;
+   virtual const rscore::http::Request& request() = 0;
+   virtual void sendResponse(const rscore::http::Response& response) = 0;
 
-   void sendJsonRpcError(const core::Error& error);
+   void sendJsonRpcError(const rscore::Error& error);
    void sendJsonRpcResponse();
    void sendJsonRpcResponse(
-                  const core::json::JsonRpcResponse& jsonRpcResponse);
+                  const rscore::json::JsonRpcResponse& jsonRpcResponse);
 
 
    // close (occurs automatically after writeResponse, here in case it
diff --git a/src/cpp/session/include/session/SessionHttpConnectionListener.hpp b/src/cpp/session/include/session/SessionHttpConnectionListener.hpp
index 815afee..30f7496 100644
--- a/src/cpp/session/include/session/SessionHttpConnectionListener.hpp
+++ b/src/cpp/session/include/session/SessionHttpConnectionListener.hpp
@@ -70,7 +70,7 @@
 
 #include "SessionHttpConnectionQueue.hpp"
 
-namespace core {
+namespace rscore {
 	class Error;
 }
 
@@ -90,7 +90,7 @@ public:
 	virtual ~HttpConnectionListener() {}
 
 	// start and stop
-	virtual core::Error start() = 0;
+	virtual rscore::Error start() = 0;
    virtual void stop() = 0;
 
    // connection queues
diff --git a/src/cpp/session/include/session/SessionHttpConnectionQueue.hpp b/src/cpp/session/include/session/SessionHttpConnectionQueue.hpp
index e1d8cea..b25a233 100644
--- a/src/cpp/session/include/session/SessionHttpConnectionQueue.hpp
+++ b/src/cpp/session/include/session/SessionHttpConnectionQueue.hpp
@@ -26,7 +26,7 @@
 
 #include <session/SessionHttpConnection.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
diff --git a/src/cpp/session/include/session/SessionLocalStreams.hpp b/src/cpp/session/include/session/SessionLocalStreams.hpp
index cd0fc6a..1d5705e 100644
--- a/src/cpp/session/include/session/SessionLocalStreams.hpp
+++ b/src/cpp/session/include/session/SessionLocalStreams.hpp
@@ -29,20 +29,20 @@
 namespace session {
 namespace local_streams {
 
-inline core::Error ensureStreamsDir()
+inline rscore::Error ensureStreamsDir()
 {
-   core::FilePath sessionStreamsPath(kSessionLocalStreamsDir);
-   return core::http::initializeStreamDir(sessionStreamsPath);
+   rscore::FilePath sessionStreamsPath(kSessionLocalStreamsDir);
+   return rscore::http::initializeStreamDir(sessionStreamsPath);
 }
    
-inline core::FilePath streamPath(const std::string& user)
+inline rscore::FilePath streamPath(const std::string& user)
 {
-   return core::FilePath(kSessionLocalStreamsDir).complete(user);
+   return rscore::FilePath(kSessionLocalStreamsDir).complete(user);
 }
 
 inline void removeStreams(const std::string& user)
 {
-   core::Error error = streamPath(user).removeIfExists();
+   rscore::Error error = streamPath(user).removeIfExists();
    if (error)
       LOG_ERROR(error);
 }
diff --git a/src/cpp/session/include/session/SessionModuleContext.hpp b/src/cpp/session/include/session/SessionModuleContext.hpp
index 0a9af3a..f8add0a 100644
--- a/src/cpp/session/include/session/SessionModuleContext.hpp
+++ b/src/cpp/session/include/session/SessionModuleContext.hpp
@@ -35,7 +35,7 @@
 #include <session/SessionClientEvent.hpp>
 #include <session/SessionSourceDatabase.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class Success;
    class FilePath;
@@ -69,39 +69,39 @@ enum PackageCompatStatus
 };
     
 // paths 
-core::FilePath userHomePath();
-std::string createAliasedPath(const core::FileInfo& fileInfo);
-std::string createAliasedPath(const core::FilePath& path);
-std::string createFileUrl(const core::FilePath& path);
-core::FilePath resolveAliasedPath(const std::string& aliasedPath);
-core::FilePath userScratchPath();
-core::FilePath scopedScratchPath();
-core::FilePath oldScopedScratchPath();
-bool isVisibleUserFile(const core::FilePath& filePath);
-
-core::FilePath safeCurrentPath();
-
-core::json::Object createFileSystemItem(const core::FileInfo& fileInfo);
-core::json::Object createFileSystemItem(const core::FilePath& filePath);
+rscore::FilePath userHomePath();
+std::string createAliasedPath(const rscore::FileInfo& fileInfo);
+std::string createAliasedPath(const rscore::FilePath& path);
+std::string createFileUrl(const rscore::FilePath& path);
+rscore::FilePath resolveAliasedPath(const std::string& aliasedPath);
+rscore::FilePath userScratchPath();
+rscore::FilePath scopedScratchPath();
+rscore::FilePath oldScopedScratchPath();
+bool isVisibleUserFile(const rscore::FilePath& filePath);
+
+rscore::FilePath safeCurrentPath();
+
+rscore::json::Object createFileSystemItem(const rscore::FileInfo& fileInfo);
+rscore::json::Object createFileSystemItem(const rscore::FilePath& filePath);
    
 // get a temp file
-core::FilePath tempFile(const std::string& prefix, 
+rscore::FilePath tempFile(const std::string& prefix, 
                         const std::string& extension);
 
-core::FilePath tempDir();
+rscore::FilePath tempDir();
 
 // find out the location of a binary
-core::FilePath findProgram(const std::string& name);
+rscore::FilePath findProgram(const std::string& name);
 
 bool isPdfLatexInstalled();
 
 // is the file a text file
-bool isTextFile(const core::FilePath& targetPath);
+bool isTextFile(const rscore::FilePath& targetPath);
 
 // find the location of the R script
-core::Error rBinDir(core::FilePath* pRBinDirPath);
-core::Error rScriptPath(core::FilePath* pRScriptPath);
-core::shell_utils::ShellCommand rCmd(const core::FilePath& rBinDir);
+rscore::Error rBinDir(rscore::FilePath* pRBinDirPath);
+rscore::Error rScriptPath(rscore::FilePath* pRScriptPath);
+rscore::shell_utils::ShellCommand rCmd(const rscore::FilePath& rBinDir);
 
 // get the R local help port
 std::string rLocalHelpPort();
@@ -125,43 +125,43 @@ PackageCompatStatus getPackageCompatStatus(
       const std::string& packageVersion,
       int protocolVersion);
 
-core::Error installPackage(const std::string& pkgPath,
+rscore::Error installPackage(const std::string& pkgPath,
                            const std::string& libPath = std::string());
 
-core::Error installEmbeddedPackage(const std::string& name);
+rscore::Error installEmbeddedPackage(const std::string& name);
 
 // find the package name for a source file
-std::string packageNameForSourceFile(const core::FilePath& sourceFilePath);
+std::string packageNameForSourceFile(const rscore::FilePath& sourceFilePath);
 
 // register a handler for rBrowseUrl
 typedef boost::function<bool(const std::string&)> RBrowseUrlHandler;
-core::Error registerRBrowseUrlHandler(const RBrowseUrlHandler& handler);
+rscore::Error registerRBrowseUrlHandler(const RBrowseUrlHandler& handler);
    
 // register a handler for rBrowseFile
-typedef boost::function<bool(const core::FilePath&)> RBrowseFileHandler;
-core::Error registerRBrowseFileHandler(const RBrowseFileHandler& handler);
+typedef boost::function<bool(const rscore::FilePath&)> RBrowseFileHandler;
+rscore::Error registerRBrowseFileHandler(const RBrowseFileHandler& handler);
    
 // register an inbound uri handler (include a leading slash)
-core::Error registerAsyncUriHandler(
+rscore::Error registerAsyncUriHandler(
                    const std::string& name,
-                   const core::http::UriAsyncHandlerFunction& handlerFunction);
+                   const rscore::http::UriAsyncHandlerFunction& handlerFunction);
 
 // register an inbound uri handler (include a leading slash)
-core::Error registerUriHandler(
+rscore::Error registerUriHandler(
                         const std::string& name,
-                        const core::http::UriHandlerFunction& handlerFunction);
+                        const rscore::http::UriHandlerFunction& handlerFunction);
 
 // register a local uri handler (scoped by a special prefix which indicates
 // a local scope)
-core::Error registerAsyncLocalUriHandler(
+rscore::Error registerAsyncLocalUriHandler(
                    const std::string& name,
-                   const core::http::UriAsyncHandlerFunction& handlerFunction);
+                   const rscore::http::UriAsyncHandlerFunction& handlerFunction);
 
 // register a local uri handler (scoped by a special prefix which indicates
 // a local scope)
-core::Error registerLocalUriHandler(
+rscore::Error registerLocalUriHandler(
                         const std::string& name,
-                        const core::http::UriHandlerFunction& handlerFunction);
+                        const rscore::http::UriHandlerFunction& handlerFunction);
 
 typedef boost::function<void(int, const std::string&)> PostbackHandlerContinuation;
 
@@ -169,24 +169,24 @@ typedef boost::function<void(int, const std::string&)> PostbackHandlerContinuati
 // details on the requirements of postback handlers
 typedef boost::function<void(const std::string&, const PostbackHandlerContinuation&)>
                                                       PostbackHandlerFunction;
-core::Error registerPostbackHandler(
+rscore::Error registerPostbackHandler(
                               const std::string& name,
                               const PostbackHandlerFunction& handlerFunction,
                               std::string* pShellCommand); 
                         
 // register an rpc method
-core::Error registerAsyncRpcMethod(
+rscore::Error registerAsyncRpcMethod(
                               const std::string& name,
-                              const core::json::JsonRpcAsyncFunction& function);
+                              const rscore::json::JsonRpcAsyncFunction& function);
 
 // register an rpc method
-core::Error registerRpcMethod(const std::string& name,
-                              const core::json::JsonRpcFunction& function);
+rscore::Error registerRpcMethod(const std::string& name,
+                              const rscore::json::JsonRpcFunction& function);
 
 
-core::Error executeAsync(const core::json::JsonRpcFunction& function,
-                         const core::json::JsonRpcRequest& request,
-                         core::json::JsonRpcResponse* pResponse);
+rscore::Error executeAsync(const rscore::json::JsonRpcFunction& function,
+                         const rscore::json::JsonRpcRequest& request,
+                         rscore::json::JsonRpcResponse* pResponse);
 
 
 // create a waitForMethod function -- when called this function will:
@@ -195,20 +195,20 @@ core::Error executeAsync(const core::json::JsonRpcFunction& function,
 //   (b) wait for the specified methodName to be returned from the client
 //   (c) automatically re-issue the event after a client-init
 //
-typedef boost::function<bool(core::json::JsonRpcRequest*, const ClientEvent&)> WaitForMethodFunction;
+typedef boost::function<bool(rscore::json::JsonRpcRequest*, const ClientEvent&)> WaitForMethodFunction;
 WaitForMethodFunction registerWaitForMethod(const std::string& methodName);
 
 namespace {
 
 template <typename T>
-core::Error rpcAsyncCoupleRunner(
-      boost::function<core::Error(const core::json::JsonRpcRequest&, T*)> initFunc,
-      boost::function<core::Error(const core::json::JsonRpcRequest&, const T&, core::json::JsonRpcResponse*)> workerFunc,
-      const core::json::JsonRpcRequest& request,
-      core::json::JsonRpcResponse* pResponse)
+rscore::Error rpcAsyncCoupleRunner(
+      boost::function<rscore::Error(const rscore::json::JsonRpcRequest&, T*)> initFunc,
+      boost::function<rscore::Error(const rscore::json::JsonRpcRequest&, const T&, rscore::json::JsonRpcResponse*)> workerFunc,
+      const rscore::json::JsonRpcRequest& request,
+      rscore::json::JsonRpcResponse* pResponse)
 {
    T state;
-   core::Error error = initFunc(request, &state);
+   rscore::Error error = initFunc(request, &state);
    if (error)
       return error;
 
@@ -228,10 +228,10 @@ core::Error rpcAsyncCoupleRunner(
 // The T type parameter represents the type of a value that initFunc produces
 // and workerFunc consumes. This can be used to pass context between the two.
 template <typename T>
-core::Error registerRpcAsyncCoupleMethod(
+rscore::Error registerRpcAsyncCoupleMethod(
       const std::string& name,
-      boost::function<core::Error(const core::json::JsonRpcRequest&, T*)> initFunc,
-      boost::function<core::Error(const core::json::JsonRpcRequest&, const T&, core::json::JsonRpcResponse*)> workerFunc)
+      boost::function<rscore::Error(const rscore::json::JsonRpcRequest&, T*)> initFunc,
+      boost::function<rscore::Error(const rscore::json::JsonRpcRequest&, const T&, rscore::json::JsonRpcResponse*)> workerFunc)
 {
    return registerRpcMethod(name, boost::bind(rpcAsyncCoupleRunner<T>,
                                               initFunc,
@@ -283,7 +283,7 @@ struct Events : boost::noncopyable
    boost::signal<void (ConsoleOutputType, const std::string&)>
                                              onConsoleOutput;
    boost::signal<void (ChangeSource)>        onDetectChanges;
-   boost::signal<void (core::FilePath)>      onSourceEditorFileSaved;
+   boost::signal<void (rscore::FilePath)>      onSourceEditorFileSaved;
    boost::signal<void(bool)>                 onDeferredInit;
    boost::signal<void(bool)>                 onBackgroundProcessing;
    boost::signal<void(bool)>                 onShutdown;
@@ -299,7 +299,7 @@ struct Events : boost::noncopyable
 Events& events();
 
 // ProcessSupervisor
-core::system::ProcessSupervisor& processSupervisor();
+rscore::system::ProcessSupervisor& processSupervisor();
 
 // schedule incremental work. execute will be called back periodically
 // (up to every 25ms if the process is completely idle). if execute
@@ -344,43 +344,43 @@ void scheduleDelayedWork(const boost::posix_time::time_duration& period,
                          bool idleOnly = true);
 
 
-core::Error readAndDecodeFile(const core::FilePath& filePath,
+rscore::Error readAndDecodeFile(const rscore::FilePath& filePath,
                               const std::string& encoding,
                               bool allowSubstChars,
                               std::string* pContents);
 
-core::Error convertToUtf8(const std::string& encodedContent,
+rscore::Error convertToUtf8(const std::string& encodedContent,
                           const std::string& encoding,
                           bool allowSubstChars,
                           std::string* pDecodedContent);
 
 // source R files
-core::Error sourceModuleRFile(const std::string& rSourceFile);   
-core::Error sourceModuleRFileWithResult(const std::string& rSourceFile,
-                                        const core::FilePath& workingDir,
-                                        core::system::ProcessResult* pResult);
+rscore::Error sourceModuleRFile(const std::string& rSourceFile);   
+rscore::Error sourceModuleRFileWithResult(const std::string& rSourceFile,
+                                        const rscore::FilePath& workingDir,
+                                        rscore::system::ProcessResult* pResult);
    
 // enque client events (note R methods can do this via .rs.enqueClientEvent)
 void enqueClientEvent(const ClientEvent& event);
 
 // check whether a directory is currently being monitored by one of our subsystems
-bool isDirectoryMonitored(const core::FilePath& directory);
+bool isDirectoryMonitored(const rscore::FilePath& directory);
 
 // check whether an R source file belongs to the package under development
-bool isRScriptInPackageBuildTarget(const core::FilePath& filePath);
+bool isRScriptInPackageBuildTarget(const rscore::FilePath& filePath);
 
 // convenience method for filtering out file listing and changes
-bool fileListingFilter(const core::FileInfo& fileInfo);
+bool fileListingFilter(const rscore::FileInfo& fileInfo);
 
 // enque file changed events
-void enqueFileChangedEvent(const core::system::FileChangeEvent& event);
-void enqueFileChangedEvents(const core::FilePath& vcsStatusRoot,
-                            const std::vector<core::system::FileChangeEvent>& events);
+void enqueFileChangedEvent(const rscore::system::FileChangeEvent& event);
+void enqueFileChangedEvents(const rscore::FilePath& vcsStatusRoot,
+                            const std::vector<rscore::system::FileChangeEvent>& events);
 
 
 // register a scratch path which is monitored.
-typedef boost::function<void(const core::system::FileChangeEvent&)> OnFileChange;
-core::FilePath registerMonitoredUserScratchDir(const std::string& dirName,
+typedef boost::function<void(const rscore::system::FileChangeEvent&)> OnFileChange;
+rscore::FilePath registerMonitoredUserScratchDir(const std::string& dirName,
                                                const OnFileChange& onFileChange);
 
 // write output to the console (convenience wrapper for enquing a 
@@ -394,11 +394,11 @@ void consoleWriteError(const std::string& message);
 // show an error dialog (convenience wrapper for enquing kShowErrorMessage)
 void showErrorMessage(const std::string& title, const std::string& message);
 
-void showFile(const core::FilePath& filePath,
+void showFile(const rscore::FilePath& filePath,
               const std::string& window = "_blank");
 
 
-void showContent(const std::string& title, const core::FilePath& filePath);
+void showContent(const std::string& title, const rscore::FilePath& filePath);
 
 std::string resourceFileAsString(const std::string& fileName);
 
@@ -406,8 +406,8 @@ bool portmapPathForLocalhostUrl(const std::string& url, std::string* pPath);
 
 std::string mapUrlPorts(const std::string& url);
 
-std::string pathRelativeTo(const core::FilePath& sourcePath,
-                           const core::FilePath& targetPath);
+std::string pathRelativeTo(const rscore::FilePath& sourcePath,
+                           const rscore::FilePath& targetPath);
 
 void activatePane(const std::string& pane);
 
@@ -418,16 +418,16 @@ std::string libPathsString();
 bool canBuildCpp();
 bool installRBuildTools(const std::string& action);
 bool haveRcppAttributes();
-bool isRtoolsCompatible(const core::r_util::RToolsInfo& rTools);
+bool isRtoolsCompatible(const rscore::r_util::RToolsInfo& rTools);
 bool addRtoolsToPathIfNecessary(std::string* pPath,
                                 std::string* pWarningMessage);
-bool addRtoolsToPathIfNecessary(core::system::Options* pEnvironment,
+bool addRtoolsToPathIfNecessary(rscore::system::Options* pEnvironment,
                                 std::string* pWarningMessage);
 
 #ifdef __APPLE__
 bool isOSXMavericks();
 bool hasOSXMavericksDeveloperTools();
-core::Error copyImageToCocoaPasteboard(const core::FilePath& filePath);
+rscore::Error copyImageToCocoaPasteboard(const rscore::FilePath& filePath);
 #else
 inline bool isOSXMavericks()
 {
@@ -437,9 +437,9 @@ inline bool hasOSXMavericksDeveloperTools()
 {
    return false;
 }
-inline core::Error copyImageToCocoaPasteboard(const core::FilePath& filePath)
+inline rscore::Error copyImageToCocoaPasteboard(const rscore::FilePath& filePath)
 {
-   return core::systemError(boost::system::errc::not_supported, ERROR_LOCATION);
+   return rscore::systemError(boost::system::errc::not_supported, ERROR_LOCATION);
 }
 #endif
 
@@ -450,17 +450,17 @@ struct VcsContext
    std::string svnRepositoryRoot;
    std::string gitRemoteOriginUrl;
 };
-VcsContext vcsContext(const core::FilePath& workingDir);
+VcsContext vcsContext(const rscore::FilePath& workingDir);
 
 std::string normalizeVcsOverride(const std::string& vcsOverride);
 
-core::FilePath shellWorkingDirectory();
+rscore::FilePath shellWorkingDirectory();
 
 // persist state accross suspend and resume
    
 typedef boost::function<void (const r::session::RSuspendOptions&,
-                              core::Settings*)> SuspendFunction;
-typedef boost::function<void(const core::Settings&)> ResumeFunction;
+                              rscore::Settings*)> SuspendFunction;
+typedef boost::function<void(const rscore::Settings&)> ResumeFunction;
 
 class SuspendHandler
 {
@@ -500,10 +500,10 @@ struct CompileOutput
    std::string output;
 };
 
-core::json::Object compileOutputAsJson(const CompileOutput& compileOutput);
+rscore::json::Object compileOutputAsJson(const CompileOutput& compileOutput);
 
 
-std::string previousRpubsUploadId(const core::FilePath& filePath);
+std::string previousRpubsUploadId(const rscore::FilePath& filePath);
 
 std::string CRANReposURL();
 
@@ -594,16 +594,16 @@ struct PackratContext
 bool isRequiredPackratInstalled();
 
 PackratContext packratContext();
-core::json::Object packratContextAsJson();
+rscore::json::Object packratContextAsJson();
 
-core::json::Object packratOptionsAsJson();
+rscore::json::Object packratOptionsAsJson();
 
 // R command invocation -- has two representations, one to be submitted
 // (shellCmd_) and one to show the user (cmdString_)
 class RCommand
 {
 public:
-   explicit RCommand(const core::FilePath& rBinDir)
+   explicit RCommand(const rscore::FilePath& rBinDir)
       : shellCmd_(buildRCmd(rBinDir))
    {
 #ifdef _WIN32
@@ -615,7 +615,7 @@ public:
       // set escape mode to files-only. this is so that when we
       // add the group of extra arguments from the user that we
       // don't put quotes around it.
-      shellCmd_ << core::shell_utils::EscapeFilesOnly;
+      shellCmd_ << rscore::shell_utils::EscapeFilesOnly;
    }
 
    RCommand& operator<<(const std::string& arg)
@@ -628,7 +628,7 @@ public:
       return *this;
    }
 
-   RCommand& operator<<(const core::FilePath& arg)
+   RCommand& operator<<(const rscore::FilePath& arg)
    {
       cmdString_ += " " + arg.absolutePath();
       shellCmd_ << arg;
@@ -641,18 +641,18 @@ public:
       return cmdString_;
    }
 
-   const core::shell_utils::ShellCommand& shellCommand() const
+   const rscore::shell_utils::ShellCommand& shellCommand() const
    {
       return shellCmd_;
    }
 
 private:
-   static core::shell_utils::ShellCommand buildRCmd(
-                                 const core::FilePath& rBinDir);
+   static rscore::shell_utils::ShellCommand buildRCmd(
+                                 const rscore::FilePath& rBinDir);
 
 private:
    std::string cmdString_;
-   core::shell_utils::ShellCommand shellCmd_;
+   rscore::shell_utils::ShellCommand shellCmd_;
 };
 
 
@@ -671,8 +671,8 @@ public:
 
    const std::string& sessionTempPath() const { return sessionTempPath_; }
 
-   core::Error copy(const core::FilePath& sourceDir,
-                    const core::FilePath& destinationDir) const;
+   rscore::Error copy(const rscore::FilePath& sourceDir,
+                    const rscore::FilePath& destinationDir) const;
 
 private:
    std::string sessionTempPath_;
@@ -680,23 +680,23 @@ private:
 
 void addViewerHistoryEntry(const ViewerHistoryEntry& entry);
 
-core::Error recursiveCopyDirectory(const core::FilePath& fromDir,
-                                   const core::FilePath& toDir);
+rscore::Error recursiveCopyDirectory(const rscore::FilePath& fromDir,
+                                   const rscore::FilePath& toDir);
 
 std::string sessionTempDirUrl(const std::string& sessionTempPath);
 
-core::Error uniqueSaveStem(const core::FilePath& directoryPath,
+rscore::Error uniqueSaveStem(const rscore::FilePath& directoryPath,
                            const std::string& base,
                            std::string* pStem);
 
-core::json::Object plotExportFormat(const std::string& name,
+rscore::json::Object plotExportFormat(const std::string& name,
                                     const std::string& extension);
 
 
-core::Error createSelfContainedHtml(const core::FilePath& sourceFilePath,
-                                    const core::FilePath& targetFilePath);
+rscore::Error createSelfContainedHtml(const rscore::FilePath& sourceFilePath,
+                                    const rscore::FilePath& targetFilePath);
 
-bool isUserFile(const core::FilePath& filePath);
+bool isUserFile(const rscore::FilePath& filePath);
 
 } // namespace module_context
 } // namespace session
diff --git a/src/cpp/session/include/session/SessionOptions.hpp b/src/cpp/session/include/session/SessionOptions.hpp
index 9624414..7fa307c 100644
--- a/src/cpp/session/include/session/SessionOptions.hpp
+++ b/src/cpp/session/include/session/SessionOptions.hpp
@@ -30,7 +30,7 @@
 
 #include <session/SessionConstants.hpp>
 
-namespace core {
+namespace rscore {
    class ProgramStatus;
 }
 
@@ -53,7 +53,7 @@ private:
 
 public:
    // read options  
-   core::ProgramStatus read(int argc, char * const argv[]);   
+   rscore::ProgramStatus read(int argc, char * const argv[]);   
    virtual ~Options() {}
    
    bool verifyInstallation() const
@@ -61,12 +61,12 @@ public:
       return verifyInstallation_;
    }
 
-   core::FilePath verifyInstallationHomeDir() const
+   rscore::FilePath verifyInstallationHomeDir() const
    {
       if (!verifyInstallationHomeDir_.empty())
-         return core::FilePath(verifyInstallationHomeDir_.c_str());
+         return rscore::FilePath(verifyInstallationHomeDir_.c_str());
       else
-         return core::FilePath();
+         return rscore::FilePath();
    }
 
    std::string programIdentity() const 
@@ -85,12 +85,12 @@ public:
    }
    
    // agreement
-   core::FilePath agreementFilePath() const
+   rscore::FilePath agreementFilePath() const
    { 
       if (!agreementFilePath_.empty())
-         return core::FilePath(agreementFilePath_.c_str());
+         return rscore::FilePath(agreementFilePath_.c_str());
       else
-         return core::FilePath();
+         return rscore::FilePath();
    }
 
    // docs
@@ -105,9 +105,9 @@ public:
       return std::string(wwwLocalPath_.c_str());
    }
 
-   core::FilePath wwwSymbolMapsPath() const
+   rscore::FilePath wwwSymbolMapsPath() const
    {
-      return core::FilePath(wwwSymbolMapsPath_.c_str());
+      return rscore::FilePath(wwwSymbolMapsPath_.c_str());
    }
 
    std::string wwwPort() const
@@ -125,9 +125,9 @@ public:
       return std::string(secret_.c_str());
    }
 
-   core::FilePath preflightScriptPath() const
+   rscore::FilePath preflightScriptPath() const
    {
-      return core::FilePath(preflightScript_.c_str());
+      return rscore::FilePath(preflightScript_.c_str());
    }
 
    int timeoutMinutes() const { return timeoutMinutes_; }
@@ -144,29 +144,29 @@ public:
 
    unsigned int minimumUserId() const { return 100; }
    
-   core::FilePath coreRSourcePath() const 
+   rscore::FilePath coreRSourcePath() const 
    { 
-      return core::FilePath(coreRSourcePath_.c_str());
+      return rscore::FilePath(coreRSourcePath_.c_str());
    }
    
-   core::FilePath modulesRSourcePath() const 
+   rscore::FilePath modulesRSourcePath() const 
    { 
-      return core::FilePath(modulesRSourcePath_.c_str()); 
+      return rscore::FilePath(modulesRSourcePath_.c_str()); 
    }
 
-   core::FilePath sessionLibraryPath() const
+   rscore::FilePath sessionLibraryPath() const
    {
-      return core::FilePath(sessionLibraryPath_.c_str());
+      return rscore::FilePath(sessionLibraryPath_.c_str());
    }
    
-   core::FilePath sessionPackagesPath() const
+   rscore::FilePath sessionPackagesPath() const
    {
-      return core::FilePath(sessionPackagesPath_.c_str());
+      return rscore::FilePath(sessionPackagesPath_.c_str());
    }
 
-   core::FilePath sessionPackageArchivesPath() const
+   rscore::FilePath sessionPackageArchivesPath() const
    {
-      return core::FilePath(sessionPackageArchivesPath_.c_str());
+      return rscore::FilePath(sessionPackageArchivesPath_.c_str());
    }
 
    
@@ -185,9 +185,9 @@ public:
       return rCompatibleGraphicsEngineVersion_;
    }
 
-   core::FilePath rResourcesPath() const
+   rscore::FilePath rResourcesPath() const
    {
-      return core::FilePath(rResourcesPath_.c_str());
+      return rscore::FilePath(rResourcesPath_.c_str());
    }
 
    std::string rHomeDirOverride()
@@ -211,59 +211,59 @@ public:
    bool limitXfsDiskQuota() const { return limitXfsDiskQuota_; }
    
    // external
-   core::FilePath rpostbackPath() const
+   rscore::FilePath rpostbackPath() const
    {
-      return core::FilePath(rpostbackPath_.c_str());
+      return rscore::FilePath(rpostbackPath_.c_str());
    }
 
-   core::FilePath consoleIoPath() const
+   rscore::FilePath consoleIoPath() const
    {
-      return core::FilePath(consoleIoPath_.c_str());
+      return rscore::FilePath(consoleIoPath_.c_str());
    }
 
-   core::FilePath gnudiffPath() const
+   rscore::FilePath gnudiffPath() const
    {
-      return core::FilePath(gnudiffPath_.c_str());
+      return rscore::FilePath(gnudiffPath_.c_str());
    }
 
-   core::FilePath gnugrepPath() const
+   rscore::FilePath gnugrepPath() const
    {
-      return core::FilePath(gnugrepPath_.c_str());
+      return rscore::FilePath(gnugrepPath_.c_str());
    }
 
-   core::FilePath msysSshPath() const
+   rscore::FilePath msysSshPath() const
    {
-      return core::FilePath(msysSshPath_.c_str());
+      return rscore::FilePath(msysSshPath_.c_str());
    }
 
-   core::FilePath sumatraPath() const
+   rscore::FilePath sumatraPath() const
    {
-      return core::FilePath(sumatraPath_.c_str());
+      return rscore::FilePath(sumatraPath_.c_str());
    }
    
-   core::FilePath hunspellDictionariesPath() const
+   rscore::FilePath hunspellDictionariesPath() const
    {
-      return core::FilePath(hunspellDictionariesPath_.c_str());
+      return rscore::FilePath(hunspellDictionariesPath_.c_str());
    }
 
-   core::FilePath mathjaxPath() const
+   rscore::FilePath mathjaxPath() const
    {
-      return core::FilePath(mathjaxPath_.c_str());
+      return rscore::FilePath(mathjaxPath_.c_str());
    }
 
-   core::FilePath pandocPath() const
+   rscore::FilePath pandocPath() const
    {
-      return core::FilePath(pandocPath_.c_str());
+      return rscore::FilePath(pandocPath_.c_str());
    }
 
-   core::FilePath libclangPath() const
+   rscore::FilePath libclangPath() const
    {
-      return core::FilePath(libclangPath_.c_str());
+      return rscore::FilePath(libclangPath_.c_str());
    }
 
-   core::FilePath libclangHeadersPath() const
+   rscore::FilePath libclangHeadersPath() const
    {
-      return core::FilePath(libclangHeadersPath_.c_str());
+      return rscore::FilePath(libclangHeadersPath_.c_str());
    }
 
    bool allowFileDownloads() const
@@ -317,43 +317,43 @@ public:
       return showUserIdentity_;
    }
 
-   core::FilePath userHomePath() const 
+   rscore::FilePath userHomePath() const 
    { 
-      return core::FilePath(userHomePath_.c_str());
+      return rscore::FilePath(userHomePath_.c_str());
    }
    
-   core::FilePath userScratchPath() const 
+   rscore::FilePath userScratchPath() const 
    { 
-      return core::FilePath(userScratchPath_.c_str()); 
+      return rscore::FilePath(userScratchPath_.c_str()); 
    }
 
-   core::FilePath userLogPath() const
+   rscore::FilePath userLogPath() const
    {
       return userScratchPath().childPath("log");
    }
 
-   core::FilePath initialWorkingDirOverride()
+   rscore::FilePath initialWorkingDirOverride()
    {
       if (!initialWorkingDirOverride_.empty())
-         return core::FilePath(initialWorkingDirOverride_.c_str());
+         return rscore::FilePath(initialWorkingDirOverride_.c_str());
       else
-         return core::FilePath();
+         return rscore::FilePath();
    }
 
-   core::FilePath initialEnvironmentFileOverride()
+   rscore::FilePath initialEnvironmentFileOverride()
    {
       if (!initialEnvironmentFileOverride_.empty())
-         return core::FilePath(initialEnvironmentFileOverride_.c_str());
+         return rscore::FilePath(initialEnvironmentFileOverride_.c_str());
       else
-         return core::FilePath();
+         return rscore::FilePath();
    }
 
-   core::FilePath initialProjectPath()
+   rscore::FilePath initialProjectPath()
    {
       if (!initialProjectPath_.empty())
-         return core::FilePath(initialProjectPath_.c_str());
+         return rscore::FilePath(initialProjectPath_.c_str());
       else
-         return core::FilePath();
+         return rscore::FilePath();
    }
 
    void clearInitialContextSettings()
@@ -366,16 +366,16 @@ public:
    // The line ending we use when working with source documents
    // in memory. This doesn't really make sense for the user to
    // change.
-   core::string_utils::LineEnding sourceLineEnding() const
+   rscore::string_utils::LineEnding sourceLineEnding() const
    {
-      return core::string_utils::LineEndingPosix;
+      return rscore::string_utils::LineEndingPosix;
    }
 
    // The line ending we persist to disk with. This could potentially
    // be a per-user or even per-file option.
-   core::string_utils::LineEnding sourcePersistLineEnding() const
+   rscore::string_utils::LineEnding sourcePersistLineEnding() const
    {
-      return core::string_utils::LineEndingNative;
+      return rscore::string_utils::LineEndingNative;
    }
 
    std::string monitorSharedSecret() const
@@ -396,13 +396,13 @@ public:
    bool getBoolOverlayOption(const std::string& name);
 
 private:
-   void resolvePath(const core::FilePath& resourcePath,
+   void resolvePath(const rscore::FilePath& resourcePath,
                     std::string* pPath);
-   void resolvePostbackPath(const core::FilePath& resourcePath,
+   void resolvePostbackPath(const rscore::FilePath& resourcePath,
                             std::string* pPath);
-   void resolvePandocPath(const core::FilePath& resourcePath, std::string* pPath);
+   void resolvePandocPath(const rscore::FilePath& resourcePath, std::string* pPath);
 
-   void resolveRsclangPath(const core::FilePath& resourcePath, std::string* pPath);
+   void resolveRsclangPath(const rscore::FilePath& resourcePath, std::string* pPath);
 
    void addOverlayOptions(boost::program_options::options_description* pOpt);
    bool validateOverlayOptions(std::string* pErrMsg);
diff --git a/src/cpp/session/include/session/SessionPersistentState.hpp b/src/cpp/session/include/session/SessionPersistentState.hpp
index 65de93b..720debd 100644
--- a/src/cpp/session/include/session/SessionPersistentState.hpp
+++ b/src/cpp/session/include/session/SessionPersistentState.hpp
@@ -37,7 +37,7 @@ private:
 public:
    // COPYING: boost::noncopyable
    
-   core::Error initialize();
+   rscore::Error initialize();
    
    // active-client-id
    std::string activeClientId();
@@ -57,12 +57,12 @@ public:
                       const std::string& hashValue);
 
    // get underlying settings
-   core::Settings& settings() { return settings_; }
+   rscore::Settings& settings() { return settings_; }
 
 private:
    bool serverMode_;
    std::string desktopClientId_;
-   core::Settings settings_;
+   rscore::Settings settings_;
 };
    
 } // namespace session
diff --git a/src/cpp/session/include/session/SessionSSH.hpp b/src/cpp/session/include/session/SessionSSH.hpp
index 752c913..f3450db 100644
--- a/src/cpp/session/include/session/SessionSSH.hpp
+++ b/src/cpp/session/include/session/SessionSSH.hpp
@@ -32,7 +32,7 @@ namespace ssh {
 class ProcessOptionsCreator
 {
 public:
-   ProcessOptionsCreator(core::system::ProcessOptions baseOptions)
+   ProcessOptionsCreator(rscore::system::ProcessOptions baseOptions)
       : baseOptions_(baseOptions)
    {
    }
@@ -50,20 +50,20 @@ public:
    void rmEnv(const std::string& name);
 
    // Add a directory to the path of the child process
-   void addToPath(const core::FilePath& dir);
+   void addToPath(const rscore::FilePath& dir);
 
-   void setWorkingDirectory(const core::FilePath& dir);
+   void setWorkingDirectory(const rscore::FilePath& dir);
    void clearWorkingDirectory();
 
    // Create the actual ProcessOptions object from the state of this
    // object.
-   core::system::ProcessOptions processOptions() const;
+   rscore::system::ProcessOptions processOptions() const;
 
 private:
-   core::system::ProcessOptions baseOptions_;
+   rscore::system::ProcessOptions baseOptions_;
    std::map<std::string, std::string> env_;
-   std::vector<core::FilePath> pathDirs_;
-   core::FilePath workingDir_;
+   std::vector<rscore::FilePath> pathDirs_;
+   rscore::FilePath workingDir_;
 };
 
 } // namespace ssh
diff --git a/src/cpp/session/include/session/SessionSourceDatabase.hpp b/src/cpp/session/include/session/SessionSourceDatabase.hpp
index 8880395..7f7abfa 100644
--- a/src/cpp/session/include/session/SessionSourceDatabase.hpp
+++ b/src/cpp/session/include/session/SessionSourceDatabase.hpp
@@ -26,7 +26,7 @@
 #include <core/FilePath.hpp>
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -51,7 +51,7 @@ public:
    bool dirty() const { return dirty_; }
    double created() const { return created_; }
    bool sourceOnSave() const { return sourceOnSave_; }
-   const core::json::Object& properties() const { return properties_; }
+   const rscore::json::Object& properties() const { return properties_; }
    const std::string& folds() const { return folds_; }
    std::string getProperty(const std::string& name) const;
 
@@ -62,10 +62,10 @@ public:
    void setContents(const std::string& contents);
 
    // set contents from file
-   core::Error setPathAndContents(const std::string& path,
+   rscore::Error setPathAndContents(const std::string& path,
                                   bool allowSubstChars = true);
 
-   core::Error updateDirty();
+   rscore::Error updateDirty();
 
    // set dirty
    void setDirty(bool dirty)
@@ -98,20 +98,20 @@ public:
    // properties that already exist but are not present in the given object are
    // left unchanged. if an entry in the given object has a null value, that
    // property should be removed.
-   void editProperties(core::json::Object& properties);
+   void editProperties(rscore::json::Object& properties);
 
    void setType(const std::string& type)
    {
       type_ = type;
    }
 
-   core::Error readFromJson(core::json::Object* pDocJson);
-   void writeToJson(core::json::Object* pDocJson) const;
+   rscore::Error readFromJson(rscore::json::Object* pDocJson);
+   void writeToJson(rscore::json::Object* pDocJson) const;
 
-   core::Error writeToFile(const core::FilePath& filePath) const;
+   rscore::Error writeToFile(const rscore::FilePath& filePath) const;
 
 private:
-   void editProperty(const core::json::Object::value_type& property);
+   void editProperty(const rscore::json::Object::value_type& property);
 
 private:
    std::string id_;
@@ -125,20 +125,20 @@ private:
    bool dirty_;
    double created_;
    bool sourceOnSave_;
-   core::json::Object properties_;
+   rscore::json::Object properties_;
 };
 
 bool sortByCreated(const boost::shared_ptr<SourceDocument>& pDoc1,
                    const boost::shared_ptr<SourceDocument>& pDoc2);
 
-core::FilePath path();
-core::Error get(const std::string& id, boost::shared_ptr<SourceDocument> pDoc);
-core::Error getDurableProperties(const std::string& path,
-                                 core::json::Object* pProperties);
-core::Error list(std::vector<boost::shared_ptr<SourceDocument> >* pDocs);
-core::Error put(boost::shared_ptr<SourceDocument> pDoc);
-core::Error remove(const std::string& id);
-core::Error removeAll();
+rscore::FilePath path();
+rscore::Error get(const std::string& id, boost::shared_ptr<SourceDocument> pDoc);
+rscore::Error getDurableProperties(const std::string& path,
+                                 rscore::json::Object* pProperties);
+rscore::Error list(std::vector<boost::shared_ptr<SourceDocument> >* pDocs);
+rscore::Error put(boost::shared_ptr<SourceDocument> pDoc);
+rscore::Error remove(const std::string& id);
+rscore::Error removeAll();
 
 // source database events
 struct Events : boost::noncopyable
@@ -150,7 +150,7 @@ struct Events : boost::noncopyable
 
 Events& events();
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace source_database
 } // namesapce session
diff --git a/src/cpp/session/include/session/SessionUserSettings.hpp b/src/cpp/session/include/session/SessionUserSettings.hpp
index 844f9df..d9a547c 100644
--- a/src/cpp/session/include/session/SessionUserSettings.hpp
+++ b/src/cpp/session/include/session/SessionUserSettings.hpp
@@ -62,7 +62,7 @@ public:
    // COPYING: boost::noncopyable
    
    // intialize
-   core::Error initialize();
+   rscore::Error initialize();
    
    // enable batch updates
    void beginUpdate() { settings_.beginUpdate(); }
@@ -83,8 +83,8 @@ public:
    bool autoCreatedProfile() const;
    void setAutoCreatedProfile(bool autoCreated) ;
 
-   core::json::Object uiPrefs() const;
-   void setUiPrefs(const core::json::Object& prefsObject);
+   rscore::json::Object uiPrefs() const;
+   void setUiPrefs(const rscore::json::Object& prefsObject);
 
    // readers for ui prefs
    bool useSpacesForTab() const;
@@ -110,8 +110,8 @@ public:
    bool loadRData() const;
    void setLoadRData(bool loadRData);
 
-   core::FilePath initialWorkingDirectory() const;
-   void setInitialWorkingDirectory(const core::FilePath& filePath);
+   rscore::FilePath initialWorkingDirectory() const;
+   void setInitialWorkingDirectory(const rscore::FilePath& filePath);
 
    bool alwaysSaveHistory() const;
    void setAlwaysSaveHistory(bool alwaysSave);
@@ -128,14 +128,14 @@ public:
    bool vcsEnabled() const;
    void setVcsEnabled(bool enabled);
 
-   core::FilePath gitExePath() const;
-   void setGitExePath(const core::FilePath& gitExePath);
+   rscore::FilePath gitExePath() const;
+   void setGitExePath(const rscore::FilePath& gitExePath);
 
-   core::FilePath svnExePath() const;
-   void setSvnExePath(const core::FilePath& svnExePath);
+   rscore::FilePath svnExePath() const;
+   void setSvnExePath(const rscore::FilePath& svnExePath);
 
-   core::FilePath vcsTerminalPath() const;
-   void setVcsTerminalPath(const core::FilePath& terminalPath);
+   rscore::FilePath vcsTerminalPath() const;
+   void setVcsTerminalPath(const rscore::FilePath& terminalPath);
 
    bool vcsUseGitBash() const;
    void setVcsUseGitBash(bool useGitBash);
@@ -173,13 +173,13 @@ public:
 private:
 
    void onSettingsFileChanged(
-                        const core::system::FileChangeEvent& changeEvent);
+                        const rscore::system::FileChangeEvent& changeEvent);
 
-   core::FilePath getWorkingDirectoryValue(const std::string& key) const;
+   rscore::FilePath getWorkingDirectoryValue(const std::string& key) const;
    void setWorkingDirectoryValue(const std::string& key,
-                                 const core::FilePath& filePath) ;
+                                 const rscore::FilePath& filePath) ;
 
-   void updatePrefsCache(const core::json::Object& uiPrefs) const;
+   void updatePrefsCache(const rscore::json::Object& uiPrefs) const;
 
    template <typename T>
    T readUiPref(const boost::scoped_ptr<T>& pPref) const
@@ -191,8 +191,8 @@ private:
    }
 
 private:
-   core::FilePath settingsFilePath_;
-   core::Settings settings_;
+   rscore::FilePath settingsFilePath_;
+   rscore::Settings settings_;
 
    // cached prefs values
    mutable boost::scoped_ptr<bool> pUseSpacesForTab_;
@@ -204,7 +204,7 @@ private:
    mutable boost::scoped_ptr<std::string> pDefaultLatexProgram_;
    mutable boost::scoped_ptr<bool> pAlwaysEnableRnwConcordance_;
    mutable boost::scoped_ptr<std::string> pSpellingLanguage_;
-   mutable boost::scoped_ptr<core::json::Array> pSpellingCustomDicts_;
+   mutable boost::scoped_ptr<rscore::json::Array> pSpellingCustomDicts_;
    mutable boost::scoped_ptr<bool> pHandleErrorsInUserCodeOnly_;
    mutable boost::scoped_ptr<int> pShinyViewerType_;
 };
diff --git a/src/cpp/session/include/session/projects/SessionProjects.hpp b/src/cpp/session/include/session/projects/SessionProjects.hpp
index f6c4ae2..4b0a9b2 100644
--- a/src/cpp/session/include/session/projects/SessionProjects.hpp
+++ b/src/cpp/session/include/session/projects/SessionProjects.hpp
@@ -46,9 +46,9 @@ namespace projects {
 // file monitoring callbacks (all callbacks are optional)
 struct FileMonitorCallbacks
 {
-   boost::function<void(const tree<core::FileInfo>&)> onMonitoringEnabled;
+   boost::function<void(const tree<rscore::FileInfo>&)> onMonitoringEnabled;
    boost::function<void(
-         const std::vector<core::system::FileChangeEvent>&)> onFilesChanged;
+         const std::vector<rscore::system::FileChangeEvent>&)> onFilesChanged;
    boost::function<void()> onMonitoringDisabled;
 };
 
@@ -83,10 +83,10 @@ public:
    }
    virtual ~ProjectContext() {}
 
-   core::Error startup(const core::FilePath& projectFile,
+   rscore::Error startup(const rscore::FilePath& projectFile,
                        std::string* pUserErrMsg);
 
-   core::Error initialize();
+   rscore::Error initialize();
 
 public:
    // these functions can be called even when there is no project
@@ -98,17 +98,17 @@ public:
    void setNextSessionProject(const std::string& nextSessionProject);
 
    // last project path -- used to implement restore last project user setting
-   core::FilePath lastProjectPath() const;
-   void setLastProjectPath(const core::FilePath& lastProjectPath);
+   rscore::FilePath lastProjectPath() const;
+   void setLastProjectPath(const rscore::FilePath& lastProjectPath);
 
-   const core::FilePath& file() const { return file_; }
-   const core::FilePath& directory() const { return directory_; }
-   const core::FilePath& scratchPath() const { return scratchPath_; }
+   const rscore::FilePath& file() const { return file_; }
+   const rscore::FilePath& directory() const { return directory_; }
+   const rscore::FilePath& scratchPath() const { return scratchPath_; }
 
-   core::FilePath oldScratchPath() const;
+   rscore::FilePath oldScratchPath() const;
 
-   const core::r_util::RProjectConfig& config() const { return config_; }
-   void setConfig(const core::r_util::RProjectConfig& config)
+   const rscore::r_util::RProjectConfig& config() const { return config_; }
+   void setConfig(const rscore::r_util::RProjectConfig& config)
    {
       config_ = config;
       updateDefaultEncoding();
@@ -116,11 +116,11 @@ public:
       updatePackageInfo();
    }
 
-   core::Error readVcsOptions(RProjectVcsOptions* pOptions) const;
-   core::Error writeVcsOptions(const RProjectVcsOptions& options) const;
+   rscore::Error readVcsOptions(RProjectVcsOptions* pOptions) const;
+   rscore::Error writeVcsOptions(const RProjectVcsOptions& options) const;
 
-   core::Error readBuildOptions(RProjectBuildOptions* pOptions);
-   core::Error writeBuildOptions(const RProjectBuildOptions& options);
+   rscore::Error readBuildOptions(RProjectBuildOptions* pOptions);
+   rscore::Error writeBuildOptions(const RProjectBuildOptions& options);
 
    // code which needs to rely on the encoding should call this method
    // rather than getting the encoding off of the config (because the
@@ -131,14 +131,14 @@ public:
    std::string defaultEncoding() const;
 
    // computed absolute path to project build target directory
-   const core::FilePath& buildTargetPath() const
+   const rscore::FilePath& buildTargetPath() const
    {
       return buildTargetPath_;
    }
 
-   core::json::Object uiPrefs() const;
+   rscore::json::Object uiPrefs() const;
 
-   core::json::Array openDocs() const;
+   rscore::json::Array openDocs() const;
 
    // current build options (note that these are not synchronized
    // accross processes!)
@@ -148,7 +148,7 @@ public:
    }
 
    // current package info (if this is a package)
-   const core::r_util::RPackageInfo& packageInfo() const
+   const rscore::r_util::RPackageInfo& packageInfo() const
    {
       return packageInfo_;
    }
@@ -160,7 +160,7 @@ public:
 
    // are we monitoring the specified directory? (used by other modules to
    // suppress file monitoring if the project already has it covered)
-   bool isMonitoringDirectory(const core::FilePath& directory) const;
+   bool isMonitoringDirectory(const rscore::FilePath& directory) const;
 
    // subscribe to file monitor notifications -- note that to ensure
    // receipt of the onMonitoringEnabled callback subscription should
@@ -169,8 +169,8 @@ public:
                                const FileMonitorCallbacks& cb);
 
 public:
-   static core::r_util::RProjectBuildDefaults buildDefaults();
-   static core::r_util::RProjectConfig defaultConfig();
+   static rscore::r_util::RProjectBuildDefaults buildDefaults();
+   static rscore::r_util::RProjectConfig defaultConfig();
 
 private:
    // deferred init handler (this allows other modules to reliably subscribe
@@ -179,14 +179,14 @@ private:
    void onDeferredInit(bool newSession);
 
    // file monitor event handlers
-   void fileMonitorRegistered(core::system::file_monitor::Handle handle,
-                              const tree<core::FileInfo>& files);
+   void fileMonitorRegistered(rscore::system::file_monitor::Handle handle,
+                              const tree<rscore::FileInfo>& files);
    void fileMonitorFilesChanged(
-                   const std::vector<core::system::FileChangeEvent>& events);
-   void fileMonitorTermination(const core::Error& error);
+                   const std::vector<rscore::system::FileChangeEvent>& events);
+   void fileMonitorTermination(const rscore::Error& error);
 
-   core::FilePath vcsOptionsFilePath() const;
-   core::Error buildOptionsFile(core::Settings* pOptionsFile) const;
+   rscore::FilePath vcsOptionsFilePath() const;
+   rscore::Error buildOptionsFile(rscore::Settings* pOptionsFile) const;
 
    void updateDefaultEncoding();
    void updateBuildTargetPath();
@@ -195,19 +195,19 @@ private:
    void augmentRbuildignore();
 
 private:
-   core::FilePath file_;
-   core::FilePath directory_;
-   core::FilePath scratchPath_;
-   core::r_util::RProjectConfig config_;
+   rscore::FilePath file_;
+   rscore::FilePath directory_;
+   rscore::FilePath scratchPath_;
+   rscore::r_util::RProjectConfig config_;
    std::string defaultEncoding_;
-   core::FilePath buildTargetPath_;
+   rscore::FilePath buildTargetPath_;
    RProjectBuildOptions buildOptions_;
-   core::r_util::RPackageInfo packageInfo_;
+   rscore::r_util::RPackageInfo packageInfo_;
 
    bool hasFileMonitor_;
    std::vector<std::string> monitorSubscribers_;
-   boost::signal<void(const tree<core::FileInfo>&)> onMonitoringEnabled_;
-   boost::signal<void(const std::vector<core::system::FileChangeEvent>&)>
+   boost::signal<void(const tree<rscore::FileInfo>&)> onMonitoringEnabled_;
+   boost::signal<void(const std::vector<rscore::system::FileChangeEvent>&)>
                                                             onFilesChanged_;
    boost::signal<void()> onMonitoringDisabled_;
 };
diff --git a/src/cpp/session/include/session/worker_safe/session/SessionClientEvent.hpp b/src/cpp/session/include/session/worker_safe/session/SessionClientEvent.hpp
index 04980f2..e42aa36 100644
--- a/src/cpp/session/include/session/worker_safe/session/SessionClientEvent.hpp
+++ b/src/cpp/session/include/session/worker_safe/session/SessionClientEvent.hpp
@@ -20,7 +20,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -126,27 +126,27 @@ class ClientEvent
 public:
    explicit ClientEvent(int type)
    {
-      init(type, core::json::Value());
+      init(type, rscore::json::Value());
    }
    
-   ClientEvent(int type, const core::json::Value& data)
+   ClientEvent(int type, const rscore::json::Value& data)
    {
       init(type, data);
    }
    
    ClientEvent(int type, const char* data)
    {
-      init(type, core::json::Value(std::string(data)));
+      init(type, rscore::json::Value(std::string(data)));
    }
    
    ClientEvent(int type, const std::string& data)
    {
-      init(type, core::json::Value(data));
+      init(type, rscore::json::Value(data));
    }
    
    ClientEvent(int type, bool data)
    {
-      core::json::Object boolObject ;
+      rscore::json::Object boolObject ;
       boolObject["value"] = data;
       init(type, boolObject);
    }
@@ -156,17 +156,17 @@ public:
 public:
    int type() const { return type_; }
    std::string typeName() const;
-   const core::json::Value& data() const { return data_; }
+   const rscore::json::Value& data() const { return data_; }
    const std::string& id() const { return id_; }
    
-   void asJsonObject(int id, core::json::Object* pObject) const;
+   void asJsonObject(int id, rscore::json::Object* pObject) const;
      
 private:
-   void init(int type, const core::json::Value& data);
+   void init(int type, const rscore::json::Value& data);
   
 private:
    int type_ ;
-   core::json::Value data_ ;
+   rscore::json::Value data_ ;
    std::string id_;
 };
 
diff --git a/src/cpp/session/include/session/worker_safe/session/SessionWorkerContext.hpp b/src/cpp/session/include/session/worker_safe/session/SessionWorkerContext.hpp
index 0dd0f14..5d49b71 100644
--- a/src/cpp/session/include/session/worker_safe/session/SessionWorkerContext.hpp
+++ b/src/cpp/session/include/session/worker_safe/session/SessionWorkerContext.hpp
@@ -26,8 +26,8 @@ namespace session {
 namespace worker_context {
     
 // register a worker method
-core::Error registerWorkerRpcMethod(const std::string& name,
-                                    const core::json::JsonRpcFunction& function);
+rscore::Error registerWorkerRpcMethod(const std::string& name,
+                                    const rscore::json::JsonRpcFunction& function);
 
 
 // enque client event
diff --git a/src/cpp/session/modules/SessionAbout.cpp b/src/cpp/session/modules/SessionAbout.cpp
index 1767c37..8d18cad 100644
--- a/src/cpp/session/modules/SessionAbout.cpp
+++ b/src/cpp/session/modules/SessionAbout.cpp
@@ -25,7 +25,7 @@
 
 #include "session-config.h"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/SessionAbout.hpp b/src/cpp/session/modules/SessionAbout.hpp
index c6c9077..203369c 100644
--- a/src/cpp/session/modules/SessionAbout.hpp
+++ b/src/cpp/session/modules/SessionAbout.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_ABOUT_HPP
 #define SESSION_ABOUT_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules {
 namespace about {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace about
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionAgreement.cpp b/src/cpp/session/modules/SessionAgreement.cpp
index 8f250c4..9591ab9 100644
--- a/src/cpp/session/modules/SessionAgreement.cpp
+++ b/src/cpp/session/modules/SessionAgreement.cpp
@@ -33,7 +33,7 @@
 #include <session/SessionUserSettings.hpp>
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
diff --git a/src/cpp/session/modules/SessionAgreement.hpp b/src/cpp/session/modules/SessionAgreement.hpp
index 94ea5b9..82e0761 100644
--- a/src/cpp/session/modules/SessionAgreement.hpp
+++ b/src/cpp/session/modules/SessionAgreement.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/JsonRpc.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -28,9 +28,9 @@ namespace agreement {
 
 bool hasAgreement();
 
-core::json::Value pendingAgreement();
+rscore::json::Value pendingAgreement();
    
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace agreeement
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionAskPass.cpp b/src/cpp/session/modules/SessionAskPass.cpp
index b3b04ec..48c35f6 100644
--- a/src/cpp/session/modules/SessionAskPass.cpp
+++ b/src/cpp/session/modules/SessionAskPass.cpp
@@ -34,7 +34,7 @@
 #endif
 
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace modules { 
@@ -103,7 +103,7 @@ Error askForPassword(const std::string& prompt,
    ClientEvent askPassEvent(client_events::kAskPass, payload);
 
    // wait for method
-   core::json::JsonRpcRequest request;
+   rscore::json::JsonRpcRequest request;
    if (!s_waitForAskPass(&request, askPassEvent))
    {
       return systemError(boost::system::errc::operation_canceled,
@@ -133,7 +133,7 @@ Error askForPassword(const std::string& prompt,
    if (options().programMode() == kSessionProgramModeServer)
    {
       // In server mode, passphrases are encrypted
-      error = core::system::crypto::rsaPrivateDecrypt(
+      error = rscore::system::crypto::rsaPrivateDecrypt(
                                              pInput->password,
                                              &pInput->password);
       if (error)
diff --git a/src/cpp/session/modules/SessionAskPass.hpp b/src/cpp/session/modules/SessionAskPass.hpp
index c4e12ab..b9b8db5 100644
--- a/src/cpp/session/modules/SessionAskPass.hpp
+++ b/src/cpp/session/modules/SessionAskPass.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -38,11 +38,11 @@ struct PasswordInput
    bool remember;
 };
 
-core::Error askForPassword(const std::string& prompt,
+rscore::Error askForPassword(const std::string& prompt,
                            const std::string& rememberPrompt,
                            PasswordInput* pInput);
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace ask_pass
 } // namepace handlers
diff --git a/src/cpp/session/modules/SessionAuthoring.cpp b/src/cpp/session/modules/SessionAuthoring.cpp
index 8351087..6b088e9 100644
--- a/src/cpp/session/modules/SessionAuthoring.cpp
+++ b/src/cpp/session/modules/SessionAuthoring.cpp
@@ -42,7 +42,7 @@
 #include "tex/SessionSynctex.hpp"
 #include "tex/SessionViewPdf.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -61,7 +61,7 @@ void viewPdfExternal(const FilePath& texPath)
                             "_rstudio_compile_pdf");
 }
 
-Error getTexCapabilities(const core::json::JsonRpcRequest& request,
+Error getTexCapabilities(const rscore::json::JsonRpcRequest& request,
                          json::JsonRpcResponse* pResponse)
 {
    pResponse->setResult(authoring::texCapabilitiesAsJson());
diff --git a/src/cpp/session/modules/SessionAuthoring.hpp b/src/cpp/session/modules/SessionAuthoring.hpp
index f3d192b..ff23eb6 100644
--- a/src/cpp/session/modules/SessionAuthoring.hpp
+++ b/src/cpp/session/modules/SessionAuthoring.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -27,16 +27,16 @@ namespace modules {
 namespace authoring {
    
 // accessors used by SessionMain
-core::json::Array supportedRnwWeaveTypes();
-core::json::Array supportedLatexProgramTypes();
-core::json::Object texCapabilitiesAsJson();
-core::json::Object compilePdfStateAsJson();
+rscore::json::Array supportedRnwWeaveTypes();
+rscore::json::Array supportedLatexProgramTypes();
+rscore::json::Object texCapabilitiesAsJson();
+rscore::json::Object compilePdfStateAsJson();
 bool hasRunningChildren();
 
 // accessors used by workbench
 std::string desktopSynctexViewer();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace authoring
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionBreakpoints.cpp b/src/cpp/session/modules/SessionBreakpoints.cpp
index 93555f9..5bcd3fe 100644
--- a/src/cpp/session/modules/SessionBreakpoints.cpp
+++ b/src/cpp/session/modules/SessionBreakpoints.cpp
@@ -41,7 +41,7 @@
 #include <session/SessionUserSettings.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 using namespace r::sexp;
 using namespace r::exec;
 
@@ -512,14 +512,14 @@ Error initBreakpoints()
       r::session::clientState().getProjectPersistent("debug-breakpoints",
                                                      "debugBreakpointsState");
    if (!breakpointStateValue.is_null() &&
-       json::isType<core::json::Object>(breakpointStateValue))
+       json::isType<rscore::json::Object>(breakpointStateValue))
    {
       json::Object breakpointState = breakpointStateValue.get_obj();
       json::Array breakpointArray = breakpointState["breakpoints"].get_array();
       s_breakpoints.clear();
       BOOST_FOREACH(json::Value bp, breakpointArray)
       {
-         if (json::isType<core::json::Object>(bp))
+         if (json::isType<rscore::json::Object>(bp))
          {
             s_breakpoints.push_back(breakpointFromJson(bp.get_obj()));
          }
diff --git a/src/cpp/session/modules/SessionBreakpoints.hpp b/src/cpp/session/modules/SessionBreakpoints.hpp
index ff6e21b..618ac1a 100644
--- a/src/cpp/session/modules/SessionBreakpoints.hpp
+++ b/src/cpp/session/modules/SessionBreakpoints.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -26,7 +26,7 @@ namespace session {
 namespace modules {
 namespace breakpoints {
 
-core::Error initialize();
+rscore::Error initialize();
 bool haveSrcrefAttribute();
 bool haveAdvancedStepCommands();
 
diff --git a/src/cpp/session/modules/SessionCodeSearch.cpp b/src/cpp/session/modules/SessionCodeSearch.cpp
index 00b485b..f82061a 100644
--- a/src/cpp/session/modules/SessionCodeSearch.cpp
+++ b/src/cpp/session/modules/SessionCodeSearch.cpp
@@ -46,7 +46,7 @@
 
 #include "SessionSource.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
@@ -111,7 +111,7 @@ public:
    void enqueFiles(ForwardIterator begin, ForwardIterator end)
    {
       // add all source files to the indexing queue
-      using namespace core::system;
+      using namespace rscore::system;
       for ( ; begin != end; ++begin)
       {
          if (isSourceFile(*begin))
@@ -136,7 +136,7 @@ public:
       }
    }
 
-   void enqueFileChange(const core::system::FileChangeEvent& event)
+   void enqueFileChange(const rscore::system::FileChangeEvent& event)
    {
       // screen out files which aren't source files
       if (!isSourceFile(event.fileInfo()))
@@ -284,7 +284,7 @@ public:
    void clear()
    {
       indexing_ = false;
-      indexingQueue_ = std::queue<core::system::FileChangeEvent>();
+      indexingQueue_ = std::queue<rscore::system::FileChangeEvent>();
       entries_.clear();
    }
 
@@ -299,20 +299,20 @@ private:
       }
 
       Entry(const FileInfo& fileInfo,
-            boost::shared_ptr<core::r_util::RSourceIndex> pIndex)
+            boost::shared_ptr<rscore::r_util::RSourceIndex> pIndex)
          : fileInfo(fileInfo), pIndex(pIndex)
       {
       }
 
       FileInfo fileInfo;
 
-      boost::shared_ptr<core::r_util::RSourceIndex> pIndex;
+      boost::shared_ptr<rscore::r_util::RSourceIndex> pIndex;
 
       bool hasIndex() const { return pIndex.get() != NULL; }
 
       bool operator < (const Entry& other) const
       {
-         return core::fileInfoPathLessThan(fileInfo, other.fileInfo);
+         return rscore::fileInfoPathLessThan(fileInfo, other.fileInfo);
       }
    };
 
@@ -320,7 +320,7 @@ private:
 
    bool dequeAndIndex()
    {
-      using namespace core::system;
+      using namespace rscore::system;
 
       if (!indexingQueue_.empty())
       {
@@ -373,7 +373,7 @@ private:
          {
             // log if not path not found error (this can happen if the
             // file was removed after entering the indexing queue)
-            if (!core::isPathNotFoundError(error))
+            if (!rscore::isPathNotFoundError(error))
             {
                error.addProperty("src-file", filePath.absolutePath());
                LOG_ERROR(error);
@@ -465,7 +465,7 @@ private:
 
    // indexing queue
    bool indexing_;
-   std::queue<core::system::FileChangeEvent> indexingQueue_;
+   std::queue<rscore::system::FileChangeEvent> indexingQueue_;
 };
 
 // global source file index
@@ -1457,12 +1457,12 @@ Error findFunctionInSearchPath(const json::JsonRpcRequest& request,
    return Success();
 }
 
-void onFileMonitorEnabled(const tree<core::FileInfo>& files)
+void onFileMonitorEnabled(const tree<rscore::FileInfo>& files)
 {
    s_projectIndex.enqueFiles(files.begin_leaf(), files.end_leaf());
 }
 
-void onFilesChanged(const std::vector<core::system::FileChangeEvent>& events)
+void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& events)
 {
    std::for_each(
          events.begin(),
diff --git a/src/cpp/session/modules/SessionCodeSearch.hpp b/src/cpp/session/modules/SessionCodeSearch.hpp
index a32b2a9..653e721 100644
--- a/src/cpp/session/modules/SessionCodeSearch.hpp
+++ b/src/cpp/session/modules/SessionCodeSearch.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_CODE_SEARCH_HPP
 #define SESSION_CODE_SEARCH_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules {
 namespace code_search {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace code_search
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionConsole.cpp b/src/cpp/session/modules/SessionConsole.cpp
index bad60e0..6b1a3d4 100644
--- a/src/cpp/session/modules/SessionConsole.cpp
+++ b/src/cpp/session/modules/SessionConsole.cpp
@@ -30,7 +30,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -84,11 +84,11 @@ Error initializeOutputCapture()
 {
    // only capture stderr if it isn't connected to a  terminal
    boost::function<void(const std::string&)> stderrHandler;
-   if (!core::system::stderrIsTerminal())
+   if (!rscore::system::stderrIsTerminal())
       stderrHandler = writeStandardError;
 
    // initialize
-   return core::system::captureStandardStreams(writeStandardOutput,
+   return rscore::system::captureStandardStreams(writeStandardOutput,
                                                stderrHandler);
 }
 
diff --git a/src/cpp/session/modules/SessionConsole.hpp b/src/cpp/session/modules/SessionConsole.hpp
index e8d9fe3..0b89161 100644
--- a/src/cpp/session/modules/SessionConsole.hpp
+++ b/src/cpp/session/modules/SessionConsole.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_CONSOLE_HPP
 #define SESSION_CONSOLE_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace console {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace console
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionCrypto.cpp b/src/cpp/session/modules/SessionCrypto.cpp
index fe8c2d8..0b30a81 100644
--- a/src/cpp/session/modules/SessionCrypto.cpp
+++ b/src/cpp/session/modules/SessionCrypto.cpp
@@ -29,7 +29,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -52,7 +52,7 @@ json::Object publicKeyInfoJson()
 {
    std::string exponent;
    std::string modulo;
-   core::system::crypto::rsaPublicKey(&exponent, &modulo);
+   rscore::system::crypto::rsaPublicKey(&exponent, &modulo);
 
    json::Object result;
    result["exponent"] = exponent;
diff --git a/src/cpp/session/modules/SessionCrypto.hpp b/src/cpp/session/modules/SessionCrypto.hpp
index dffc87c..04e92a9 100644
--- a/src/cpp/session/modules/SessionCrypto.hpp
+++ b/src/cpp/session/modules/SessionCrypto.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,9 +26,9 @@ namespace session {
 namespace modules { 
 namespace crypto {
    
-core::json::Object publicKeyInfoJson();
+rscore::json::Object publicKeyInfoJson();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace crypto
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionDependencies.cpp b/src/cpp/session/modules/SessionDependencies.cpp
index 28a8bc1..76dfb6e 100644
--- a/src/cpp/session/modules/SessionDependencies.cpp
+++ b/src/cpp/session/modules/SessionDependencies.cpp
@@ -32,7 +32,7 @@
 #include <session/SessionConsoleProcess.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 
@@ -284,7 +284,7 @@ Error installDependencies(const json::JsonRpcRequest& request,
       return error;
 
    // options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.terminateChildren = true;
    options.redirectStdErrToStdOut = true;
 
@@ -336,11 +336,11 @@ Error installDependencies(const json::JsonRpcRequest& request,
    else
    {
       args.push_back("--vanilla");
-      core::system::Options childEnv;
-      core::system::environment(&childEnv);
+      rscore::system::Options childEnv;
+      rscore::system::environment(&childEnv);
       std::string libPaths = module_context::libPathsString();
       if (!libPaths.empty())
-         core::system::setenv(&childEnv, "R_LIBS", libPaths);
+         rscore::system::setenv(&childEnv, "R_LIBS", libPaths);
       options.environment = childEnv;
    }
 
diff --git a/src/cpp/session/modules/SessionDependencies.hpp b/src/cpp/session/modules/SessionDependencies.hpp
index bd5ed8b..d003a29 100644
--- a/src/cpp/session/modules/SessionDependencies.hpp
+++ b/src/cpp/session/modules/SessionDependencies.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error ;
 }
 
@@ -26,7 +26,7 @@ namespace session {
 namespace modules { 
 namespace dependencies {
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace dependencies
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionDirty.cpp b/src/cpp/session/modules/SessionDirty.cpp
index 372ac95..038a2d7 100644
--- a/src/cpp/session/modules/SessionDirty.cpp
+++ b/src/cpp/session/modules/SessionDirty.cpp
@@ -36,7 +36,7 @@
 #include <session/SessionModuleContext.hpp>
 #include <session/SessionUserSettings.hpp>
 
-using namespace core ;
+using namespace rscore ;
 using namespace r::sexp;
 using namespace r::exec;
 
diff --git a/src/cpp/session/modules/SessionDirty.hpp b/src/cpp/session/modules/SessionDirty.hpp
index 03554ff..233c7ae 100644
--- a/src/cpp/session/modules/SessionDirty.hpp
+++ b/src/cpp/session/modules/SessionDirty.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SESSION_DIRTY_HPP
 #define SESSION_SESSION_DIRTY_HPP
 
-namespace core {
+namespace rscore {
    class Error ;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace dirty {
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace dirty
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionErrors.cpp b/src/cpp/session/modules/SessionErrors.cpp
index 5d8db71..9ec1641 100644
--- a/src/cpp/session/modules/SessionErrors.cpp
+++ b/src/cpp/session/modules/SessionErrors.cpp
@@ -28,7 +28,7 @@
 #include "SessionErrors.hpp"
 #include "SessionBreakpoints.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/SessionErrors.hpp b/src/cpp/session/modules/SessionErrors.hpp
index 51997fd..8e671c4 100644
--- a/src/cpp/session/modules/SessionErrors.hpp
+++ b/src/cpp/session/modules/SessionErrors.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -34,8 +34,8 @@ const int ERRORS_TRACEBACK = 1;
 const int ERRORS_BREAK = 2;
 const int ERRORS_CUSTOM = 3;
 
-core::Error initialize();
-core::json::Value errorStateAsJson();
+rscore::Error initialize();
+rscore::json::Value errorStateAsJson();
 
 } // namespace errors
 } // namepace modules
diff --git a/src/cpp/session/modules/SessionFiles.cpp b/src/cpp/session/modules/SessionFiles.cpp
index 273410e..da4cc98 100644
--- a/src/cpp/session/modules/SessionFiles.cpp
+++ b/src/cpp/session/modules/SessionFiles.cpp
@@ -60,7 +60,7 @@
 #include "SessionFilesQuotas.hpp"
 #include "SessionFilesListingMonitor.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -133,7 +133,7 @@ Error extractFilePaths(const json::Array& files,
    return Success() ;
 }
 
-core::Error stat(const json::JsonRpcRequest& request,
+rscore::Error stat(const json::JsonRpcRequest& request,
                  json::JsonRpcResponse* pResponse)
 {
    std::string path;
@@ -147,7 +147,7 @@ core::Error stat(const json::JsonRpcRequest& request,
    return Success();
 }
 
-core::Error isTextFile(const json::JsonRpcRequest& request,
+rscore::Error isTextFile(const json::JsonRpcRequest& request,
                        json::JsonRpcResponse* pResponse)
 {
    std::string path;
@@ -163,7 +163,7 @@ core::Error isTextFile(const json::JsonRpcRequest& request,
 }
 
 
-core::Error getFileContents(const json::JsonRpcRequest& request,
+rscore::Error getFileContents(const json::JsonRpcRequest& request,
                             json::JsonRpcResponse* pResponse)
 {
    std::string path, encoding;
@@ -197,7 +197,7 @@ Error listFiles(const json::JsonRpcRequest& request, json::JsonRpcResponse* pRes
    FilePath targetPath = module_context::resolveAliasedPath(path) ;
    
    // if this includes a request for monitoring
-   core::json::Array jsonFiles;
+   rscore::json::Array jsonFiles;
    if (monitor)
    {
       // always stop existing if we have one
@@ -230,7 +230,7 @@ Error listFiles(const json::JsonRpcRequest& request, json::JsonRpcResponse* pRes
 
 
 // IN: String path
-core::Error createFolder(const core::json::JsonRpcRequest& request,
+rscore::Error createFolder(const rscore::json::JsonRpcRequest& request,
                          json::JsonRpcResponse* pResponse)
 {
    std::string path;
@@ -255,11 +255,11 @@ core::Error createFolder(const core::json::JsonRpcRequest& request,
 }
 
 
-core::Error deleteFile(const FilePath& filePath)
+rscore::Error deleteFile(const FilePath& filePath)
 {
    if (session::options().programMode() == kSessionProgramModeDesktop)
    {
-      Error error = core::system::recycle_bin::sendTo(filePath);
+      Error error = rscore::system::recycle_bin::sendTo(filePath);
       if (error)
       {
          LOG_ERROR(error);
@@ -277,7 +277,7 @@ core::Error deleteFile(const FilePath& filePath)
 }
 
 // IN: Array<String> paths
-core::Error deleteFiles(const core::json::JsonRpcRequest& request,
+rscore::Error deleteFiles(const rscore::json::JsonRpcRequest& request,
                         json::JsonRpcResponse* pResponse)
 {
    json::Array files;
@@ -335,7 +335,7 @@ bool copySourceFile(const FilePath& sourceDir,
 }
    
 // IN: String sourcePath, String targetPath
-Error copyFile(const core::json::JsonRpcRequest& request,
+Error copyFile(const rscore::json::JsonRpcRequest& request,
                json::JsonRpcResponse* pResponse)
 {
    // read params
@@ -397,7 +397,7 @@ Error copyFile(const core::json::JsonRpcRequest& request,
       
 
 // IN: Array<String> paths, String targetPath
-Error moveFiles(const core::json::JsonRpcRequest& request,
+Error moveFiles(const rscore::json::JsonRpcRequest& request,
                 json::JsonRpcResponse* pResponse)
 {
    json::Array files;
@@ -434,7 +434,7 @@ Error moveFiles(const core::json::JsonRpcRequest& request,
 }
 
 // IN: String path, String targetPath
-core::Error renameFile(const core::json::JsonRpcRequest& request,
+rscore::Error renameFile(const rscore::json::JsonRpcRequest& request,
                        json::JsonRpcResponse* pResponse)
 {
    // read params
@@ -511,7 +511,7 @@ const char * const kUploadFilename = "filename";
 const char * const kUploadedTempFile = "uploadedTempFile";
 const char * const kUploadTargetDirectory = "targetDirectory";
    
-Error completeUpload(const core::json::JsonRpcRequest& request,
+Error completeUpload(const rscore::json::JsonRpcRequest& request,
                      json::JsonRpcResponse* pResponse)
 {
    // read params
@@ -678,7 +678,7 @@ void handleFileUploadRequest(const http::Request& request,
                                                     isZip ? "zip" : "bin");
    
    // attempt to write the temp file
-   Error saveError = core::writeStringToFile(tempFilePath, file.contents);
+   Error saveError = rscore::writeStringToFile(tempFilePath, file.contents);
    if (saveError)
    {
       LOG_ERROR(saveError);
diff --git a/src/cpp/session/modules/SessionFiles.hpp b/src/cpp/session/modules/SessionFiles.hpp
index 264b0ac..23dc815 100644
--- a/src/cpp/session/modules/SessionFiles.hpp
+++ b/src/cpp/session/modules/SessionFiles.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SESSION_FILES_HPP
 #define SESSION_SESSION_FILES_HPP
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -25,9 +25,9 @@ namespace session {
 namespace modules {      
 namespace files {
    
-bool isMonitoringDirectory(const core::FilePath& directory);
+bool isMonitoringDirectory(const rscore::FilePath& directory);
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace files
 } // namepace handlers
diff --git a/src/cpp/session/modules/SessionFilesListingMonitor.cpp b/src/cpp/session/modules/SessionFilesListingMonitor.cpp
index 07b8a8b..92712f8 100644
--- a/src/cpp/session/modules/SessionFilesListingMonitor.cpp
+++ b/src/cpp/session/modules/SessionFilesListingMonitor.cpp
@@ -34,7 +34,7 @@
 
 #include "SessionVCS.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace modules { 
@@ -57,17 +57,17 @@ Error FilesListingMonitor::start(const FilePath& filePath, json::Array* pJsonFil
    std::transform(files.begin(),
                   files.end(),
                   std::back_inserter(prevFiles),
-                  core::toFileInfo);
+                  rscore::toFileInfo);
 
    // kickoff new monitor
-   core::system::file_monitor::Callbacks cb;
+   rscore::system::file_monitor::Callbacks cb;
    cb.onRegistered = boost::bind(&FilesListingMonitor::onRegistered,
                                     this, _1, filePath, prevFiles, _2);
-   cb.onRegistrationError =  boost::bind(core::log::logError, _1, ERROR_LOCATION);
+   cb.onRegistrationError =  boost::bind(rscore::log::logError, _1, ERROR_LOCATION);
    cb.onFilesChanged = boost::bind(module_context::enqueFileChangedEvents, filePath, _1);
-   cb.onMonitoringError = boost::bind(core::log::logError, _1, ERROR_LOCATION);
+   cb.onMonitoringError = boost::bind(rscore::log::logError, _1, ERROR_LOCATION);
    cb.onUnregistered = boost::bind(&FilesListingMonitor::onUnregistered, this, _1);
-   core::system::file_monitor::registerMonitor(filePath,
+   rscore::system::file_monitor::registerMonitor(filePath,
                                                false,
                                                module_context::fileListingFilter,
                                                cb);
@@ -81,8 +81,8 @@ void FilesListingMonitor::stop()
    currentPath_ = FilePath();
    if (!currentHandle_.empty())
    {
-      core::system::file_monitor::unregisterMonitor(currentHandle_);
-      currentHandle_ = core::system::file_monitor::Handle();
+      rscore::system::file_monitor::unregisterMonitor(currentHandle_);
+      currentHandle_ = rscore::system::file_monitor::Handle();
    }
 }
 
@@ -105,11 +105,11 @@ namespace {
 //   - The above two behaviors intersect to cause a pair of add/remove events
 //     for symliniks within onRegistered (because the initial snapshot
 //     was taken with FilePath::children and the file monitor enumeration
-//     is taken using core::scanFiles). When propagated to the client this
+//     is taken using rscore::scanFiles). When propagated to the client this
 //     results in symlinked directories appearing as documents and not
 //     being traversable in the files pane
 //
-//   - We could fix this by changing the behavior of core::scanFiles and/or
+//   - We could fix this by changing the behavior of rscore::scanFiles and/or
 //     another layer in the file listing / monitoring code however we
 //     are making the fix late in the cycle and therefore want to treat
 //     only the symptom (it's not clear that this isn't the best fix anyway,
@@ -124,10 +124,10 @@ FileInfo normalizeFileScannerPath(const FileInfo& fileInfo)
 
 } // anonymous namespace
 
-void FilesListingMonitor::onRegistered(core::system::file_monitor::Handle handle,
+void FilesListingMonitor::onRegistered(rscore::system::file_monitor::Handle handle,
                                        const FilePath& filePath,
                                        const std::vector<FileInfo>& prevFiles,
-                                       const tree<core::FileInfo>& files)
+                                       const tree<rscore::FileInfo>& files)
 {
    // set path and current handle
    currentPath_ = filePath;
@@ -142,8 +142,8 @@ void FilesListingMonitor::onRegistered(core::system::file_monitor::Handle handle
 
    // compare the previously returned listing with the initial scan to see if any
    // file changes occurred between listings
-   std::vector<core::system::FileChangeEvent> events;
-   core::system::collectFileChangeEvents(prevFiles.begin(),
+   std::vector<rscore::system::FileChangeEvent> events;
+   rscore::system::collectFileChangeEvents(prevFiles.begin(),
                                          prevFiles.end(),
                                          currFiles.begin(),
                                          currFiles.end(),
@@ -155,7 +155,7 @@ void FilesListingMonitor::onRegistered(core::system::file_monitor::Handle handle
       module_context::enqueFileChangedEvents(filePath, events);
 }
 
-void FilesListingMonitor::onUnregistered(core::system::file_monitor::Handle handle)
+void FilesListingMonitor::onUnregistered(rscore::system::file_monitor::Handle handle)
 {
    // typically we clear our internal state explicitly when a new registration
    // comes in. however, it is possible that our monitor could be unregistered
@@ -164,7 +164,7 @@ void FilesListingMonitor::onUnregistered(core::system::file_monitor::Handle hand
    if (currentHandle_ == handle)
    {
       currentPath_ = FilePath();
-      currentHandle_ = core::system::file_monitor::Handle();
+      currentHandle_ = rscore::system::file_monitor::Handle();
    }
 }
 
@@ -174,7 +174,7 @@ Error FilesListingMonitor::listFiles(const FilePath& rootPath,
 {
    // enumerate the files
    pFiles->clear();
-   core::Error error = rootPath.children(pFiles) ;
+   rscore::Error error = rootPath.children(pFiles) ;
    if (error)
       return error;
 
@@ -183,16 +183,16 @@ Error FilesListingMonitor::listFiles(const FilePath& rootPath,
                   source_control::fileDecorationContext(rootPath);
 
    // sort the files by name
-   std::sort(pFiles->begin(), pFiles->end(), core::compareAbsolutePathNoCase);
+   std::sort(pFiles->begin(), pFiles->end(), rscore::compareAbsolutePathNoCase);
 
    // produce json listing
-   BOOST_FOREACH( core::FilePath& filePath, *pFiles)
+   BOOST_FOREACH( rscore::FilePath& filePath, *pFiles)
    {
       // files which may have been deleted after the listing or which
       // are not end-user visible
-      if (filePath.exists() && module_context::fileListingFilter(core::FileInfo(filePath)))
+      if (filePath.exists() && module_context::fileListingFilter(rscore::FileInfo(filePath)))
       {
-         core::json::Object fileObject = module_context::createFileSystemItem(filePath);
+         rscore::json::Object fileObject = module_context::createFileSystemItem(filePath);
          pCtx->decorateFile(filePath, &fileObject);
          pJsonFiles->push_back(fileObject) ;
       }
diff --git a/src/cpp/session/modules/SessionFilesListingMonitor.hpp b/src/cpp/session/modules/SessionFilesListingMonitor.hpp
index 92f3796..7235584 100644
--- a/src/cpp/session/modules/SessionFilesListingMonitor.hpp
+++ b/src/cpp/session/modules/SessionFilesListingMonitor.hpp
@@ -26,7 +26,7 @@
 #include <core/json/Json.hpp>
 #include <core/system/FileMonitor.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    class FileInfo;
@@ -48,39 +48,39 @@ class FilesListingMonitor : boost::noncopyable
 {
 public:
    // kickoff monitoring
-   core::Error start(const core::FilePath& filePath, core::json::Array* pJsonFiles);
+   rscore::Error start(const rscore::FilePath& filePath, rscore::json::Array* pJsonFiles);
 
    void stop();
 
    // what path are we currently monitoring?
-   const core::FilePath& currentMonitoredPath() const;
+   const rscore::FilePath& currentMonitoredPath() const;
 
    // convenience method which is also called by listFiles for requests that
    // don't specify monitoring (e.g. file dialog listing)
-   static core::Error listFiles(const core::FilePath& rootPath,
-                                core::json::Array* pJsonFiles)
+   static rscore::Error listFiles(const rscore::FilePath& rootPath,
+                                rscore::json::Array* pJsonFiles)
    {
-      std::vector<core::FilePath> files;
+      std::vector<rscore::FilePath> files;
       return listFiles(rootPath, &files, pJsonFiles);
    }
 
 private:
    // stateful handlers for registration and unregistration
-   void onRegistered(core::system::file_monitor::Handle handle,
-                     const core::FilePath& filePath,
-                     const std::vector<core::FileInfo>& prevFiles,
-                     const tree<core::FileInfo>& files);
+   void onRegistered(rscore::system::file_monitor::Handle handle,
+                     const rscore::FilePath& filePath,
+                     const std::vector<rscore::FileInfo>& prevFiles,
+                     const tree<rscore::FileInfo>& files);
 
-   void onUnregistered(core::system::file_monitor::Handle handle);
+   void onUnregistered(rscore::system::file_monitor::Handle handle);
 
    // helpers
-   static core::Error listFiles(const core::FilePath& rootPath,
-                                std::vector<core::FilePath>* pFiles,
-                                core::json::Array* pJsonFiles);
+   static rscore::Error listFiles(const rscore::FilePath& rootPath,
+                                std::vector<rscore::FilePath>* pFiles,
+                                rscore::json::Array* pJsonFiles);
 
 private:
-   core::FilePath currentPath_;
-   core::system::file_monitor::Handle currentHandle_;
+   rscore::FilePath currentPath_;
+   rscore::system::file_monitor::Handle currentHandle_;
 };
 
 
diff --git a/src/cpp/session/modules/SessionFilesQuotas.cpp b/src/cpp/session/modules/SessionFilesQuotas.cpp
index c317981..91c0f91 100644
--- a/src/cpp/session/modules/SessionFilesQuotas.cpp
+++ b/src/cpp/session/modules/SessionFilesQuotas.cpp
@@ -32,7 +32,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace modules { 
@@ -162,9 +162,9 @@ void checkQuotaThread()
    try
    {
       // run the command
-      core::system::ProcessResult result;
+      rscore::system::ProcessResult result;
       Error error = runCommand("xfs_quota -c 'quota -N'",
-                               core::system::ProcessOptions(),
+                               rscore::system::ProcessOptions(),
                                &result);
       if (error)
       {
@@ -222,7 +222,7 @@ void checkQuotaStatus()
       {
          // block all signals for launch of background thread (will cause it
          // to never receive signals)
-         core::system::SignalBlocker signalBlocker;
+         rscore::system::SignalBlocker signalBlocker;
          Error error = signalBlocker.blockAll();
          if (error)
             LOG_ERROR(error);
diff --git a/src/cpp/session/modules/SessionFilesQuotas.hpp b/src/cpp/session/modules/SessionFilesQuotas.hpp
index ec44a0c..55640e2 100644
--- a/src/cpp/session/modules/SessionFilesQuotas.hpp
+++ b/src/cpp/session/modules/SessionFilesQuotas.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SESSION_FILES_QUOTAS_HPP
 #define SESSION_SESSION_FILES_QUOTAS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -25,7 +25,7 @@ namespace modules {
 namespace files {
 namespace quotas {
 
-core::Error initialize();
+rscore::Error initialize();
 
 void checkQuotaStatus();
    
diff --git a/src/cpp/session/modules/SessionFind.cpp b/src/cpp/session/modules/SessionFind.cpp
index 27928eb..d8267f2 100644
--- a/src/cpp/session/modules/SessionFind.cpp
+++ b/src/cpp/session/modules/SessionFind.cpp
@@ -33,7 +33,7 @@
 #include <session/SessionUserSettings.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {   
@@ -207,7 +207,7 @@ private:
                  const FilePath& tempFile)
       : firstDecodeError_(true), encoding_(encoding), tempFile_(tempFile)
    {
-      handle_ = core::system::generateUuid(false);
+      handle_ = rscore::system::generateUuid(false);
    }
 
 public:
@@ -216,9 +216,9 @@ public:
       return handle_;
    }
 
-   core::system::ProcessCallbacks createProcessCallbacks()
+   rscore::system::ProcessCallbacks createProcessCallbacks()
    {
-      core::system::ProcessCallbacks callbacks;
+      rscore::system::ProcessCallbacks callbacks;
       callbacks.onContinue = boost::bind(&GrepOperation::onContinue,
                                          shared_from_this(),
                                          _1);
@@ -235,7 +235,7 @@ public:
    }
 
 private:
-   bool onContinue(const core::system::ProcessOperations& ops) const
+   bool onContinue(const rscore::system::ProcessOperations& ops) const
    {
       return findResults().isRunning() && findResults().handle() == handle();
    }
@@ -304,7 +304,7 @@ private:
       *pContent = decodedLine;
    }
 
-   void onStdout(const core::system::ProcessOperations& ops, const std::string& data)
+   void onStdout(const rscore::system::ProcessOperations& ops, const std::string& data)
    {
       json::Array files;
       json::Array lineNums;
@@ -390,7 +390,7 @@ private:
          findResults().onFindEnd(handle());
    }
 
-   void onStderr(const core::system::ProcessOperations& ops, const std::string& data)
+   void onStderr(const rscore::system::ProcessOperations& ops, const std::string& data)
    {
       LOG_ERROR_MESSAGE("grep: " + data);
    }
@@ -413,7 +413,7 @@ private:
 
 } // namespace
 
-core::Error beginFind(const json::JsonRpcRequest& request,
+rscore::Error beginFind(const json::JsonRpcRequest& request,
                       json::JsonRpcResponse* pResponse)
 {
    std::string searchString;
@@ -430,15 +430,15 @@ core::Error beginFind(const json::JsonRpcRequest& request,
    if (error)
       return error;
 
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
-   core::system::setenv(&childEnv, "GREP_COLOR", "01");
-   core::system::setenv(&childEnv, "GREP_COLORS", "ne:fn=:ln=:se=:mt=01");
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
+   rscore::system::setenv(&childEnv, "GREP_COLOR", "01");
+   rscore::system::setenv(&childEnv, "GREP_COLORS", "ne:fn=:ln=:se=:mt=01");
 #ifdef _WIN32
    FilePath gnuGrepPath = session::options().gnugrepPath();
-   core::system::addToPath(
+   rscore::system::addToPath(
             &childEnv,
             string_utils::utf8ToSystem(gnuGrepPath.absolutePath()));
 #endif
@@ -470,7 +470,7 @@ core::Error beginFind(const json::JsonRpcRequest& request,
 
    boost::shared_ptr<GrepOperation> ptrGrepOp = GrepOperation::create(encoding,
                                                                       tempFile);
-   core::system::ProcessCallbacks callbacks =
+   rscore::system::ProcessCallbacks callbacks =
                                        ptrGrepOp->createProcessCallbacks();
 
 #ifdef _WIN32
@@ -519,7 +519,7 @@ core::Error beginFind(const json::JsonRpcRequest& request,
    return Success();
 }
 
-core::Error stopFind(const json::JsonRpcRequest& request,
+rscore::Error stopFind(const json::JsonRpcRequest& request,
                      json::JsonRpcResponse* pResponse)
 {
    std::string handle;
@@ -532,21 +532,21 @@ core::Error stopFind(const json::JsonRpcRequest& request,
    return Success();
 }
 
-core::Error clearFindResults(const json::JsonRpcRequest& request,
+rscore::Error clearFindResults(const json::JsonRpcRequest& request,
                              json::JsonRpcResponse* pResponse)
 {
    findResults().clear();
    return Success();
 }
 
-void onSuspend(core::Settings* pSettings)
+void onSuspend(rscore::Settings* pSettings)
 {
    std::ostringstream os;
    json::write(findResults().asJson(), os);
    pSettings->set("find-in-files-state", os.str());
 }
 
-void onResume(const core::Settings& settings)
+void onResume(const rscore::Settings& settings)
 {
    std::string state = settings.get("find-in-files-state");
    if (!state.empty())
@@ -569,7 +569,7 @@ json::Object findInFilesStateAsJson()
    return findResults().asJson();
 }
 
-core::Error initialize()
+rscore::Error initialize()
 {
    using boost::bind;
    using namespace session::module_context;
diff --git a/src/cpp/session/modules/SessionFind.hpp b/src/cpp/session/modules/SessionFind.hpp
index 0e9a18e..eab7461 100644
--- a/src/cpp/session/modules/SessionFind.hpp
+++ b/src/cpp/session/modules/SessionFind.hpp
@@ -23,9 +23,9 @@ namespace session {
 namespace modules {
 namespace find {
 
-core::json::Object findInFilesStateAsJson();
+rscore::json::Object findInFilesStateAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace find
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionGit.cpp b/src/cpp/session/modules/SessionGit.cpp
index 7277541..e9b2385 100644
--- a/src/cpp/session/modules/SessionGit.cpp
+++ b/src/cpp/session/modules/SessionGit.cpp
@@ -64,8 +64,8 @@
 
 #include "session-config.h"
 
-using namespace core;
-using namespace core::shell_utils;
+using namespace rscore;
+using namespace rscore::shell_utils;
 using session::console_process::ConsoleProcess;
 using namespace session::modules::vcs_utils;
 using session::modules::source_control::FileWithStatus;
@@ -88,9 +88,9 @@ const uint64_t GIT_1_7_2 = ((uint64_t)1 << 48) |
                            ((uint64_t)7 << 32) |
                            ((uint64_t)2 << 16);
 
-core::system::ProcessOptions procOptions()
+rscore::system::ProcessOptions procOptions()
 {
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 
    // detach the session so there is no terminal
 #ifndef _WIN32
@@ -98,24 +98,24 @@ core::system::ProcessOptions procOptions()
 #endif
 
    // get current environment for modification prior to passing to child
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
 
    // add git bin dir to PATH if necessary
    std::string nonPathGitBinDir = git::nonPathGitBinDir();
    if (!nonPathGitBinDir.empty())
-      core::system::addToPath(&childEnv, nonPathGitBinDir);
+      rscore::system::addToPath(&childEnv, nonPathGitBinDir);
 
    // add postback directory to PATH
    FilePath postbackDir = session::options().rpostbackPath().parent();
-   core::system::addToPath(&childEnv, postbackDir.absolutePath());
+   rscore::system::addToPath(&childEnv, postbackDir.absolutePath());
 
    options.workingDir = projects::projectContext().directory();
 
    // on windows set HOME to USERPROFILE
 #ifdef _WIN32
-   std::string userProfile = core::system::getenv(childEnv, "USERPROFILE");
-   core::system::setenv(&childEnv, "HOME", userProfile);
+   std::string userProfile = rscore::system::getenv(childEnv, "USERPROFILE");
+   rscore::system::setenv(&childEnv, "HOME", userProfile);
 #endif
 
    // set custom environment
@@ -202,10 +202,10 @@ std::string gitBin()
 #endif
 
 Error gitExec(const ShellArgs& args,
-              const core::FilePath& workingDir,
-              core::system::ProcessResult* pResult)
+              const rscore::FilePath& workingDir,
+              rscore::system::ProcessResult* pResult)
 {
-   core::system::ProcessOptions options = procOptions();
+   rscore::system::ProcessOptions options = procOptions();
    options.workingDir = workingDir;
    // Important to ensure SSH_ASKPASS works
 #ifdef _WIN32
@@ -266,12 +266,12 @@ private:
    FilePath root_;
 
 protected:
-   core::Error runGit(const ShellArgs& args,
+   rscore::Error runGit(const ShellArgs& args,
                       std::string* pStdOut=NULL,
                       std::string* pStdErr=NULL,
                       int* pExitCode=NULL)
    {
-      using namespace core::system;
+      using namespace rscore::system;
 
       ProcessResult result;
       Error error = gitExec(args, root_, &result);
@@ -293,7 +293,7 @@ protected:
       return Success();
    }
 
-   core::Error createConsoleProc(const ShellArgs& args,
+   rscore::Error createConsoleProc(const ShellArgs& args,
                                  const std::string& caption,
                                  bool dialog,
                                  boost::shared_ptr<ConsoleProcess>* ppCP,
@@ -301,7 +301,7 @@ protected:
    {
       using namespace session::console_process;
 
-      core::system::ProcessOptions options = procOptions();
+      rscore::system::ProcessOptions options = procOptions();
 #ifdef _WIN32
       options.detachProcess = true;
 #endif
@@ -385,7 +385,7 @@ public:
       root_ = path;
    }
 
-   core::Error status(const FilePath& dir,
+   rscore::Error status(const FilePath& dir,
                       StatusResult* pStatusResult)
    {
       using namespace boost;
@@ -424,12 +424,12 @@ public:
       return Success();
    }
 
-   core::Error add(const std::vector<FilePath>& filePaths)
+   rscore::Error add(const std::vector<FilePath>& filePaths)
    {
       return runGit(ShellArgs() << "add" << "--" << filePaths);
    }
 
-   core::Error remove(const std::vector<FilePath>& filePaths)
+   rscore::Error remove(const std::vector<FilePath>& filePaths)
    {
       ShellArgs args;
       args << "rm" << "--";
@@ -437,7 +437,7 @@ public:
       return runGit(args);
    }
 
-   core::Error discard(const std::vector<FilePath>& filePaths)
+   rscore::Error discard(const std::vector<FilePath>& filePaths)
    {
       source_control::StatusResult statusResult;
       Error error = status(root_, &statusResult);
@@ -461,7 +461,7 @@ public:
       }
    }
 
-   core::Error stage(const std::vector<FilePath> &filePaths)
+   rscore::Error stage(const std::vector<FilePath> &filePaths)
    {
       StatusResult statusResult;
       this->status(root_, &statusResult);
@@ -507,7 +507,7 @@ public:
       return Success();
    }
 
-   core::Error unstage(const std::vector<FilePath>& filePaths)
+   rscore::Error unstage(const std::vector<FilePath>& filePaths)
    {
       source_control::StatusResult statusResult;
       Error error = status(root_, &statusResult);
@@ -544,7 +544,7 @@ public:
       }
    }
 
-   core::Error listBranches(std::vector<std::string>* pBranches,
+   rscore::Error listBranches(std::vector<std::string>* pBranches,
                             boost::optional<size_t>* pActiveBranchIndex)
    {
       std::vector<std::string> lines;
@@ -569,7 +569,7 @@ public:
       return Success();
    }
 
-   core::Error checkout(const std::string& id,
+   rscore::Error checkout(const std::string& id,
                         boost::shared_ptr<ConsoleProcess>* ppCP)
    {
       return createConsoleProc(ShellArgs() << "checkout" << id << "--",
@@ -578,7 +578,7 @@ public:
                                ppCP);
    }
 
-   core::Error commit(std::string message, bool amend, bool signOff,
+   rscore::Error commit(std::string message, bool amend, bool signOff,
                       boost::shared_ptr<ConsoleProcess>* ppCP)
    {
       bool alwaysUseUtf8 = s_gitVersion >= GIT_1_7_2;
@@ -627,7 +627,7 @@ public:
          if (mergeMsg.exists())
          {
             std::string mergeMsgStr;
-            error = core::readStringFromFile(mergeMsg, &mergeMsgStr);
+            error = rscore::readStringFromFile(mergeMsg, &mergeMsgStr);
             if (!error)
             {
                if (!message.empty())
@@ -658,7 +658,7 @@ public:
                                ppCP);
    }
 
-   core::Error clone(const std::string& url,
+   rscore::Error clone(const std::string& url,
                      const std::string dirName,
                      const FilePath& parentPath,
                      boost::shared_ptr<ConsoleProcess>* ppCP)
@@ -728,7 +728,7 @@ public:
       return true;
    }
 
-   core::Error push(boost::shared_ptr<ConsoleProcess>* ppCP)
+   rscore::Error push(boost::shared_ptr<ConsoleProcess>* ppCP)
    {
       std::string branch;
       Error error = currentBranch(&branch);
@@ -746,13 +746,13 @@ public:
       return createConsoleProc(args, "Git Push", true, ppCP);
    }
 
-   core::Error pull(boost::shared_ptr<ConsoleProcess>* ppCP)
+   rscore::Error pull(boost::shared_ptr<ConsoleProcess>* ppCP)
    {
       return createConsoleProc(ShellArgs() << "pull",
                                "Git Pull", true, ppCP);
    }
 
-   core::Error doDiffFile(const FilePath& filePath,
+   rscore::Error doDiffFile(const FilePath& filePath,
                           const FilePath* pCompareTo,
                           PatchMode mode,
                           int contextLines,
@@ -770,7 +770,7 @@ public:
       return runGit(args, pOutput, NULL, NULL);
    }
 
-   core::Error diffFile(const FilePath& filePath,
+   rscore::Error diffFile(const FilePath& filePath,
                         PatchMode mode,
                         int contextLines,
                         std::string* pOutput)
@@ -822,7 +822,7 @@ public:
       return secs;
    }
 
-   core::Error applyPatch(const FilePath& patchFile,
+   rscore::Error applyPatch(const FilePath& patchFile,
                           PatchMode patchMode)
    {
       ShellArgs args = ShellArgs() << "apply";
@@ -870,7 +870,7 @@ public:
       }
    }
 
-   core::Error logLength(const std::string &rev,
+   rscore::Error logLength(const std::string &rev,
                          const FilePath& fileFilter,
                          const std::string &searchText,
                          int *pLength)
@@ -904,7 +904,7 @@ public:
       }
    }
 
-   core::Error log(const std::string& rev,
+   rscore::Error log(const std::string& rev,
                    const FilePath& fileFilter,
                    int skip,
                    int maxentries,
@@ -1089,7 +1089,7 @@ public:
       return Success();
    }
 
-   virtual core::Error show(const std::string& rev,
+   virtual rscore::Error show(const std::string& rev,
                             std::string* pOutput)
    {
       ShellArgs args = ShellArgs() << "show" << "--pretty=oneline" << "-M";
@@ -1100,7 +1100,7 @@ public:
       return runGit(args, pOutput);
    }
 
-   virtual core::Error showFile(const std::string& rev,
+   virtual rscore::Error showFile(const std::string& rev,
                                 const std::string& filename,
                                 std::string* pOutput)
    {
@@ -1111,7 +1111,7 @@ public:
       return runGit(args, pOutput);
    }
 
-   virtual core::Error remoteBranchInfo(RemoteBranchInfo* pRemoteBranchInfo)
+   virtual rscore::Error remoteBranchInfo(RemoteBranchInfo* pRemoteBranchInfo)
    {
       // default to none
       *pRemoteBranchInfo = RemoteBranchInfo();
@@ -1201,14 +1201,14 @@ std::vector<FilePath> resolveAliasedPaths(const json::Array& paths,
 
 FilePath detectGitDir(const FilePath& workingDir)
 {
-   core::system::ProcessOptions options = procOptions();
+   rscore::system::ProcessOptions options = procOptions();
    options.workingDir = workingDir;
 #ifndef _WIN32
    options.detachSession = true;
 #endif
 
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(
             git() << "rev-parse" << "--show-toplevel",
             "",
             options,
@@ -1274,7 +1274,7 @@ void GitFileDecorationContext::decorateFile(const FilePath &filePath,
    (*pFileObject)["git_status"] = vcsObj;
 }
 
-core::Error status(const FilePath& dir, StatusResult* pStatusResult)
+rscore::Error status(const FilePath& dir, StatusResult* pStatusResult)
 {
    if (s_git_.root().empty())
       return Success();
@@ -1640,14 +1640,14 @@ Error vcsGetIgnores(const json::JsonRpcRequest& request,
    FilePath gitIgnorePath = filePath.complete(".gitignore");
 
    // setup result (default to empty)
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    result.exitStatus = EXIT_SUCCESS;
    result.stdOut = "";
 
    // read the file if it exists
    if (gitIgnorePath.exists())
    {
-      Error error = core::readStringFromFile(gitIgnorePath,
+      Error error = rscore::readStringFromFile(gitIgnorePath,
                                              &result.stdOut,
                                              string_utils::LineEndingPosix);
       if (error)
@@ -1675,14 +1675,14 @@ Error vcsSetIgnores(const json::JsonRpcRequest& request,
    FilePath gitIgnorePath = filePath.complete(".gitignore");
 
    // write the .gitignore file
-   error = core::writeStringToFile(gitIgnorePath,
+   error = rscore::writeStringToFile(gitIgnorePath,
                                    ignores,
                                    string_utils::LineEndingNative);
    if (error)
       return error;
 
    // always return an empty (successful) ProcessResult
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    result.exitStatus = EXIT_SUCCESS;
    pResponse->setResult(processResultToJson(result));
    return Success();
@@ -1698,7 +1698,7 @@ std::string getUpstream(const std::string& branch = std::string())
 
    // get the upstream
    std::string upstream;
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = gitExec(ShellArgs() <<
                            "rev-parse" << "--abbrev-ref" << query,
                          s_git_.root(),
@@ -1744,7 +1744,7 @@ std::string githubUrl(const std::string& view,
    std::string upstreamBranch = upstream.substr(pos + 1);
 
    // now get the remote url
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = gitExec(ShellArgs() <<
                    "config" << "--get" << ("remote." + upstreamName + ".url"),
                    s_git_.root(),
@@ -1994,7 +1994,7 @@ Error vcsExportFile(const json::JsonRpcRequest& request,
       return error;
 
    // write it
-   return core::writeStringToFile(
+   return rscore::writeStringToFile(
                   module_context::resolveAliasedPath(targetPath),
                   output);
 }
@@ -2014,13 +2014,13 @@ Error vcsSshPublicKey(const json::JsonRpcRequest& request,
    FilePath publicKeyPath = module_context::resolveAliasedPath(aliasedPath);
    if (!publicKeyPath.exists())
    {
-      return core::fileNotFoundError(publicKeyPath.absolutePath(),
+      return rscore::fileNotFoundError(publicKeyPath.absolutePath(),
                                      ERROR_LOCATION);
    }
 
    // read the key
    std::string publicKeyContents;
-   error = core::readStringFromFile(publicKeyPath, &publicKeyContents);
+   error = rscore::readStringFromFile(publicKeyPath, &publicKeyContents);
    if (error)
       return error;
 
@@ -2057,11 +2057,11 @@ Error vcsInitRepo(const json::JsonRpcRequest& request,
       return error;
    FilePath dirPath = module_context::resolveAliasedPath(directory);
 
-   core::system::ProcessOptions options = procOptions();
+   rscore::system::ProcessOptions options = procOptions();
    options.workingDir = dirPath;
 
    // run it
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = runCommand(git() << "init", options, &result);
    if (error)
       return error;
@@ -2082,7 +2082,7 @@ Error vcsInitRepo(const json::JsonRpcRequest& request,
 bool ensureSSHAgentIsRunning()
 {
    // Use "ssh-add -l" to see if ssh-agent is running
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = runCommand(shell_utils::sendStdErrToNull("ssh-add -l"),
                             procOptions(), &result);
    if (error)
@@ -2125,7 +2125,7 @@ bool ensureSSHAgentIsRunning()
    {
       std::string name = (*it).str(1);
       std::string value = (*it).str(2);
-      core::system::setenv(name, value);
+      rscore::system::setenv(name, value);
 
       if (name == "SSH_AGENT_PID")
       {
@@ -2138,7 +2138,7 @@ bool ensureSSHAgentIsRunning()
    return true;
 }
 
-void addKeyToSSHAgent_onCompleted(const core::system::ProcessResult& result)
+void addKeyToSSHAgent_onCompleted(const rscore::system::ProcessResult& result)
 {
    if (result.exitStatus != EXIT_SUCCESS)
       LOG_ERROR_MESSAGE(result.stdErr);
@@ -2147,11 +2147,11 @@ void addKeyToSSHAgent_onCompleted(const core::system::ProcessResult& result)
 void addKeyToSSHAgent(const FilePath& keyFile,
                       const std::string& passphrase)
 {
-   core::system::ProcessOptions options = procOptions();
-   core::system::setenv(options.environment.get_ptr(),
+   rscore::system::ProcessOptions options = procOptions();
+   rscore::system::setenv(options.environment.get_ptr(),
                         "__ASKPASS_PASSTHROUGH_RESULT",
                         passphrase);
-   core::system::setenv(options.environment.get_ptr(),
+   rscore::system::setenv(options.environment.get_ptr(),
                         "SSH_ASKPASS",
                         "askpass-passthrough");
 
@@ -2424,7 +2424,7 @@ Error detectAndSaveGitExePath()
 void onShutdown(bool)
 {
    std::for_each(s_pidsToTerminate_.begin(), s_pidsToTerminate_.end(),
-                 &core::system::terminateProcess);
+                 &rscore::system::terminateProcess);
    s_pidsToTerminate_.clear();
 }
 
@@ -2494,7 +2494,7 @@ Error augmentGitIgnore(const FilePath& gitIgnoreFile)
       // If .gitignore exists, add .Rproj.user unless it's already there
 
       std::string strIgnore;
-      Error error = core::readStringFromFile(gitIgnoreFile, &strIgnore);
+      Error error = rscore::readStringFromFile(gitIgnoreFile, &strIgnore);
       if (error)
          return error;
 
@@ -2554,8 +2554,8 @@ bool isGitInstalled()
       return false;
    }
 
-   core::system::ProcessResult result;
-   Error error = core::system::runCommand(git() << "--version",
+   rscore::system::ProcessResult result;
+   Error error = rscore::system::runCommand(git() << "--version",
                                           procOptions(),
                                           &result);
    if (error)
@@ -2629,9 +2629,9 @@ void onUserSettingsChanged()
    }
 }
 
-Error statusToJson(const core::FilePath &path,
+Error statusToJson(const rscore::FilePath &path,
                    const VCSStatus &status,
-                   core::json::Object *pObject)
+                   rscore::json::Object *pObject)
 {
    json::Object& obj = *pObject;
    obj["status"] = status.status();
@@ -2642,11 +2642,11 @@ Error statusToJson(const core::FilePath &path,
    return Success();
 }
 
-void onSuspend(core::Settings*)
+void onSuspend(rscore::Settings*)
 {
 }
 
-void onResume(const core::Settings&)
+void onResume(const rscore::Settings&)
 {
    enqueueRefreshEvent();
 }
@@ -2675,8 +2675,8 @@ bool initGitBin()
 
    // Save version
    s_gitVersion = GIT_1_7_2;
-   core::system::ProcessResult result;
-   error = core::system::runCommand(git() << "--version",
+   rscore::system::ProcessResult result;
+   error = rscore::system::runCommand(git() << "--version",
                                     procOptions(),
                                     &result);
    if (error)
@@ -2698,7 +2698,7 @@ bool initGitBin()
    return true;
 }
 
-bool isGitDirectory(const core::FilePath& workingDir)
+bool isGitDirectory(const rscore::FilePath& workingDir)
 {
    return !detectGitDir(workingDir).empty();
 }
@@ -2709,7 +2709,7 @@ std::string remoteOriginUrl(const FilePath& workingDir)
    // default to none
    std::string remoteOriginUrl;
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = gitExec(ShellArgs() <<
                            "config" << "--get" << "remote.origin.url",
                          workingDir,
@@ -2735,7 +2735,7 @@ bool isGithubRepository()
 }
 
 
-core::Error initializeGit(const core::FilePath& workingDir)
+rscore::Error initializeGit(const rscore::FilePath& workingDir)
 {
    s_git_.setRoot(detectGitDir(workingDir));
 
@@ -2764,7 +2764,7 @@ Error clone(const std::string& url,
    return Success();
 }
 
-core::Error initialize()
+rscore::Error initialize()
 {
    using namespace session::module_context;
 
@@ -2801,11 +2801,11 @@ core::Error initialize()
 
    // setup environment
    BOOST_ASSERT(boost::algorithm::ends_with(sshAskCmd, "rpostback-askpass"));
-   core::system::setenv("GIT_ASKPASS", "rpostback-askpass");
+   rscore::system::setenv("GIT_ASKPASS", "rpostback-askpass");
 
    if (interceptAskPass)
    {
-      core::system::setenv("SSH_ASKPASS", "rpostback-askpass");
+      rscore::system::setenv("SSH_ASKPASS", "rpostback-askpass");
    }
 
    // add suspend/resume handler
diff --git a/src/cpp/session/modules/SessionGit.hpp b/src/cpp/session/modules/SessionGit.hpp
index 176ccb8..9c2c024 100644
--- a/src/cpp/session/modules/SessionGit.hpp
+++ b/src/cpp/session/modules/SessionGit.hpp
@@ -41,10 +41,10 @@ extern const char * const kVcsId;
 class GitFileDecorationContext : public source_control::FileDecorationContext
 {
 public:
-   GitFileDecorationContext(const core::FilePath& rootDir);
+   GitFileDecorationContext(const rscore::FilePath& rootDir);
    virtual ~GitFileDecorationContext();
-   virtual void decorateFile(const core::FilePath &filePath,
-                             core::json::Object *pFileObject);
+   virtual void decorateFile(const rscore::FilePath &filePath,
+                             rscore::json::Object *pFileObject);
 
 private:
    source_control::StatusResult vcsStatus_;
@@ -54,32 +54,32 @@ private:
 bool isGitInstalled();
 bool isGitEnabled();
 
-bool isGitDirectory(const core::FilePath& workingDir);
+bool isGitDirectory(const rscore::FilePath& workingDir);
 
-std::string remoteOriginUrl(const core::FilePath& workingDir);
+std::string remoteOriginUrl(const rscore::FilePath& workingDir);
 
 bool isGithubRepository();
 
-core::Error initializeGit(const core::FilePath& workingDir);
+rscore::Error initializeGit(const rscore::FilePath& workingDir);
 
-core::FilePath detectedGitExePath();
+rscore::FilePath detectedGitExePath();
 
 std::string nonPathGitBinDir();
 
-core::Error status(const core::FilePath& dir,
+rscore::Error status(const rscore::FilePath& dir,
                    source_control::StatusResult* pStatusResult);
-core::Error fileStatus(const core::FilePath& filePath,
+rscore::Error fileStatus(const rscore::FilePath& filePath,
                        source_control::VCSStatus* pStatus);
-core::Error statusToJson(const core::FilePath& path,
+rscore::Error statusToJson(const rscore::FilePath& path,
                          const source_control::VCSStatus& status,
-                         core::json::Object* pObject);
+                         rscore::json::Object* pObject);
 
-core::Error clone(const std::string& url,
+rscore::Error clone(const std::string& url,
                   const std::string dirName,
-                  const core::FilePath& parentPath,
+                  const rscore::FilePath& parentPath,
                   boost::shared_ptr<console_process::ConsoleProcess>* ppCP);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace git
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionHTMLPreview.cpp b/src/cpp/session/modules/SessionHTMLPreview.cpp
index 235fd2a..f23190b 100644
--- a/src/cpp/session/modules/SessionHTMLPreview.cpp
+++ b/src/cpp/session/modules/SessionHTMLPreview.cpp
@@ -54,7 +54,7 @@
 #define kHTMLPreview "html_preview"
 #define kHTMLPreviewLocation "/" kHTMLPreview "/"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -149,7 +149,7 @@ public:
          return std::string();
 
       std::string output;
-      Error error = core::readStringFromFile(outputFile_, &output);
+      Error error = rscore::readStringFromFile(outputFile_, &output);
       if (error)
          LOG_ERROR(error);
 
@@ -249,7 +249,7 @@ private:
          if (knitrOutputFile_.empty())
          {
             std::string outputFile;
-            Error error = core::readStringFromFile(outputPathTempFile,
+            Error error = rscore::readStringFromFile(outputPathTempFile,
                                                    &outputFile);
             if (error)
             {
@@ -358,7 +358,7 @@ private:
 
          // create an output file and write to it
          FilePath outputFile = createOutputFile();
-         error = core::writeStringToFile(outputFile, content);
+         error = rscore::writeStringToFile(outputFile, content);
          if (error)
             terminateWithError(error);
          else
@@ -788,7 +788,7 @@ Error readPreviewTemplate(const FilePath& resPath,
 {
 
    FilePath htmlPreviewFile = resPath.childPath("markdown.html");
-   return core::readStringFromFile(htmlPreviewFile, pPreviewTemplate);
+   return rscore::readStringFromFile(htmlPreviewFile, pPreviewTemplate);
 }
 
 void setVarFromHtmlResourceFile(const std::string& name,
@@ -858,7 +858,7 @@ void handleInternalMarkdownPreviewRequest(
 
       // write to output file
       std::string previewHtml = previewStrStream.str();
-      error = core::writeStringToFile(s_pCurrentPreview_->htmlPreviewFile(),
+      error = rscore::writeStringToFile(s_pCurrentPreview_->htmlPreviewFile(),
                                       previewHtml);
       if (error)
       {
@@ -972,7 +972,7 @@ void addFileSpecificHeaders(const FilePath& filePath, http::Response* pResponse)
    }
 }
 
-core::json::Object capabilitiesAsJson()
+rscore::json::Object capabilitiesAsJson()
 {
    // default to unsupported
    json::Object capsJson;
@@ -998,7 +998,7 @@ core::json::Object capabilitiesAsJson()
       error = r::json::jsonValueFromList(capsSEXP, &valJson);
       if (error)
          LOG_ERROR(error);
-      else if (core::json::isType<core::json::Object>(valJson))
+      else if (rscore::json::isType<rscore::json::Object>(valJson))
          capsJson = valJson.get_obj();
    }
 
diff --git a/src/cpp/session/modules/SessionHTMLPreview.hpp b/src/cpp/session/modules/SessionHTMLPreview.hpp
index 86eb926..e4c2116 100644
--- a/src/cpp/session/modules/SessionHTMLPreview.hpp
+++ b/src/cpp/session/modules/SessionHTMLPreview.hpp
@@ -24,7 +24,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    namespace http {
@@ -36,11 +36,11 @@ namespace session {
 namespace modules { 
 namespace html_preview {
 
-core::json::Object capabilitiesAsJson();
-void addFileSpecificHeaders(const core::FilePath& filePath,
-                            core::http::Response* pResponse);
+rscore::json::Object capabilitiesAsJson();
+void addFileSpecificHeaders(const rscore::FilePath& filePath,
+                            rscore::http::Response* pResponse);
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace html_preview
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionHelp.cpp b/src/cpp/session/modules/SessionHelp.cpp
index d08a149..9fe76d8 100644
--- a/src/cpp/session/modules/SessionHelp.cpp
+++ b/src/cpp/session/modules/SessionHelp.cpp
@@ -55,7 +55,7 @@
 #undef TRUE
 #undef FALSE
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -192,7 +192,7 @@ bool handleLocalHttpUrl(const std::string& url)
    
 // As of R 2.10 RShowDoc still uses the legacy file::// mechanism for
 // displaying the manual. Redirect these to the appropriate help event
-bool handleRShowDocFile(const core::FilePath& filePath)
+bool handleRShowDocFile(const rscore::FilePath& filePath)
 {
    boost::regex manualRegx(".*/lib/R/(doc/manual/[A-Za-z0-9_\\-]*\\.html)");
    boost::smatch match;
@@ -640,9 +640,9 @@ void handleRdPreviewRequest(const http::Request& request,
    rCmd << filePath;
 
    // run the converstion and return it
-   core::system::ProcessOptions options;
-   core::system::ProcessResult result;
-   error = core::system::runCommand(rCmd, options, &result);
+   rscore::system::ProcessOptions options;
+   rscore::system::ProcessResult result;
+   error = rscore::system::runCommand(rCmd, options, &result);
    if (error)
    {
       pResponse->setError(error);
@@ -673,7 +673,7 @@ void handleHttpdRequest(const std::string& location,
    // server custom css file if necessary
    if (boost::algorithm::ends_with(path, "/R.css"))
    {
-      core::FilePath cssFile = options().rResourcesPath().childPath("R.css");
+      rscore::FilePath cssFile = options().rResourcesPath().childPath("R.css");
       if (cssFile.exists())
       {
          pResponse->setFile(cssFile, request, filter);
@@ -698,7 +698,7 @@ void handleHttpdRequest(const std::string& location,
    // markdown help is also a special case
    if (path == "/doc/markdown_help.html")
    {
-      core::FilePath helpFile = options().rResourcesPath().childPath(
+      rscore::FilePath helpFile = options().rResourcesPath().childPath(
                                                       "markdown_help.html");
       if (helpFile.exists())
       {
@@ -870,7 +870,7 @@ Error initialize()
    r::routines::addCallMethod(previewRdMethodDef);
 
    using boost::bind;
-   using core::http::UriHandler;
+   using rscore::http::UriHandler;
    using namespace module_context;
    using namespace r::function_hook ;
    ExecBlock initBlock ;
diff --git a/src/cpp/session/modules/SessionHelp.hpp b/src/cpp/session/modules/SessionHelp.hpp
index c8a6a30..b113fc5 100644
--- a/src/cpp/session/modules/SessionHelp.hpp
+++ b/src/cpp/session/modules/SessionHelp.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_HELP_HPP
 #define SESSION_HELP_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace help {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace help
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionHistory.cpp b/src/cpp/session/modules/SessionHistory.cpp
index 400f7fc..b9a8b8b 100644
--- a/src/cpp/session/modules/SessionHistory.cpp
+++ b/src/cpp/session/modules/SessionHistory.cpp
@@ -43,7 +43,7 @@
 
 #include "SessionHistoryArchive.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/SessionHistory.hpp b/src/cpp/session/modules/SessionHistory.hpp
index 440174f..960278e 100644
--- a/src/cpp/session/modules/SessionHistory.hpp
+++ b/src/cpp/session/modules/SessionHistory.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_HISTORY_HPP
 #define SESSION_HISTORY_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace history {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace history
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionHistoryArchive.cpp b/src/cpp/session/modules/SessionHistoryArchive.cpp
index b86a767..a6e9b03 100644
--- a/src/cpp/session/modules/SessionHistoryArchive.cpp
+++ b/src/cpp/session/modules/SessionHistoryArchive.cpp
@@ -31,7 +31,7 @@
 #define kHistoryDatabase "history_database"
 #define kHistoryMaxBytes (750*1024)  // rotate/remove every 750K
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -137,7 +137,7 @@ Error HistoryArchive::add(const std::string& command)
 
    // write the entry to the file
    std::ostringstream ostrEntry ;
-   double currentTime = core::date_time::millisecondsSinceEpoch();
+   double currentTime = rscore::date_time::millisecondsSinceEpoch();
    writeEntry(currentTime, command, &ostrEntry);
    ostrEntry << std::endl;
    return appendToFile(historyDatabaseFilePath(), ostrEntry.str());
diff --git a/src/cpp/session/modules/SessionHistoryArchive.hpp b/src/cpp/session/modules/SessionHistoryArchive.hpp
index 881cd74..013468c 100644
--- a/src/cpp/session/modules/SessionHistoryArchive.hpp
+++ b/src/cpp/session/modules/SessionHistoryArchive.hpp
@@ -21,7 +21,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -55,7 +55,7 @@ public:
    static void migrateRhistoryIfNecessary();
 
 public:
-   core::Error add(const std::string& command);
+   rscore::Error add(const std::string& command);
    const std::vector<HistoryEntry>& entries() const;
 
 private:
diff --git a/src/cpp/session/modules/SessionLimits.cpp b/src/cpp/session/modules/SessionLimits.cpp
index b8d4237..f7e823e 100644
--- a/src/cpp/session/modules/SessionLimits.cpp
+++ b/src/cpp/session/modules/SessionLimits.cpp
@@ -28,7 +28,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/SessionLimits.hpp b/src/cpp/session/modules/SessionLimits.hpp
index 515f269..2d034ea 100644
--- a/src/cpp/session/modules/SessionLimits.hpp
+++ b/src/cpp/session/modules/SessionLimits.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_LIMITS_HPP
 #define SESSION_LIMITS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace limits {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace limits
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionLists.cpp b/src/cpp/session/modules/SessionLists.cpp
index 65f6b50..3e5fa6b 100644
--- a/src/cpp/session/modules/SessionLists.cpp
+++ b/src/cpp/session/modules/SessionLists.cpp
@@ -28,7 +28,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -115,10 +115,10 @@ json::Array listToJson(const std::list<std::string>& list)
    return jsonArray;
 }
 
-void onListsFileChanged(const core::system::FileChangeEvent& fileChange)
+void onListsFileChanged(const rscore::system::FileChangeEvent& fileChange)
 {
    // ignore if deleted
-   if (fileChange.type() == core::system::FileChangeEvent::FileRemoved)
+   if (fileChange.type() == rscore::system::FileChangeEvent::FileRemoved)
       return;
 
    // ignore if it is the lists directory
diff --git a/src/cpp/session/modules/SessionLists.hpp b/src/cpp/session/modules/SessionLists.hpp
index be4be2d..a2e7bc8 100644
--- a/src/cpp/session/modules/SessionLists.hpp
+++ b/src/cpp/session/modules/SessionLists.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,9 +26,9 @@ namespace session {
 namespace modules { 
 namespace lists {
    
-core::json::Object allListsAsJson();
+rscore::json::Object allListsAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace lists
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionPackages.cpp b/src/cpp/session/modules/SessionPackages.cpp
index 8ccc057..9c4ccc9 100644
--- a/src/cpp/session/modules/SessionPackages.cpp
+++ b/src/cpp/session/modules/SessionPackages.cpp
@@ -42,7 +42,7 @@
 
 #include "session-config.h"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -50,7 +50,7 @@ namespace packages {
 
 namespace {
 
-Error availablePackagesBegin(const core::json::JsonRpcRequest& request,
+Error availablePackagesBegin(const rscore::json::JsonRpcRequest& request,
                              std::vector<std::string>* pContribUrls)
 {
    return r::exec::evaluateString<std::vector<std::string> >(
@@ -162,9 +162,9 @@ void downloadAvailablePackages(const std::string& contribUrl,
    }
 }
 
-Error availablePackagesEnd(const core::json::JsonRpcRequest& request,
+Error availablePackagesEnd(const rscore::json::JsonRpcRequest& request,
                            const std::vector<std::string>& contribUrls,
-                           core::json::JsonRpcResponse* pResponse)
+                           rscore::json::JsonRpcResponse* pResponse)
 {
    // download available packages
    std::vector<std::string> availablePackages;
@@ -294,9 +294,9 @@ void initializeRStudioPackages(bool newSession)
    
    if (newSession || (options().programMode() == kSessionProgramModeServer))
    {
-      std::string libDir = core::string_utils::utf8ToSystem(
+      std::string libDir = rscore::string_utils::utf8ToSystem(
                               options().sessionLibraryPath().absolutePath());
-      std::string pkgSrcDir = core::string_utils::utf8ToSystem(
+      std::string pkgSrcDir = rscore::string_utils::utf8ToSystem(
                               options().sessionPackagesPath().absolutePath());
       std::string rsVersion = RSTUDIO_VERSION;
       Error error = r::exec::RFunction(".rs.initializeRStudioPackages",
diff --git a/src/cpp/session/modules/SessionPackages.hpp b/src/cpp/session/modules/SessionPackages.hpp
index fd2db89..da87efc 100644
--- a/src/cpp/session/modules/SessionPackages.hpp
+++ b/src/cpp/session/modules/SessionPackages.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_PACKAGES_HPP
 #define SESSION_PACKAGES_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace packages {
    
-core::Error initialize();
+rscore::Error initialize();
 void enquePackageStateChanged();
                        
 } // namespace packages
diff --git a/src/cpp/session/modules/SessionPackrat.cpp b/src/cpp/session/modules/SessionPackrat.cpp
index 1cca2c1..3aa8764 100644
--- a/src/cpp/session/modules/SessionPackrat.cpp
+++ b/src/cpp/session/modules/SessionPackrat.cpp
@@ -36,7 +36,7 @@
 #include "SessionPackages.hpp"
 #include "session-config.h"
 
-using namespace core;
+using namespace rscore;
 
 #ifdef TRACE_PACKRAT_OUTPUT
 #define PACKRAT_TRACE(x) \
@@ -598,9 +598,9 @@ void onFileChanged(FilePath sourceFilePath)
    }
 }
 
-void onFilesChanged(const std::vector<core::system::FileChangeEvent>& changes)
+void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& changes)
 {
-   BOOST_FOREACH(const core::system::FileChangeEvent& fileChange, changes)
+   BOOST_FOREACH(const rscore::system::FileChangeEvent& fileChange, changes)
    {
       FilePath changedFilePath(fileChange.fileInfo().absolutePath());
       onFileChanged(changedFilePath);
@@ -777,7 +777,7 @@ void onPackratAction(const std::string& project,
                      bool running)
 {
    // if this doesn't apply to the current project then skip it
-   if (!core::system::realPathsEqual(
+   if (!rscore::system::realPathsEqual(
           projects::projectContext().directory(), FilePath(project)))
    {
       return;
diff --git a/src/cpp/session/modules/SessionPackrat.hpp b/src/cpp/session/modules/SessionPackrat.hpp
index d01d89c..26d4354 100644
--- a/src/cpp/session/modules/SessionPackrat.hpp
+++ b/src/cpp/session/modules/SessionPackrat.hpp
@@ -20,7 +20,7 @@
 #include <r/RSexp.hpp>
 #include <session/SessionModuleContext.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -28,19 +28,19 @@ namespace session {
 namespace modules { 
 namespace packrat {
 
-core::Error initialize();
+rscore::Error initialize();
 
 // return the current Packrat context
-core::json::Object contextAsJson();
+rscore::json::Object contextAsJson();
 
 // annotate a JSON object with pending Packrat actions
-void annotatePendingActions(core::json::Object *pJson, bool useCached);
+void annotatePendingActions(rscore::json::Object *pJson, bool useCached);
 
 // return the given Packrat context
-core::json::Object contextAsJson(const module_context::PackratContext& context);
+rscore::json::Object contextAsJson(const module_context::PackratContext& context);
 
 // get Packrat options (as an SEXP)
-core::Error getPackratOptions(SEXP* pOptionsSEXP, r::sexp::Protect* pRProtect);
+rscore::Error getPackratOptions(SEXP* pOptionsSEXP, r::sexp::Protect* pRProtect);
 
 } // namespace packrat
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionPath.cpp b/src/cpp/session/modules/SessionPath.cpp
index faa6688..0d587f3 100644
--- a/src/cpp/session/modules/SessionPath.cpp
+++ b/src/cpp/session/modules/SessionPath.cpp
@@ -31,7 +31,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace modules { 
@@ -43,7 +43,7 @@ Error readPathsFromFile(const FilePath& filePath,
                         std::vector<std::string>* pPaths)
 {
    std::vector<std::string> paths;
-   Error error = core::readStringVectorFromFile(filePath, &paths);
+   Error error = rscore::readStringVectorFromFile(filePath, &paths);
    if (error)
    {
       error.addProperty("path-source", filePath.absolutePath());
@@ -102,7 +102,7 @@ Error initialize()
    }
 
    // build the PATH
-   std::string path = core::system::getenv("PATH");
+   std::string path = rscore::system::getenv("PATH");
    std::for_each(paths.begin(),
                  paths.end(),
                  boost::bind(addToPathIfNecessary, _1, &path));
@@ -119,7 +119,7 @@ Error initialize()
       addToPathIfNecessary(optLocalBinPath.absolutePath(), &path);
 
    // set the path
-   core::system::setenv("PATH", path);
+   rscore::system::setenv("PATH", path);
 #endif
 
    return Success();
diff --git a/src/cpp/session/modules/SessionPath.hpp b/src/cpp/session/modules/SessionPath.hpp
index 4f16ae6..0f7f817 100644
--- a/src/cpp/session/modules/SessionPath.hpp
+++ b/src/cpp/session/modules/SessionPath.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,7 +26,7 @@ namespace session {
 namespace modules {      
 namespace path {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace path
 } // namepace handlers
diff --git a/src/cpp/session/modules/SessionPlots.cpp b/src/cpp/session/modules/SessionPlots.cpp
index 5e615af..8f67f76 100644
--- a/src/cpp/session/modules/SessionPlots.cpp
+++ b/src/cpp/session/modules/SessionPlots.cpp
@@ -40,7 +40,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
@@ -73,7 +73,7 @@ Error removePlot(const json::JsonRpcRequest& request,
 
    if (display.plotCount() < 1)
    {
-      return Error(core::json::errc::ParamInvalid, ERROR_LOCATION);
+      return Error(rscore::json::errc::ParamInvalid, ERROR_LOCATION);
    }
    else if (display.plotCount() == 1)
    {
@@ -323,7 +323,7 @@ Error plotsCreateRPubsHtml(const json::JsonRpcRequest& request,
        "</body>\n"
        "</html>\n");
    std::string html = boost::str(fmt % title % width % plotPath.filename());
-   error = core::writeStringToFile(sourceFilePath, html);
+   error = rscore::writeStringToFile(sourceFilePath, html);
    if (error)
       return error;
 
@@ -471,7 +471,7 @@ void setImageFileResponse(const FilePath& imageFilePath,
    Error error = pResponse->setBody(imageFilePath);
    if (error)
    {
-      if (!core::isPathNotFoundError(error))
+      if (!rscore::isPathNotFoundError(error))
          LOG_ERROR(error);
       pResponse->setError(http::status::InternalServerError,
                           error.code().message());
@@ -823,7 +823,7 @@ bool haveCairoPdf()
 {
    // make sure there is a real x server running on osx
 #ifdef __APPLE__
-   std::string display = core::system::getenv("DISPLAY");
+   std::string display = rscore::system::getenv("DISPLAY");
    if (display.empty() || (display == ":0"))
       return false;
 #endif
diff --git a/src/cpp/session/modules/SessionPlots.hpp b/src/cpp/session/modules/SessionPlots.hpp
index a73ff28..283c2e5 100644
--- a/src/cpp/session/modules/SessionPlots.hpp
+++ b/src/cpp/session/modules/SessionPlots.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_PLOTS_HPP
 #define SESSION_PLOTS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -26,7 +26,7 @@ namespace plots {
       
 bool haveCairoPdf();
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace plots
 } // namespace modules   
diff --git a/src/cpp/session/modules/SessionProfiler.cpp b/src/cpp/session/modules/SessionProfiler.cpp
index 168e424..bee440b 100644
--- a/src/cpp/session/modules/SessionProfiler.cpp
+++ b/src/cpp/session/modules/SessionProfiler.cpp
@@ -20,7 +20,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/SessionProfiler.hpp b/src/cpp/session/modules/SessionProfiler.hpp
index ef41b8e..dccaa4a 100644
--- a/src/cpp/session/modules/SessionProfiler.hpp
+++ b/src/cpp/session/modules/SessionProfiler.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_PROFILER_HPP
 #define SESSION_PROFILER_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace profiler {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace profiler
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionRHooks.cpp b/src/cpp/session/modules/SessionRHooks.cpp
index 7e5c51c..85c44da 100644
--- a/src/cpp/session/modules/SessionRHooks.cpp
+++ b/src/cpp/session/modules/SessionRHooks.cpp
@@ -28,7 +28,7 @@ namespace session {
 namespace modules { 
 namespace rhooks {
 
-using namespace core;
+using namespace rscore;
 
 Error initialize()
 {
diff --git a/src/cpp/session/modules/SessionRHooks.hpp b/src/cpp/session/modules/SessionRHooks.hpp
index 8267194..60b9211 100644
--- a/src/cpp/session/modules/SessionRHooks.hpp
+++ b/src/cpp/session/modules/SessionRHooks.hpp
@@ -18,7 +18,7 @@
 
 #define kSessionInitHook "rstudio.sessionInit"
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -26,11 +26,11 @@ namespace session {
 namespace modules { 
 namespace rhooks {
 
-core::Error initialize();
+rscore::Error initialize();
 
 // thin wrapper around hook invocation 
 template<typename ParamType> 
-core::Error invokeHook(const std::string& hookName, const ParamType& param)
+rscore::Error invokeHook(const std::string& hookName, const ParamType& param)
 {
    return r::exec::RFunction(".rs.invokeHook", hookName, param).call();
 }
diff --git a/src/cpp/session/modules/SessionRPubs.cpp b/src/cpp/session/modules/SessionRPubs.cpp
index 89ff104..630c5a5 100644
--- a/src/cpp/session/modules/SessionRPubs.cpp
+++ b/src/cpp/session/modules/SessionRPubs.cpp
@@ -39,7 +39,7 @@
 
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 
@@ -125,7 +125,7 @@ private:
 
    void start(const std::string& title, const FilePath& htmlFile, bool allowUpdate)
    {
-      using namespace core::string_utils;
+      using namespace rscore::string_utils;
       using namespace module_context;
 
       htmlFile_ = htmlFile;
@@ -177,12 +177,12 @@ private:
       args.push_back(cmd);
 
       // options
-      core::system::ProcessOptions options;
+      rscore::system::ProcessOptions options;
       options.terminateChildren = true;
       options.workingDir = htmlFile.parent();
 
       // callbacks
-      core::system::ProcessCallbacks cb;
+      rscore::system::ProcessCallbacks cb;
       cb.onContinue = boost::bind(&RPubsUpload::onContinue,
                                   RPubsUpload::shared_from_this());
       cb.onStdout = boost::bind(&RPubsUpload::onStdOut,
@@ -221,7 +221,7 @@ private:
          if(csvOutputFile_.exists())
          {
             std::string csvOutput;
-            Error error = core::readStringFromFile(
+            Error error = rscore::readStringFromFile(
                                              csvOutputFile_,
                                              &csvOutput,
                                              string_utils::LineEndingPosix);
diff --git a/src/cpp/session/modules/SessionRPubs.hpp b/src/cpp/session/modules/SessionRPubs.hpp
index c6acc68..cb3b034 100644
--- a/src/cpp/session/modules/SessionRPubs.hpp
+++ b/src/cpp/session/modules/SessionRPubs.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <core/FilePath.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -27,7 +27,7 @@ namespace session {
 namespace modules {      
 namespace rpubs {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace rpubs
 } // namepace handlers
diff --git a/src/cpp/session/modules/SessionSVN.cpp b/src/cpp/session/modules/SessionSVN.cpp
index 4faa5a2..4eb108e 100644
--- a/src/cpp/session/modules/SessionSVN.cpp
+++ b/src/cpp/session/modules/SessionSVN.cpp
@@ -50,8 +50,8 @@
 #include "SessionWorkbench.hpp"
 #include "SessionGit.hpp"
 
-using namespace core;
-using namespace core::shell_utils;
+using namespace rscore;
+using namespace rscore::shell_utils;
 using namespace session::modules::vcs_utils;
 using namespace session::console_process;
 
@@ -101,9 +101,9 @@ std::vector<FilePath> resolveAliasedPaths(const json::Array& paths,
    return results;
 }
 
-core::system::ProcessOptions procOptions(bool requiresSsh)
+rscore::system::ProcessOptions procOptions(bool requiresSsh)
 {
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 
    // detach the session so there is no terminal
 #ifndef _WIN32
@@ -111,16 +111,16 @@ core::system::ProcessOptions procOptions(bool requiresSsh)
 #endif
 
    // get current environment for modification prior to passing to child
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
 
    // add postback directory to PATH
    FilePath postbackDir = session::options().rpostbackPath().parent();
-   core::system::addToPath(&childEnv, postbackDir.absolutePath());
+   rscore::system::addToPath(&childEnv, postbackDir.absolutePath());
 
    // on windows add gnudiff directory to the path
 #ifdef _WIN32
-   core::system::addToPath(&childEnv,
+   rscore::system::addToPath(&childEnv,
                            session::options().gnudiffPath().absolutePath());
 #endif
 
@@ -128,7 +128,7 @@ core::system::ProcessOptions procOptions(bool requiresSsh)
 #ifdef _WIN32
    if (requiresSsh)
    {
-      core::system::addToPath(&childEnv,
+      rscore::system::addToPath(&childEnv,
                               session::options().msysSshPath().absolutePath());
    }
 #endif
@@ -140,14 +140,14 @@ core::system::ProcessOptions procOptions(bool requiresSsh)
 
    // on windows set HOME to USERPROFILE
 #ifdef _WIN32
-   std::string userProfile = core::system::getenv(childEnv, "USERPROFILE");
-   core::system::setenv(&childEnv, "HOME", userProfile);
+   std::string userProfile = rscore::system::getenv(childEnv, "USERPROFILE");
+   rscore::system::setenv(&childEnv, "HOME", userProfile);
 #endif
 
    // set the SVN_EDITOR if it is available
    std::string editFileCommand = workbench::editFileCommand();
    if (!editFileCommand.empty())
-      core::system::setenv(&childEnv, "SVN_EDITOR", editFileCommand);
+      rscore::system::setenv(&childEnv, "SVN_EDITOR", editFileCommand);
 
    // set custom environment
    options.environment = childEnv;
@@ -155,7 +155,7 @@ core::system::ProcessOptions procOptions(bool requiresSsh)
    return options;
 }
 
-core::system::ProcessOptions procOptions()
+rscore::system::ProcessOptions procOptions()
 {
    return procOptions(s_isSvnSshRepository);
 }
@@ -175,13 +175,13 @@ ShellCommand svn()
 Error runSvn(const ShellArgs& args,
              const FilePath& workingDir,
              bool redirectStdErrToStdOut,
-             core::system::ProcessResult* pResult)
+             rscore::system::ProcessResult* pResult)
 {
-   core::system::ProcessOptions options = procOptions();
+   rscore::system::ProcessOptions options = procOptions();
    if (!workingDir.empty())
       options.workingDir = workingDir;
    options.redirectStdErrToStdOut = redirectStdErrToStdOut;
-   Error error = core::system::runCommand(svn() << args.args(),
+   Error error = rscore::system::runCommand(svn() << args.args(),
                                           options,
                                           pResult);
    return error;
@@ -189,7 +189,7 @@ Error runSvn(const ShellArgs& args,
 
 Error runSvn(const ShellArgs& args,
              bool redirectStdErrToStdOut,
-             core::system::ProcessResult* pResult)
+             rscore::system::ProcessResult* pResult)
 {
    FilePath workingDir;
    if (!s_workingDir.empty())
@@ -203,7 +203,7 @@ Error runSvn(const ShellArgs& args,
              std::string* pStdErr=NULL,
              int* pExitCode=NULL)
 {
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = runSvn(args, false, &result);
    if (error)
       return error;
@@ -225,7 +225,7 @@ std::vector<std::string> globalArgs()
 }
 
 
-core::Error createConsoleProc(const ShellArgs& args,
+rscore::Error createConsoleProc(const ShellArgs& args,
                               const FilePath& outputFile,
                               const boost::optional<FilePath>& workingDir,
                               const std::string& caption,
@@ -234,7 +234,7 @@ core::Error createConsoleProc(const ShellArgs& args,
                               bool enqueueRefreshOnExit,
                               boost::shared_ptr<ConsoleProcess>* ppCP)
 {
-   core::system::ProcessOptions options = procOptions(requiresSsh);
+   rscore::system::ProcessOptions options = procOptions(requiresSsh);
    if (!workingDir)
       options.workingDir = s_workingDir;
    else if (!workingDir.get().empty())
@@ -268,7 +268,7 @@ core::Error createConsoleProc(const ShellArgs& args,
    return Success();
 }
 
-core::Error createConsoleProc(const ShellArgs& args,
+rscore::Error createConsoleProc(const ShellArgs& args,
                               const std::string& caption,
                               bool requiresSsh,
                               bool dialog,
@@ -285,8 +285,8 @@ core::Error createConsoleProc(const ShellArgs& args,
                             ppCP);
 }
 
-typedef boost::function<void(const core::Error&,
-                             const core::system::ProcessResult&)>
+typedef boost::function<void(const rscore::Error&,
+                             const rscore::system::ProcessResult&)>
                                                             ProcResultCallback;
 
 void onAsyncSvnExit(int exitCode,
@@ -297,14 +297,14 @@ void onAsyncSvnExit(int exitCode,
    {
       // read the file
       std::string contents;
-      Error error = core::readStringFromFile(outputFile, &contents);
+      Error error = rscore::readStringFromFile(outputFile, &contents);
       if (error)
       {
-         completionCallback(error, core::system::ProcessResult());
+         completionCallback(error, rscore::system::ProcessResult());
          return;
       }
 
-      core::system::ProcessResult result;
+      rscore::system::ProcessResult result;
       result.exitStatus = exitCode;
       result.stdOut = contents;
       completionCallback(Success(), result);
@@ -314,7 +314,7 @@ void onAsyncSvnExit(int exitCode,
       completionCallback(
         systemError(boost::system::errc::operation_canceled,
                     ERROR_LOCATION),
-        core::system::ProcessResult());
+        rscore::system::ProcessResult());
    }
 }
 
@@ -338,7 +338,7 @@ void runSvnAsync(const ShellArgs& args,
                                    enqueueRefreshOnExit,
                                    &pCP);
    if (error)
-      completionCallback(error, core::system::ProcessResult());
+      completionCallback(error, rscore::system::ProcessResult());
 
    // set showOnOutput
    pCP->setShowOnOutput(true);
@@ -448,12 +448,12 @@ struct SvnInfo
 };
 
 
-Error runSvnInfo(const core::FilePath& workingDir, SvnInfo* pSvnInfo)
+Error runSvnInfo(const rscore::FilePath& workingDir, SvnInfo* pSvnInfo)
 {
    if (workingDir.empty())
       return Success();
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = runSvn(ShellArgs() << "info" << "--xml",
                         workingDir,
                         true,
@@ -492,7 +492,7 @@ Error runSvnInfo(const core::FilePath& workingDir, SvnInfo* pSvnInfo)
    return Success();
 }
 
-bool isSvnDirectory(const core::FilePath& workingDir)
+bool isSvnDirectory(const rscore::FilePath& workingDir)
 {
    return !repositoryRoot(workingDir).empty();
 }
@@ -669,7 +669,7 @@ Error svnAdd(const json::JsonRpcRequest& request,
    std::transform(files.begin(), files.end(), std::back_inserter(paths),
                   &resolveAliasedJsonPath);
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = runSvn(ShellArgs() << "add" << globalArgs() << "-q" << "--" << paths,
                   true, &result);
    if (error)
@@ -694,7 +694,7 @@ Error svnDelete(const json::JsonRpcRequest& request,
    std::transform(files.begin(), files.end(), std::back_inserter(paths),
                   &resolveAliasedJsonPath);
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = runSvn(ShellArgs() << "delete" << globalArgs() << "-q" << "--" << paths,
                   true, &result);
    if (error)
@@ -719,7 +719,7 @@ Error svnRevert(const json::JsonRpcRequest& request,
    std::transform(files.begin(), files.end(), std::back_inserter(paths),
                   &resolveAliasedJsonPath);
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = runSvn(ShellArgs() << "revert" << globalArgs() << "-q" <<
                   "--depth" << "infinity" <<
                   "--" << paths,
@@ -747,7 +747,7 @@ Error svnResolve(const json::JsonRpcRequest& request,
     std::transform(files.begin(), files.end(), std::back_inserter(paths),
                    &resolveAliasedJsonPath);
 
-    core::system::ProcessResult result;
+    rscore::system::ProcessResult result;
     error = runSvn(ShellArgs() << "resolve" << globalArgs() << "-q" <<
                    "--accept" << accept <<
                    "--" << paths,
@@ -760,9 +760,9 @@ Error svnResolve(const json::JsonRpcRequest& request,
     return Success();
  }
 
-Error statusToJson(const core::FilePath &path,
+Error statusToJson(const rscore::FilePath &path,
                    const source_control::VCSStatus &status,
-                   core::json::Object *pObject)
+                   rscore::json::Object *pObject)
 {
    json::Object& obj = *pObject;
    obj["status"] = status.status();
@@ -936,7 +936,7 @@ Error svnCleanup(const json::JsonRpcRequest& request,
 {
    RefreshOnExit refreshOnExit;
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = runSvn(ShellArgs() << "cleanup" << globalArgs(),
                         true,
                         &result);
@@ -1098,10 +1098,10 @@ Error svnApplyPatch(const json::JsonRpcRequest& request,
    cmd << "-i" << tempFile;
    cmd << filePath;
 
-   core::system::ProcessOptions options = procOptions();
+   rscore::system::ProcessOptions options = procOptions();
 
-   core::system::ProcessResult result;
-   error = core::system::runCommand(cmd,
+   rscore::system::ProcessResult result;
+   error = rscore::system::runCommand(cmd,
                                     options,
                                     &result);
    if (error)
@@ -1230,7 +1230,7 @@ Error parseHistoryXml(int skip,
 
 void historyEnd(boost::function<void(Error, const std::string&)> callback,
                 const Error& error,
-                const core::system::ProcessResult& result)
+                const rscore::system::ProcessResult& result)
 {
    if (!error && result.exitStatus != EXIT_SUCCESS && !result.stdErr.empty())
       LOG_ERROR_MESSAGE(result.stdErr);
@@ -1459,7 +1459,7 @@ void svnHistory(const json::JsonRpcRequest& request,
 void svnShowEnd(bool noSizeWarning,
                 const json::JsonRpcFunctionContinuation& cont,
                 Error error,
-                const core::system::ProcessResult& result)
+                const rscore::system::ProcessResult& result)
 {
    json::JsonRpcResponse response;
 
@@ -1512,7 +1512,7 @@ void svnShow(const json::JsonRpcRequest& request,
 
 void svnShowFileEnd(const json::JsonRpcFunctionContinuation& cont,
                     Error error,
-                    const core::system::ProcessResult& result)
+                    const rscore::system::ProcessResult& result)
 {
    json::JsonRpcResponse response;
 
@@ -1550,7 +1550,7 @@ void svnShowFile(const json::JsonRpcRequest& request,
 }
 
 Error getIgnores(const FilePath& filePath,
-                    core::system::ProcessResult* pResult)
+                    rscore::system::ProcessResult* pResult)
 {
    return runSvn(ShellArgs() << "propget" << "svn:ignore"
                               << filePath << globalArgs(),
@@ -1569,7 +1569,7 @@ Error svnGetIgnores(const json::JsonRpcRequest& request,
    // resolve path
    FilePath filePath = module_context::resolveAliasedPath(path);
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = getIgnores(filePath, &result);
    if (error)
       return error;
@@ -1581,11 +1581,11 @@ Error svnGetIgnores(const json::JsonRpcRequest& request,
 
 Error setIgnores(const FilePath& filePath,
                  const std::string& ignores,
-                 core::system::ProcessResult* pResult)
+                 rscore::system::ProcessResult* pResult)
 {
    // write the ignores to a temporary file
    FilePath ignoresFile = module_context::tempFile("svn-ignore", "txt");
-   Error error = core::writeStringToFile(ignoresFile, ignores);
+   Error error = rscore::writeStringToFile(ignoresFile, ignores);
    if (error)
       return error;
 
@@ -1619,7 +1619,7 @@ Error svnSetIgnores(const json::JsonRpcRequest& request,
    // resolve path
    FilePath filePath = module_context::resolveAliasedPath(path);
 
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = setIgnores(filePath, ignores, &result);
    if (error)
       return error;
@@ -1632,7 +1632,7 @@ Error svnSetIgnores(const json::JsonRpcRequest& request,
 Error checkout(const std::string& url,
                const std::string& username,
                const std::string dirName,
-               const core::FilePath& parentPath,
+               const rscore::FilePath& parentPath,
                boost::shared_ptr<console_process::ConsoleProcess>* ppCP)
 {
    // optional username arg
@@ -1700,7 +1700,7 @@ bool promptForPassword(const std::string& prompt,
 }
 
 SvnFileDecorationContext::SvnFileDecorationContext(
-                                                 const core::FilePath& rootDir)
+                                                 const rscore::FilePath& rootDir)
 {
    using namespace source_control;
 
@@ -1716,8 +1716,8 @@ SvnFileDecorationContext::~SvnFileDecorationContext()
 {
 }
 
-void SvnFileDecorationContext::decorateFile(const core::FilePath& filePath,
-                                            core::json::Object* pFileObject)
+void SvnFileDecorationContext::decorateFile(const rscore::FilePath& filePath,
+                                            rscore::json::Object* pFileObject)
 {
    using namespace source_control;
 
@@ -1737,7 +1737,7 @@ void SvnFileDecorationContext::decorateFile(const core::FilePath& filePath,
 Error augmentSvnIgnore()
 {
    // check for existing svn:ignore
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    Error error = getIgnores(s_workingDir, &result);
    if (error)
       return error;
@@ -1771,7 +1771,7 @@ Error augmentSvnIgnore()
    }
 
    // write back svn:ignore
-   core::system::ProcessResult setResult;
+   rscore::system::ProcessResult setResult;
    error = setIgnores(s_workingDir, svnIgnore, &setResult);
    if (error)
       return error;
@@ -1820,7 +1820,7 @@ Error initialize()
    return Success();
 }
 
-Error initializeSvn(const core::FilePath& workingDir)
+Error initializeSvn(const rscore::FilePath& workingDir)
 {
    s_workingDir = workingDir;
 
diff --git a/src/cpp/session/modules/SessionSVN.hpp b/src/cpp/session/modules/SessionSVN.hpp
index 9f0f929..f5006a7 100644
--- a/src/cpp/session/modules/SessionSVN.hpp
+++ b/src/cpp/session/modules/SessionSVN.hpp
@@ -38,10 +38,10 @@ extern const char * const kVcsId;
 class SvnFileDecorationContext : public source_control::FileDecorationContext
 {
 public:
-   SvnFileDecorationContext(const core::FilePath& rootDir);
+   SvnFileDecorationContext(const rscore::FilePath& rootDir);
    virtual ~SvnFileDecorationContext();
-   void decorateFile(const core::FilePath& filePath,
-                     core::json::Object* pFileObject);
+   void decorateFile(const rscore::FilePath& filePath,
+                     rscore::json::Object* pFileObject);
 private:
    source_control::StatusResult vcsResult_;
 };
@@ -50,26 +50,26 @@ private:
 bool isSvnInstalled();
 
 // Returns true if the working directory is in a Subversion tree
-bool isSvnDirectory(const core::FilePath& workingDir);
+bool isSvnDirectory(const rscore::FilePath& workingDir);
 
-std::string repositoryRoot(const core::FilePath& workingDir);
+std::string repositoryRoot(const rscore::FilePath& workingDir);
 
 bool isSvnEnabled();
 
-core::FilePath detectedSvnExePath();
+rscore::FilePath detectedSvnExePath();
 
 std::string nonPathSvnBinDir();
 
-core::Error checkout(const std::string& url,
+rscore::Error checkout(const std::string& url,
                      const std::string& username,
                      const std::string dirName,
-                     const core::FilePath& parentPath,
+                     const rscore::FilePath& parentPath,
                      boost::shared_ptr<console_process::ConsoleProcess>* ppCP);
 
-core::Error initialize();
+rscore::Error initialize();
 
 // Initialize SVN with the given working directory
-core::Error initializeSvn(const core::FilePath& workingDir);
+rscore::Error initializeSvn(const rscore::FilePath& workingDir);
 
 } // namespace svn
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionShinyApps.cpp b/src/cpp/session/modules/SessionShinyApps.cpp
index 1d5637d..f7d8fd2 100644
--- a/src/cpp/session/modules/SessionShinyApps.cpp
+++ b/src/cpp/session/modules/SessionShinyApps.cpp
@@ -33,7 +33,7 @@
 
 #define kMaxDeploymentSize 104857600
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/SessionShinyApps.hpp b/src/cpp/session/modules/SessionShinyApps.hpp
index aebc340..b2eeadf 100644
--- a/src/cpp/session/modules/SessionShinyApps.hpp
+++ b/src/cpp/session/modules/SessionShinyApps.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SHINY_APPS_HPP
 #define SESSION_SHINY_APPS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace shiny_apps {
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace shiny_apps
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionShinyViewer.cpp b/src/cpp/session/modules/SessionShinyViewer.cpp
index 84b58d6..1d35777 100644
--- a/src/cpp/session/modules/SessionShinyViewer.cpp
+++ b/src/cpp/session/modules/SessionShinyViewer.cpp
@@ -31,7 +31,7 @@
 #include <session/SessionModuleContext.hpp>
 #include <session/SessionUserSettings.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/SessionShinyViewer.hpp b/src/cpp/session/modules/SessionShinyViewer.hpp
index 85eda78..4ab3c52 100644
--- a/src/cpp/session/modules/SessionShinyViewer.hpp
+++ b/src/cpp/session/modules/SessionShinyViewer.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SHINY_VIEWER_HPP
 #define SESSION_SHINY_VIEWER_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -30,7 +30,7 @@ const int SHINY_VIEWER_PANE = 2;
 const int SHINY_VIEWER_WINDOW = 3;
 const int SHINY_VIEWER_BROWSER = 4;
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace shiny_viewer
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionSource.cpp b/src/cpp/session/modules/SessionSource.cpp
index 166a70c..8ed7be6 100644
--- a/src/cpp/session/modules/SessionSource.cpp
+++ b/src/cpp/session/modules/SessionSource.cpp
@@ -52,7 +52,7 @@ extern "C" const char *locale2charset(const char *);
 #include <session/SessionModuleContext.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -63,7 +63,7 @@ using namespace session::source_database;
 namespace {
 
 void writeDocToJson(boost::shared_ptr<SourceDocument> pDoc,
-                    core::json::Object* pDocJson)
+                    rscore::json::Object* pDocJson)
 {
    // write the doc
    pDoc->writeToJson(pDocJson);
@@ -152,7 +152,7 @@ Error openDocument(const json::JsonRpcRequest& request,
 
    std::string encoding;
    error = json::readParam(request.params, 2, &encoding);
-   if (error && error.code() != core::json::errc::ParamTypeMismatch)
+   if (error && error.code() != rscore::json::errc::ParamTypeMismatch)
       return error ;
    if (encoding.empty())
       encoding = ::locale2charset(NULL);
@@ -298,7 +298,7 @@ Error saveDocumentCore(const std::string& contents,
       // enque file changed event if we need to
       if (!module_context::isDirectoryMonitored(fullDocPath.parent()))
       {
-         using core::system::FileChangeEvent;
+         using rscore::system::FileChangeEvent;
          FileChangeEvent changeEvent(newFile ? FileChangeEvent::FileAdded :
                                                FileChangeEvent::FileModified,
                                      FileInfo(fullDocPath));
@@ -359,7 +359,7 @@ Error saveDocument(const json::JsonRpcRequest& request,
 Error saveDocumentDiff(const json::JsonRpcRequest& request,
                        json::JsonRpcResponse* pResponse)
 {
-   using namespace core::string_utils;
+   using namespace rscore::string_utils;
 
    // unique id and jsonPath (can be null for auto-save)
    std::string id;
@@ -657,12 +657,12 @@ Error processSourceTemplate(const std::string& name,
    // setup template filter
    std::map<std::string,std::string> vars;
    vars["name"] = name;
-   core::text::TemplateFilter filter(vars);
+   rscore::text::TemplateFilter filter(vars);
 
    // read file with template filter
    FilePath templatePath = session::options().rResourcesPath().complete(
                                              "templates/" +  templateName);
-   return core::readStringFromFile(templatePath,
+   return rscore::readStringFromFile(templatePath,
                                    filter,
                                    pContents,
                                    string_utils::LineEndingPosix);
@@ -697,7 +697,7 @@ Error defaultRdResponse(const std::string& name,
       return error;
 
    std::string contents;
-   error = core::readStringFromFile(
+   error = rscore::readStringFromFile(
                         FilePath(string_utils::systemToUtf8(filePath)),
                         &contents,
                         string_utils::LineEndingPosix);
@@ -766,7 +766,7 @@ Error createRdShell(const json::JsonRpcRequest& request,
          else
          {
             std::string contents;
-            error = core::readStringFromFile(rdFilePath,
+            error = rscore::readStringFromFile(rdFilePath,
                                              &contents,
                                              string_utils::LineEndingPosix);
             if (error)
@@ -803,7 +803,7 @@ Error isReadOnlyFile(const json::JsonRpcRequest& request,
    FilePath filePath = module_context::resolveAliasedPath(path);
 
    pResponse->setResult(filePath.exists() &&
-                        core::system::isReadOnly(filePath));
+                        rscore::system::isReadOnly(filePath));
 
    return Success();
 }
@@ -880,7 +880,7 @@ void enqueFileEditEvent(const std::string& file)
    // if it doesn't exist then create it
    if (!filePath.exists())
    {
-      Error error = core::writeStringToFile(filePath, "",
+      Error error = rscore::writeStringToFile(filePath, "",
                                             options().sourcePersistLineEnding());
       if (error)
       {
@@ -969,7 +969,7 @@ SEXP rs_fileEdit(SEXP fileSEXP)
 
 } // anonymous namespace
 
-Error clientInitDocuments(core::json::Array* pJsonDocs)
+Error clientInitDocuments(rscore::json::Array* pJsonDocs)
 {
    source_database::events().onRemoveAll();
 
diff --git a/src/cpp/session/modules/SessionSource.hpp b/src/cpp/session/modules/SessionSource.hpp
index 36cf02e..6ecdff5 100644
--- a/src/cpp/session/modules/SessionSource.hpp
+++ b/src/cpp/session/modules/SessionSource.hpp
@@ -22,7 +22,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    namespace r_util {
       class RSourceIndex;
@@ -33,9 +33,9 @@ namespace session {
 namespace modules { 
 namespace source {
    
-core::Error clientInitDocuments(core::json::Array* pJsonDocs) ;
+rscore::Error clientInitDocuments(rscore::json::Array* pJsonDocs) ;
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace source
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionSpelling.cpp b/src/cpp/session/modules/SessionSpelling.cpp
index 1fbe576..7d164a8 100644
--- a/src/cpp/session/modules/SessionSpelling.cpp
+++ b/src/cpp/session/modules/SessionSpelling.cpp
@@ -30,7 +30,7 @@
 #include <session/SessionUserSettings.hpp>
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -39,7 +39,7 @@ namespace spelling {
 namespace {
 
 // underlying spelling engine
-boost::scoped_ptr<core::spelling::SpellingEngine> s_pSpellingEngine;
+boost::scoped_ptr<rscore::spelling::SpellingEngine> s_pSpellingEngine;
 
 // R function for testing & debugging
 SEXP rs_checkSpelling(SEXP wordSEXP)
@@ -61,7 +61,7 @@ SEXP rs_checkSpelling(SEXP wordSEXP)
 }
 
 
-json::Object dictionaryAsJson(const core::spelling::HunspellDictionary& dict)
+json::Object dictionaryAsJson(const rscore::spelling::HunspellDictionary& dict)
 {
    json::Object dictJson;
    dictJson["id"] = dict.id();
@@ -81,9 +81,9 @@ void syncSpellingEngineDictionaries()
 }
 
 
-core::spelling::HunspellDictionaryManager hunspellDictionaryManager()
+rscore::spelling::HunspellDictionaryManager hunspellDictionaryManager()
 {
-   core::spelling::HunspellDictionaryManager dictManager(
+   rscore::spelling::HunspellDictionaryManager dictManager(
                                          options().hunspellDictionariesPath(),
                                          userDictionariesDir());
    return dictManager;
@@ -186,7 +186,7 @@ Error addCustomDictionary(const json::JsonRpcRequest& request,
    }
 
    // perform the add
-   using namespace core::spelling;
+   using namespace rscore::spelling;
    HunspellDictionaryManager dictManager = hunspellDictionaryManager();
    error = dictManager.custom().add(dictPath);
    if (error)
@@ -210,7 +210,7 @@ Error removeCustomDictionary(const json::JsonRpcRequest& request,
       return error;
 
    // perform the remove
-   using namespace core::spelling;
+   using namespace rscore::spelling;
    HunspellDictionaryManager dictManager = hunspellDictionaryManager();
    error = dictManager.custom().remove(name);
    if (error)
@@ -256,11 +256,11 @@ void onUserSettingsChanged()
 } // anonymous namespace
 
 
-core::json::Object spellingPrefsContextAsJson()
+rscore::json::Object spellingPrefsContextAsJson()
 {
-   using namespace core::spelling;
+   using namespace rscore::spelling;
 
-   core::json::Object contextJson;
+   rscore::json::Object contextJson;
 
    HunspellDictionaryManager dictManager = hunspellDictionaryManager();
    std::vector<HunspellDictionary> dictionaries;
@@ -268,10 +268,10 @@ core::json::Object spellingPrefsContextAsJson()
    if (error)
    {
       LOG_ERROR(error);
-      return core::json::Object();
+      return rscore::json::Object();
    }
 
-   core::json::Array dictionariesJson;
+   rscore::json::Array dictionariesJson;
    std::transform(dictionaries.begin(),
                   dictionaries.end(),
                   std::back_inserter(dictionariesJson),
@@ -279,7 +279,7 @@ core::json::Object spellingPrefsContextAsJson()
 
 
    std::vector<std::string> customDicts = dictManager.custom().dictionaries();
-   core::json::Array customDictsJson = json::toJsonArray(customDicts);
+   rscore::json::Array customDictsJson = json::toJsonArray(customDicts);
 
    // return json
    contextJson["all_languages_installed"] = dictManager.allLanguagesInstalled();
@@ -297,7 +297,7 @@ Error initialize()
    r::routines::addCallMethod(methodDef);
 
    // initialize spelling engine
-   using namespace core::spelling;
+   using namespace rscore::spelling;
    HunspellSpellingEngine* pHunspell = new HunspellSpellingEngine(
                                              userSettings().spellingLanguage(),
                                              hunspellDictionaryManager(),
diff --git a/src/cpp/session/modules/SessionSpelling.hpp b/src/cpp/session/modules/SessionSpelling.hpp
index 32da7ae..dc72d07 100644
--- a/src/cpp/session/modules/SessionSpelling.hpp
+++ b/src/cpp/session/modules/SessionSpelling.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,9 +26,9 @@ namespace session {
 namespace modules { 
 namespace spelling {
 
-core::json::Object spellingPrefsContextAsJson();
+rscore::json::Object spellingPrefsContextAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace spelling
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionUpdates.cpp b/src/cpp/session/modules/SessionUpdates.cpp
index 2e348d8..e1dcb3b 100644
--- a/src/cpp/session/modules/SessionUpdates.cpp
+++ b/src/cpp/session/modules/SessionUpdates.cpp
@@ -29,14 +29,14 @@
 
 #include "session-config.h"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
 namespace updates {
 namespace {
 
-json::Object jsonFromProcessResult(const core::system::ProcessResult& result)
+json::Object jsonFromProcessResult(const rscore::system::ProcessResult& result)
 {
    json::Object obj;
    std::stringstream output(result.stdOut);
@@ -57,7 +57,7 @@ json::Object jsonFromProcessResult(const core::system::ProcessResult& result)
 }
 
 void beginUpdateCheck(bool manual,
-   const boost::function<void(const core::system::ProcessResult&)>& onCompleted)
+   const boost::function<void(const rscore::system::ProcessResult&)>& onCompleted)
 {
    // Find the path to R 
    FilePath rProgramPath;
@@ -69,7 +69,7 @@ void beginUpdateCheck(bool manual,
 
    // Find the path to the script we need to source
    FilePath modulesPath = session::options().modulesRSourcePath();;
-   std::string scriptPath = core::string_utils::utf8ToSystem(
+   std::string scriptPath = rscore::string_utils::utf8ToSystem(
                      modulesPath.complete("SessionUpdates.R").absolutePath());
 
    // Arguments
@@ -104,7 +104,7 @@ void beginUpdateCheck(bool manual,
    args.push_back(cmd);
    
    // Set options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.terminateChildren = true;
 
    module_context::processSupervisor().runProgram(rProgramPath.absolutePath(),
@@ -115,7 +115,7 @@ void beginUpdateCheck(bool manual,
 }
 
 void endRPCUpdateCheck(const json::JsonRpcFunctionContinuation& cont,
-                       const core::system::ProcessResult& result)
+                       const rscore::system::ProcessResult& result)
 {
    json::JsonRpcResponse response;
    response.setResult(jsonFromProcessResult(result));
diff --git a/src/cpp/session/modules/SessionUpdates.hpp b/src/cpp/session/modules/SessionUpdates.hpp
index 15a0beb..d9348b3 100644
--- a/src/cpp/session/modules/SessionUpdates.hpp
+++ b/src/cpp/session/modules/SessionUpdates.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_UPDATES_HPP
 #define SESSION_UPDATES_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules {
 namespace updates {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace updates
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionVCS.cpp b/src/cpp/session/modules/SessionVCS.cpp
index c103ad3..14f0109 100644
--- a/src/cpp/session/modules/SessionVCS.cpp
+++ b/src/cpp/session/modules/SessionVCS.cpp
@@ -40,7 +40,7 @@
 #include <core/system/Crypto.hpp>
 #endif
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 
@@ -134,7 +134,7 @@ class NullFileDecorationContext : public FileDecorationContext
 } // anonymous namespace
 
 boost::shared_ptr<FileDecorationContext> fileDecorationContext(
-                                            const core::FilePath& rootDir)
+                                            const rscore::FilePath& rootDir)
 {
    if (git::isGitEnabled())
    {
@@ -183,9 +183,9 @@ FilePath getTrueHomeDir()
 #if _WIN32
    // On Windows, R's idea of "$HOME" is not, by default, the same as
    // $USERPROFILE, which is what we want for ssh purposes
-   return FilePath(string_utils::systemToUtf8(core::system::getenv("USERPROFILE")));
+   return FilePath(string_utils::systemToUtf8(rscore::system::getenv("USERPROFILE")));
 #else
-   return FilePath(string_utils::systemToUtf8(core::system::getenv("HOME")));
+   return FilePath(string_utils::systemToUtf8(rscore::system::getenv("HOME")));
 #endif
 }
 
@@ -201,7 +201,7 @@ void enqueueRefreshEvent()
 
 
 
-core::Error initialize()
+rscore::Error initialize()
 {
    git::initialize();
    svn::initialize();
diff --git a/src/cpp/session/modules/SessionVCS.hpp b/src/cpp/session/modules/SessionVCS.hpp
index 0dab9be..d878e30 100644
--- a/src/cpp/session/modules/SessionVCS.hpp
+++ b/src/cpp/session/modules/SessionVCS.hpp
@@ -40,7 +40,7 @@ enum VCS
 };
 
 boost::shared_ptr<FileDecorationContext> fileDecorationContext(
-                                            const core::FilePath& rootDir);
+                                            const rscore::FilePath& rootDir);
 
 VCS activeVCS();
 std::string activeVCSName();
@@ -48,14 +48,14 @@ bool isGitInstalled();
 bool isSvnInstalled();
 
 // default directory for reading/writing ssh keys
-core::FilePath defaultSshKeyDir();
+rscore::FilePath defaultSshKeyDir();
 
 void enqueueRefreshEvent();
 
-core::Error fileStatus(const core::FilePath& filePath,
+rscore::Error fileStatus(const rscore::FilePath& filePath,
                        source_control::VCSStatus* pStatus);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace source_control
 } // namespace modules
diff --git a/src/cpp/session/modules/SessionWorkbench.cpp b/src/cpp/session/modules/SessionWorkbench.cpp
index ac1cecd..1da05bd 100644
--- a/src/cpp/session/modules/SessionWorkbench.cpp
+++ b/src/cpp/session/modules/SessionWorkbench.cpp
@@ -60,7 +60,7 @@ extern "C" SA_TYPE SaveAction;
 #endif
 
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -438,15 +438,15 @@ void ammendShellPaths(T* pTarget)
    // non-path git bin dir
    std::string gitBinDir = git::nonPathGitBinDir();
    if (!gitBinDir.empty())
-      core::system::addToPath(pTarget, gitBinDir);
+      rscore::system::addToPath(pTarget, gitBinDir);
 
    // non-path svn bin dir
    std::string svnBinDir = svn::nonPathSvnBinDir();
    if (!svnBinDir.empty())
-      core::system::addToPath(pTarget, svnBinDir);
+      rscore::system::addToPath(pTarget, svnBinDir);
 
    // msys_ssh path
-   core::system::addToPath(pTarget,
+   rscore::system::addToPath(pTarget,
                            session::options().msysSshPath().absolutePath());
 }
 
@@ -508,7 +508,7 @@ Error createSshKey(const json::JsonRpcRequest& request,
 
 #ifdef RSTUDIO_SERVER
    // In server mode, passphrases are encrypted
-   using namespace core::system::crypto;
+   using namespace rscore::system::crypto;
    error = rsaPrivateDecrypt(passphrase, &passphrase);
    if (error)
       return error;
@@ -555,7 +555,7 @@ Error createSshKey(const json::JsonRpcRequest& request,
    cmd << "-f" << sshKeyPath;
 
    // process options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 
    // detach the session so there is no terminal
 #ifndef _WIN32
@@ -564,22 +564,22 @@ Error createSshKey(const json::JsonRpcRequest& request,
 
    // customize the environment on Win32
 #ifdef _WIN32
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
 
    // set HOME to USERPROFILE
-   std::string userProfile = core::system::getenv(childEnv, "USERPROFILE");
-   core::system::setenv(&childEnv, "HOME", userProfile);
+   std::string userProfile = rscore::system::getenv(childEnv, "USERPROFILE");
+   rscore::system::setenv(&childEnv, "HOME", userProfile);
 
    // add msys_ssh to path
-   core::system::addToPath(&childEnv,
+   rscore::system::addToPath(&childEnv,
                            session::options().msysSshPath().absolutePath());
 
    options.environment = childEnv;
 #endif
 
    // run it
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = runCommand(shell_utils::sendStdErrToStdOut(cmd),
                       options,
                       &result);
@@ -610,7 +610,7 @@ void editFilePostback(const std::string& file,
    // read file contents
    FilePath filePath(file);
    std::string fileContents;
-   Error error = core::readStringFromFile(filePath, &fileContents);
+   Error error = rscore::readStringFromFile(filePath, &fileContents);
    if (error)
    {
       LOG_ERROR(error);
@@ -643,7 +643,7 @@ void editFilePostback(const std::string& file,
    }
 
    // write the content back to the file
-   error = core::writeStringToFile(filePath, editedFileContents);
+   error = rscore::writeStringToFile(filePath, editedFileContents);
    if (error)
    {
       LOG_ERROR(error);
@@ -663,36 +663,36 @@ Error startShellDialog(const json::JsonRpcRequest& request,
    using namespace session::console_process;
 
    // configure environment for shell
-   core::system::Options shellEnv;
-   core::system::environment(&shellEnv);
+   rscore::system::Options shellEnv;
+   rscore::system::environment(&shellEnv);
 
    // set dumb terminal
-   core::system::setenv(&shellEnv, "TERM", "dumb");
+   rscore::system::setenv(&shellEnv, "TERM", "dumb");
 
    // set prompt
    std::string path = module_context::createAliasedPath(
                                  module_context::safeCurrentPath());
    std::string prompt = (path.length() > 30) ? "\\W$ " : "\\w$ ";
-   core::system::setenv(&shellEnv, "PS1", prompt);
+   rscore::system::setenv(&shellEnv, "PS1", prompt);
 
    // disable screen oriented facillites
-   core::system::unsetenv(&shellEnv, "EDITOR");
-   core::system::unsetenv(&shellEnv, "VISUAL");
-   core::system::setenv(&shellEnv, "PAGER", "/bin/cat");
+   rscore::system::unsetenv(&shellEnv, "EDITOR");
+   rscore::system::unsetenv(&shellEnv, "VISUAL");
+   rscore::system::setenv(&shellEnv, "PAGER", "/bin/cat");
 
-   core::system::setenv(&shellEnv, "GIT_EDITOR", s_editFileCommand);
-   core::system::setenv(&shellEnv, "SVN_EDITOR", s_editFileCommand);
+   rscore::system::setenv(&shellEnv, "GIT_EDITOR", s_editFileCommand);
+   rscore::system::setenv(&shellEnv, "SVN_EDITOR", s_editFileCommand);
 
    // ammend shell paths as appropriate
    ammendShellPaths(&shellEnv);
 
    // set options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.workingDir = module_context::shellWorkingDirectory();
    options.environment = shellEnv;
 
    // configure bash command
-   core::shell_utils::ShellCommand bashCommand("/bin/bash");
+   rscore::shell_utils::ShellCommand bashCommand("/bin/bash");
    bashCommand << "--norc";
 
    // run process
diff --git a/src/cpp/session/modules/SessionWorkbench.hpp b/src/cpp/session/modules/SessionWorkbench.hpp
index 1497d4f..61963c3 100644
--- a/src/cpp/session/modules/SessionWorkbench.hpp
+++ b/src/cpp/session/modules/SessionWorkbench.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -28,7 +28,7 @@ namespace workbench {
    
 std::string editFileCommand();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace workbench
 } // namespace modules
diff --git a/src/cpp/session/modules/build/SessionBuild.cpp b/src/cpp/session/modules/build/SessionBuild.cpp
index a19b057..253e3f4 100644
--- a/src/cpp/session/modules/build/SessionBuild.cpp
+++ b/src/cpp/session/modules/build/SessionBuild.cpp
@@ -52,7 +52,7 @@
 #include "SessionSourceCpp.hpp"
 #include "SessionInstallRtools.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 
@@ -133,7 +133,7 @@ void onFileChanged(FilePath sourceFilePath)
    }
 }
 
-void onFilesChanged(const std::vector<core::system::FileChangeEvent>& events)
+void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& events)
 {
    if (!s_forcePackageRebuild)
    {
@@ -201,7 +201,7 @@ private:
       }
 
       // callbacks
-      core::system::ProcessCallbacks cb;
+      rscore::system::ProcessCallbacks cb;
       cb.onContinue = boost::bind(&Build::onContinue,
                                   Build::shared_from_this());
       cb.onStdout = boost::bind(&Build::onStandardOutput,
@@ -218,14 +218,14 @@ private:
 
 
    void executeBuild(const std::string& type,
-                     const core::system::ProcessCallbacks& cb)
+                     const rscore::system::ProcessCallbacks& cb)
    {
       // options
-      core::system::ProcessOptions options;
+      rscore::system::ProcessOptions options;
       options.terminateChildren = true;
 
       FilePath buildTargetPath = projects::projectContext().buildTargetPath();
-      const core::r_util::RProjectConfig& config = projectConfig();
+      const rscore::r_util::RProjectConfig& config = projectConfig();
       if (config.buildType == r_util::kBuildTypePackage)
       {
          options.workingDir = buildTargetPath.parent();
@@ -249,8 +249,8 @@ private:
 
    void executePackageBuild(const std::string& type,
                             const FilePath& packagePath,
-                            const core::system::ProcessOptions& options,
-                            const core::system::ProcessCallbacks& cb)
+                            const rscore::system::ProcessOptions& options,
+                            const rscore::system::ProcessCallbacks& cb)
    {
       // validate that this is a package
       if (!r_util::isPackageDirectory(packagePath))
@@ -292,7 +292,7 @@ private:
          if (roxygenizeRequired(type))
          {
             // special callback for roxygenize result
-            core::system::ProcessCallbacks roxygenizeCb = cb;
+            rscore::system::ProcessCallbacks roxygenizeCb = cb;
             roxygenizeCb.onExit =  boost::bind(&Build::onRoxygenizeCompleted,
                                                Build::shared_from_this(),
                                                _1,
@@ -392,8 +392,8 @@ private:
 
 
    void roxygenize(const FilePath& packagePath,
-                   core::system::ProcessOptions options,
-                   const core::system::ProcessCallbacks& cb)
+                   rscore::system::ProcessOptions options,
+                   const rscore::system::ProcessCallbacks& cb)
    {
       FilePath rScriptPath;
       Error error = module_context::rScriptPath(&rScriptPath);
@@ -423,7 +423,7 @@ private:
    {
       if (module_context::haveRcppAttributes())
       {
-         core::system::ProcessResult result;
+         rscore::system::ProcessResult result;
          Error error = module_context::sourceModuleRFileWithResult(
                                              "SessionCompileAttributes.R",
                                              packagePath,
@@ -459,8 +459,8 @@ private:
 
    void buildPackage(const std::string& type,
                      const FilePath& packagePath,
-                     const core::system::ProcessOptions& options,
-                     const core::system::ProcessCallbacks& cb)
+                     const rscore::system::ProcessOptions& options,
+                     const rscore::system::ProcessCallbacks& cb)
    {      
 
       // if this action is going to INSTALL the package then on
@@ -484,22 +484,22 @@ private:
       initErrorParser(packagePath, parsers);
 
       // make a copy of options so we can customize the environment
-      core::system::ProcessOptions pkgOptions(options);
-      core::system::Options childEnv;
-      core::system::environment(&childEnv);
+      rscore::system::ProcessOptions pkgOptions(options);
+      rscore::system::Options childEnv;
+      rscore::system::environment(&childEnv);
 
       // allow child process to inherit our R_LIBS
       std::string libPaths = module_context::libPathsString();
       if (!libPaths.empty())
-         core::system::setenv(&childEnv, "R_LIBS", libPaths);
+         rscore::system::setenv(&childEnv, "R_LIBS", libPaths);
 
       // prevent spurious cygwin warnings on windows
 #ifdef _WIN32
-      core::system::setenv(&childEnv, "CYGWIN", "nodosfilewarning");
+      rscore::system::setenv(&childEnv, "CYGWIN", "nodosfilewarning");
 #endif
 
       // set the not cran env var
-      core::system::setenv(&childEnv, "NOT_CRAN", "true");
+      rscore::system::setenv(&childEnv, "NOT_CRAN", "true");
 
       // add r tools to path if necessary
       module_context::addRtoolsToPathIfNecessary(&childEnv, &buildToolsWarning_);
@@ -599,8 +599,8 @@ private:
 
    void buildSourcePackage(const FilePath& rBinDir,
                            const FilePath& packagePath,
-                           const core::system::ProcessOptions& pkgOptions,
-                           const core::system::ProcessCallbacks& cb)
+                           const rscore::system::ProcessOptions& pkgOptions,
+                           const rscore::system::ProcessCallbacks& cb)
    {
       // compose the build command
       module_context::RCommand rCmd(rBinDir);
@@ -629,8 +629,8 @@ private:
 
    void buildBinaryPackage(const FilePath& rBinDir,
                            const FilePath& packagePath,
-                           const core::system::ProcessOptions& pkgOptions,
-                           const core::system::ProcessCallbacks& cb)
+                           const rscore::system::ProcessOptions& pkgOptions,
+                           const rscore::system::ProcessCallbacks& cb)
    {
       // compose the INSTALL --binary
       module_context::RCommand rCmd(rBinDir);
@@ -659,8 +659,8 @@ private:
 
    void checkPackage(const FilePath& rBinDir,
                      const FilePath& packagePath,
-                     const core::system::ProcessOptions& pkgOptions,
-                     const core::system::ProcessCallbacks& cb)
+                     const rscore::system::ProcessOptions& pkgOptions,
+                     const rscore::system::ProcessCallbacks& cb)
    {
       // first build then check
 
@@ -694,7 +694,7 @@ private:
       rCheckCmd << FilePath(pkgInfo_.sourcePackageFilename());
 
       // special callback for build result
-      core::system::ProcessCallbacks buildCb = cb;
+      rscore::system::ProcessCallbacks buildCb = cb;
       buildCb.onExit =  boost::bind(&Build::onBuildForCheckCompleted,
                                     Build::shared_from_this(),
                                     _1,
@@ -732,8 +732,8 @@ private:
 
    bool devtoolsExecute(const std::string& command,
                         const FilePath& packagePath,
-                        core::system::ProcessOptions pkgOptions,
-                        const core::system::ProcessCallbacks& cb)
+                        rscore::system::ProcessOptions pkgOptions,
+                        const rscore::system::ProcessCallbacks& cb)
    {
       // Find the path to R
       FilePath rProgramPath;
@@ -767,8 +767,8 @@ private:
    }
 
    void devtoolsCheckPackage(const FilePath& packagePath,
-                             const core::system::ProcessOptions& pkgOptions,
-                             const core::system::ProcessCallbacks& cb)
+                             const rscore::system::ProcessOptions& pkgOptions,
+                             const rscore::system::ProcessCallbacks& cb)
    {
       // build the call to check
       std::ostringstream ostr;
@@ -838,8 +838,8 @@ private:
    }
 
    void devtoolsTestPackage(const FilePath& packagePath,
-                            const core::system::ProcessOptions& pkgOptions,
-                            const core::system::ProcessCallbacks& cb)
+                            const rscore::system::ProcessOptions& pkgOptions,
+                            const rscore::system::ProcessCallbacks& cb)
    {
       std::string command = "devtools::test()";
       enqueCommandString(command);
@@ -847,8 +847,8 @@ private:
    }
 
    void testPackage(const FilePath& packagePath,
-                    core::system::ProcessOptions pkgOptions,
-                    const core::system::ProcessCallbacks& cb)
+                    rscore::system::ProcessOptions pkgOptions,
+                    const rscore::system::ProcessCallbacks& cb)
    {
       FilePath rScriptPath;
       Error error = module_context::rScriptPath(&rScriptPath);
@@ -890,8 +890,8 @@ private:
 
    void devtoolsBuildPackage(const FilePath& packagePath,
                              bool binary,
-                             const core::system::ProcessOptions& pkgOptions,
-                             const core::system::ProcessCallbacks& cb)
+                             const rscore::system::ProcessOptions& pkgOptions,
+                             const rscore::system::ProcessCallbacks& cb)
    {
       // create the call to build
       std::ostringstream ostr;
@@ -929,8 +929,8 @@ private:
    void onBuildForCheckCompleted(
                          int exitStatus,
                          const module_context::RCommand& checkCmd,
-                         const core::system::ProcessOptions& checkOptions,
-                         const core::system::ProcessCallbacks& checkCb)
+                         const rscore::system::ProcessOptions& checkOptions,
+                         const rscore::system::ProcessCallbacks& checkCb)
    {
       if (exitStatus == EXIT_SUCCESS)
       {
@@ -984,8 +984,8 @@ private:
 
    void executeMakefileBuild(const std::string& type,
                              const FilePath& targetPath,
-                             const core::system::ProcessOptions& options,
-                             const core::system::ProcessCallbacks& cb)
+                             const rscore::system::ProcessOptions& options,
+                             const rscore::system::ProcessCallbacks& cb)
    {
       // validate that there is a Makefile file
       FilePath makefilePath = targetPath.childPath("Makefile");
@@ -1030,8 +1030,8 @@ private:
 
    void executeCustomBuild(const std::string& type,
                            const FilePath& customScriptPath,
-                           const core::system::ProcessOptions& options,
-                           const core::system::ProcessCallbacks& cb)
+                           const rscore::system::ProcessOptions& options,
+                           const rscore::system::ProcessCallbacks& cb)
    {
       module_context::processSupervisor().runCommand(
                            shell_utils::ShellCommand(customScriptPath),
@@ -1388,7 +1388,7 @@ BuildContext s_suspendBuildContext;
 
 
 void writeBuildContext(const BuildContext& buildContext,
-                       core::Settings* pSettings)
+                       rscore::Settings* pSettings)
 {
    std::ostringstream ostr;
    json::write(buildContext.outputs, ostr);
@@ -1401,7 +1401,7 @@ void writeBuildContext(const BuildContext& buildContext,
    pSettings->set("build-last-errors-base-dir", buildContext.errorsBaseDir);
 }
 
-void onSuspend(core::Settings* pSettings)
+void onSuspend(rscore::Settings* pSettings)
 {
    if (s_pBuild)
    {
@@ -1422,7 +1422,7 @@ void onSuspend(core::Settings* pSettings)
    }
 }
 
-void onResume(const core::Settings& settings)
+void onResume(const rscore::Settings& settings)
 {
    std::string buildLastOutputs = settings.get("build-last-outputs");
    if (!buildLastOutputs.empty())
@@ -1460,7 +1460,7 @@ SEXP rs_restorePreviousPath()
 {
 #ifdef _WIN32
     if (!s_previousPath.empty())
-        core::system::setenv("PATH", s_previousPath);
+        rscore::system::setenv("PATH", s_previousPath);
     s_previousPath.clear();
 #endif
     return R_NilValue;
@@ -1469,11 +1469,11 @@ SEXP rs_restorePreviousPath()
 SEXP rs_addRToolsToPath()
 {
 #ifdef _WIN32
-    s_previousPath = core::system::getenv("PATH");
+    s_previousPath = rscore::system::getenv("PATH");
     std::string newPath = s_previousPath;
     std::string warningMsg;
     module_context::addRtoolsToPathIfNecessary(&newPath, &warningMsg);
-    core::system::setenv("PATH", newPath);
+    rscore::system::setenv("PATH", newPath);
 
 #endif
     return R_NilValue;
@@ -1500,10 +1500,10 @@ SEXP rs_installBuildTools()
       {
          // on mavericks we just need to invoke clang and the user will be
          // prompted to install the command line tools
-         core::system::ProcessResult result;
-         Error error = core::system::runCommand("clang --version",
+         rscore::system::ProcessResult result;
+         Error error = rscore::system::runCommand("clang --version",
                                                 "",
-                                                core::system::ProcessOptions(),
+                                                rscore::system::ProcessOptions(),
                                                 &result);
          if (error)
             LOG_ERROR(error);
@@ -1587,7 +1587,7 @@ void onDeferredInit(bool newSession)
          if (!error)
          {
             std::string makevars = "CC=clang\nCXX=clang++\n";
-            error = core::writeStringToFile(makevarsPath, makevars);
+            error = rscore::writeStringToFile(makevarsPath, makevars);
             if (error)
                LOG_ERROR(error);
          }
@@ -1696,7 +1696,7 @@ bool canBuildCpp()
 
    // try to build a simple c file to test whether we have build tools available
    FilePath cppPath = module_context::tempFile("test", "c");
-   Error error = core::writeStringToFile(cppPath, "void test() {}\n");
+   Error error = rscore::writeStringToFile(cppPath, "void test() {}\n");
    if (error)
    {
       LOG_ERROR(error);
@@ -1717,16 +1717,16 @@ bool canBuildCpp()
    rCmd << "SHLIB";
    rCmd << cppPath.filename();
 
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.workingDir = cppPath.parent();
-   core::system::Options childEnv;
-   core::system::environment(&childEnv);
+   rscore::system::Options childEnv;
+   rscore::system::environment(&childEnv);
    std::string warningMsg;
    module_context::addRtoolsToPathIfNecessary(&childEnv, &warningMsg);
    options.environment = childEnv;
 
-   core::system::ProcessResult result;
-   error = core::system::runCommand(rCmd.commandString(), options, &result);
+   rscore::system::ProcessResult result;
+   error = rscore::system::runCommand(rCmd.commandString(), options, &result);
    if (error)
    {
       LOG_ERROR(error);
diff --git a/src/cpp/session/modules/build/SessionBuild.hpp b/src/cpp/session/modules/build/SessionBuild.hpp
index c19a71f..d650640 100644
--- a/src/cpp/session/modules/build/SessionBuild.hpp
+++ b/src/cpp/session/modules/build/SessionBuild.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,9 +26,9 @@ namespace session {
 namespace modules { 
 namespace build {
 
-core::json::Value buildStateAsJson();
+rscore::json::Value buildStateAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace build
 } // namespace modules
diff --git a/src/cpp/session/modules/build/SessionBuildEnvironment.cpp b/src/cpp/session/modules/build/SessionBuildEnvironment.cpp
index a54c1ad..f4ae849 100644
--- a/src/cpp/session/modules/build/SessionBuildEnvironment.cpp
+++ b/src/cpp/session/modules/build/SessionBuildEnvironment.cpp
@@ -30,7 +30,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace module_context {
@@ -49,7 +49,7 @@ r_util::RToolsInfo scanPathForRTools()
 
    // we have a candidate installPath
    FilePath installPath = lsPath.parent().parent();
-   core::system::ensureLongPath(&installPath);
+   rscore::system::ensureLongPath(&installPath);
    if (!installPath.childPath("Rtools.txt").exists())
       return noToolsFound;
 
@@ -67,7 +67,7 @@ r_util::RToolsInfo scanPathForRTools()
 
    // Rtools is in the path -- now crack the VERSION file
    std::string contents;
-   Error error = core::readStringFromFile(versionPath, &contents);
+   Error error = rscore::readStringFromFile(versionPath, &contents);
    if (error)
    {
       LOG_ERROR(error);
@@ -87,7 +87,7 @@ r_util::RToolsInfo scanPathForRTools()
 std::string formatPath(const FilePath& filePath)
 {
    FilePath displayPath = filePath;
-   core::system::ensureLongPath(&displayPath);
+   rscore::system::ensureLongPath(&displayPath);
    return boost::algorithm::replace_all_copy(
                                  displayPath.absolutePath(), "/", "\\");
 }
@@ -130,7 +130,7 @@ bool doAddRtoolsToPathIfNecessary(T* pTarget, std::string* pWarningMessage)
 
     // ok so scan for R tools
     std::vector<r_util::RToolsInfo> rTools;
-    error = core::r_util::scanRegistryForRTools(&rTools);
+    error = rscore::r_util::scanRegistryForRTools(&rTools);
     if (error)
     {
        LOG_ERROR(error);
@@ -204,7 +204,7 @@ bool addRtoolsToPathIfNecessary(std::string* pPath,
    return doAddRtoolsToPathIfNecessary(pPath, pWarningMessage);
 }
 
-bool addRtoolsToPathIfNecessary(core::system::Options* pEnvironment,
+bool addRtoolsToPathIfNecessary(rscore::system::Options* pEnvironment,
                                 std::string* pWarningMessage)
 {
    return doAddRtoolsToPathIfNecessary(pEnvironment, pWarningMessage);
@@ -224,7 +224,7 @@ bool addRtoolsToPathIfNecessary(std::string* pPath,
    return false;
 }
 
-bool addRtoolsToPathIfNecessary(core::system::Options* pEnvironment,
+bool addRtoolsToPathIfNecessary(rscore::system::Options* pEnvironment,
                                 std::string* pWarningMessage)
 {
    return false;
diff --git a/src/cpp/session/modules/build/SessionBuildErrors.cpp b/src/cpp/session/modules/build/SessionBuildErrors.cpp
index 0049a04..271eb8b 100644
--- a/src/cpp/session/modules/build/SessionBuildErrors.cpp
+++ b/src/cpp/session/modules/build/SessionBuildErrors.cpp
@@ -29,7 +29,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
@@ -76,7 +76,7 @@ FilePath scanForRSourceFile(const FilePath& basePath,
       if (isRSourceFile(child))
       {
          std::vector<std::string> lines;
-         Error error = core::readStringVectorFromFile(child, &lines, false);
+         Error error = rscore::readStringVectorFromFile(child, &lines, false);
          if (error)
          {
             LOG_ERROR(error);
@@ -113,7 +113,7 @@ std::vector<CompileError> parseRErrors(const FilePath& basePath,
 
       // we need to guess the file based on the contextual information
       // provided in the error message
-      int diagLine = core::safe_convert::stringTo<int>(match[4], -1);
+      int diagLine = rscore::safe_convert::stringTo<int>(match[4], -1);
       if (diagLine != -1)
       {
          FilePath rSrcFile = scanForRSourceFile(basePath,
@@ -125,8 +125,8 @@ std::vector<CompileError> parseRErrors(const FilePath& basePath,
             // create error and add it
             CompileError err(CompileError::Error,
                              rSrcFile,
-                             core::safe_convert::stringTo<int>(line, 1),
-                             core::safe_convert::stringTo<int>(column, 1),
+                             rscore::safe_convert::stringTo<int>(line, 1),
+                             rscore::safe_convert::stringTo<int>(column, 1),
                              message,
                              false);
             errors.push_back(err);
@@ -183,7 +183,7 @@ std::vector<CompileError> parseGccErrors(const FilePath& basePath,
       else
          filePath = basePath.complete(file);
       FilePath realPath;
-      Error error = core::system::realPath(filePath, &realPath);
+      Error error = rscore::system::realPath(filePath, &realPath);
       if (error)
          LOG_ERROR(error);
       else
@@ -200,8 +200,8 @@ std::vector<CompileError> parseGccErrors(const FilePath& basePath,
       // create error and add it
       CompileError err(errType,
                        filePath,
-                       core::safe_convert::stringTo<int>(line, 1),
-                       core::safe_convert::stringTo<int>(column, 1),
+                       rscore::safe_convert::stringTo<int>(line, 1),
+                       rscore::safe_convert::stringTo<int>(column, 1),
                        message,
                        true);
       errors.push_back(err);
diff --git a/src/cpp/session/modules/build/SessionBuildErrors.hpp b/src/cpp/session/modules/build/SessionBuildErrors.hpp
index 313550a..e3704ee 100644
--- a/src/cpp/session/modules/build/SessionBuildErrors.hpp
+++ b/src/cpp/session/modules/build/SessionBuildErrors.hpp
@@ -39,7 +39,7 @@ struct CompileError
    };
 
    CompileError(Type type,
-                const core::FilePath& path,
+                const rscore::FilePath& path,
                 int line,
                 int column,
                 const std::string& message,
@@ -50,14 +50,14 @@ struct CompileError
    }
 
    Type type;
-   core::FilePath path;
+   rscore::FilePath path;
    int line;
    int column;
    std::string message;
    bool showErrorList;
 };
 
-core::json::Array compileErrorsAsJson(const std::vector<CompileError>& errors);
+rscore::json::Array compileErrorsAsJson(const std::vector<CompileError>& errors);
    
 typedef boost::function<std::vector<CompileError>(const std::string&)>
                                                          CompileErrorParser;
@@ -91,9 +91,9 @@ private:
    std::vector<CompileErrorParser> parsers_;
 };
 
-CompileErrorParser gccErrorParser(const core::FilePath& basePath);
+CompileErrorParser gccErrorParser(const rscore::FilePath& basePath);
 
-CompileErrorParser rErrorParser(const core::FilePath& basePath);
+CompileErrorParser rErrorParser(const rscore::FilePath& basePath);
 
 
 } // namespace build
diff --git a/src/cpp/session/modules/build/SessionInstallRtools.cpp b/src/cpp/session/modules/build/SessionInstallRtools.cpp
index c816dab..eac9f49 100644
--- a/src/cpp/session/modules/build/SessionInstallRtools.cpp
+++ b/src/cpp/session/modules/build/SessionInstallRtools.cpp
@@ -27,7 +27,7 @@
 #include <session/SessionConsoleProcess.hpp>
 #include <session/SessionUserSettings.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
@@ -35,7 +35,7 @@ namespace build {
 
 namespace {
 
-void onDownloadCompleted(const core::system::ProcessResult& result,
+void onDownloadCompleted(const rscore::system::ProcessResult& result,
                          const std::string& version,
                          const FilePath& installerPath)
 {
@@ -82,7 +82,7 @@ Error installRtools()
       }
    }
    if (version.empty())
-      return core::pathNotFoundError(ERROR_LOCATION);
+      return rscore::pathNotFoundError(ERROR_LOCATION);
 
    // R binary
    FilePath rProgramPath;
@@ -116,7 +116,7 @@ Error installRtools()
    args.push_back(cmd);
 
    // create and execute the process
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.redirectStdErrToStdOut = true;
    options.terminateChildren = true;
    module_context::processSupervisor().runProgram(
diff --git a/src/cpp/session/modules/build/SessionInstallRtools.hpp b/src/cpp/session/modules/build/SessionInstallRtools.hpp
index 96599dc..56571b5 100644
--- a/src/cpp/session/modules/build/SessionInstallRtools.hpp
+++ b/src/cpp/session/modules/build/SessionInstallRtools.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_BUILD_INSTALL_RTOOLS_HPP
 #define SESSION_BUILD_INSTALL_RTOOLS_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules {
 namespace build {
 
-core::Error installRtools();
+rscore::Error installRtools();
 
 } // namespace build
 } // namespace modules
diff --git a/src/cpp/session/modules/build/SessionSourceCpp.cpp b/src/cpp/session/modules/build/SessionSourceCpp.cpp
index 064c625..66f174d 100644
--- a/src/cpp/session/modules/build/SessionSourceCpp.cpp
+++ b/src/cpp/session/modules/build/SessionSourceCpp.cpp
@@ -31,7 +31,7 @@
 
 #include "SessionBuildErrors.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
@@ -119,12 +119,12 @@ public:
       showOutput_ = showOutput;
 
       // fixup path if necessary
-      std::string path = core::system::getenv("PATH");
+      std::string path = rscore::system::getenv("PATH");
       std::string newPath = path;
       if (module_context::addRtoolsToPathIfNecessary(&newPath, &rToolsWarning_))
       {
           previousPath_ = path;
-          core::system::setenv("PATH", newPath);
+          rscore::system::setenv("PATH", newPath);
       }
 
       // capture all output that goes to the console
@@ -155,7 +155,7 @@ private:
    {
       // restore previous path
       if (!previousPath_.empty())
-         core::system::setenv("PATH", previousPath_);
+         rscore::system::setenv("PATH", previousPath_);
 
       // collect all build output (do this before r tools warning so
       // it's output doesn't end up in consoleErrorBuffer_)
diff --git a/src/cpp/session/modules/build/SessionSourceCpp.hpp b/src/cpp/session/modules/build/SessionSourceCpp.hpp
index a036386..5455c8a 100644
--- a/src/cpp/session/modules/build/SessionSourceCpp.hpp
+++ b/src/cpp/session/modules/build/SessionSourceCpp.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_BUILD_SOURCE_CPP_HPP
 #define SESSION_BUILD_SOURCE_CPP_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -25,7 +25,7 @@ namespace modules {
 namespace build {
 namespace source_cpp {
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace source_cpp
 } // namespace build
diff --git a/src/cpp/session/modules/clang/CodeCompletion.cpp b/src/cpp/session/modules/clang/CodeCompletion.cpp
index 3a15864..5bea028 100644
--- a/src/cpp/session/modules/clang/CodeCompletion.cpp
+++ b/src/cpp/session/modules/clang/CodeCompletion.cpp
@@ -24,8 +24,8 @@
 
 #include "RSourceIndex.hpp"
 
-using namespace core ;
-using namespace core::libclang;
+using namespace rscore ;
+using namespace rscore::libclang;
 
 namespace session {
 namespace modules { 
@@ -33,7 +33,7 @@ namespace clang {
 
 namespace {
 
-core::json::Object toJson(const CodeCompleteResult& result)
+rscore::json::Object toJson(const CodeCompleteResult& result)
 {
    json::Object resultJson;
    resultJson["text"] = result.getText();
@@ -44,8 +44,8 @@ core::json::Object toJson(const CodeCompleteResult& result)
 } // anonymous namespace
 
 
-Error getCppCompletions(const core::json::JsonRpcRequest& request,
-                        core::json::JsonRpcResponse* pResponse)
+Error getCppCompletions(const rscore::json::JsonRpcRequest& request,
+                        rscore::json::JsonRpcResponse* pResponse)
 {
    // get params
    std::string docPath;
diff --git a/src/cpp/session/modules/clang/CodeCompletion.hpp b/src/cpp/session/modules/clang/CodeCompletion.hpp
index 107f1e2..1b630aa 100644
--- a/src/cpp/session/modules/clang/CodeCompletion.hpp
+++ b/src/cpp/session/modules/clang/CodeCompletion.hpp
@@ -24,8 +24,8 @@ namespace session {
 namespace modules {      
 namespace clang {
 
-core::Error getCppCompletions(const core::json::JsonRpcRequest& request,
-                              core::json::JsonRpcResponse* pResponse);
+rscore::Error getCppCompletions(const rscore::json::JsonRpcRequest& request,
+                              rscore::json::JsonRpcResponse* pResponse);
    
 } // namespace clang
 } // namepace handlers
diff --git a/src/cpp/session/modules/clang/GoToDefinition.cpp b/src/cpp/session/modules/clang/GoToDefinition.cpp
index 5edf566..55c8a19 100644
--- a/src/cpp/session/modules/clang/GoToDefinition.cpp
+++ b/src/cpp/session/modules/clang/GoToDefinition.cpp
@@ -22,8 +22,8 @@
 
 #include "RSourceIndex.hpp"
 
-using namespace core;
-using namespace core::libclang;
+using namespace rscore;
+using namespace rscore::libclang;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/clang/GoToDefinition.hpp b/src/cpp/session/modules/clang/GoToDefinition.hpp
index 77aaa96..7891cd9 100644
--- a/src/cpp/session/modules/clang/GoToDefinition.hpp
+++ b/src/cpp/session/modules/clang/GoToDefinition.hpp
@@ -24,8 +24,8 @@ namespace session {
 namespace modules {      
 namespace clang {
 
-core::Error goToCppDefinition(const core::json::JsonRpcRequest& request,
-                              core::json::JsonRpcResponse* pResponse);
+rscore::Error goToCppDefinition(const rscore::json::JsonRpcRequest& request,
+                              rscore::json::JsonRpcResponse* pResponse);
    
 } // namespace clang
 } // namepace modules
diff --git a/src/cpp/session/modules/clang/RCompilationDatabase.cpp b/src/cpp/session/modules/clang/RCompilationDatabase.cpp
index 2d07a75..5ccad84 100644
--- a/src/cpp/session/modules/clang/RCompilationDatabase.cpp
+++ b/src/cpp/session/modules/clang/RCompilationDatabase.cpp
@@ -40,8 +40,8 @@
 
 #include <core/libclang/LibClang.hpp>
 
-using namespace core ;
-using namespace core::libclang;
+using namespace rscore ;
+using namespace rscore::libclang;
 
 namespace session {
 namespace modules { 
@@ -62,11 +62,11 @@ struct SourceCppFileInfo
    std::string rcppPkg;
 };
 
-SourceCppFileInfo sourceCppFileInfo(const core::FilePath& srcPath)
+SourceCppFileInfo sourceCppFileInfo(const rscore::FilePath& srcPath)
 {
    // read file
    std::string contents;
-   Error error = core::readStringFromFile(srcPath, &contents);
+   Error error = rscore::readStringFromFile(srcPath, &contents);
    if (error)
    {
       LOG_ERROR(error);
@@ -235,7 +235,7 @@ void RCompilationDatabase::updateForCurrentPackage()
    // read the package description file
    using namespace projects;
    FilePath pkgPath = projectContext().buildTargetPath();
-   core::r_util::RPackageInfo pkgInfo;
+   rscore::r_util::RPackageInfo pkgInfo;
    Error error = pkgInfo.read(pkgPath);
    if (error)
    {
@@ -256,7 +256,7 @@ void RCompilationDatabase::updateForCurrentPackage()
    }
 
    // get the build environment (e.g. Rtools config)
-   core::system::Options env = compilationEnvironment();
+   rscore::system::Options env = compilationEnvironment();
 
    // Check for C++11 in SystemRequirements
    if (boost::algorithm::icontains(pkgInfo.systemRequirements(), "C++11"))
@@ -265,7 +265,7 @@ void RCompilationDatabase::updateForCurrentPackage()
    // Run R CMD SHLIB
    FilePath srcDir = pkgPath.childPath("src");
    FilePath tempSrcFile = srcDir.childPath(
-                                 core::system::generateUuid() + ".cpp");
+                                 rscore::system::generateUuid() + ".cpp");
    std::vector<std::string> compileArgs = argsForRCmdSHLIB(env, tempSrcFile);
 
    if (!compileArgs.empty())
@@ -294,7 +294,7 @@ void RCompilationDatabase::updateForCurrentPackage()
 
 }
 
-void RCompilationDatabase::updateForSourceCpp(const core::FilePath& srcFile)
+void RCompilationDatabase::updateForSourceCpp(const rscore::FilePath& srcFile)
 {
    // read the the source cpp hash for this file
    SourceCppFileInfo info = sourceCppFileInfo(srcFile);
@@ -325,10 +325,10 @@ void RCompilationDatabase::updateForSourceCpp(const core::FilePath& srcFile)
 
 
 Error RCompilationDatabase::executeSourceCpp(
-                                      core::system::Options env,
+                                      rscore::system::Options env,
                                       const std::string& rcppPkg,
-                                      const core::FilePath& srcPath,
-                                      core::system::ProcessResult* pResult)
+                                      const rscore::FilePath& srcPath,
+                                      rscore::system::ProcessResult* pResult)
 {
    // get path to R script
    FilePath rScriptPath;
@@ -337,7 +337,7 @@ Error RCompilationDatabase::executeSourceCpp(
       return error;
 
    // establish options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
 
    // always run as a slave
    std::vector<std::string> args;
@@ -357,7 +357,7 @@ Error RCompilationDatabase::executeSourceCpp(
       args.push_back("--vanilla");
       std::string libPaths = module_context::libPathsString();
       if (!libPaths.empty())
-         core::system::setenv(&env, "R_LIBS", libPaths);
+         rscore::system::setenv(&env, "R_LIBS", libPaths);
    }
 
    // execute code
@@ -371,7 +371,7 @@ Error RCompilationDatabase::executeSourceCpp(
       if (module_context::isPackageVersionInstalled("Rcpp", "0.11.3"))
          extraParams = ", dryRun = TRUE";
       else
-         core::system::setenv(&env, "MAKE", "make --dry-run");
+         rscore::system::setenv(&env, "MAKE", "make --dry-run");
 
       // add command to arguments
       boost::format fmt("Rcpp::sourceCpp('%1%', showOutput = TRUE%2%)");
@@ -379,7 +379,7 @@ Error RCompilationDatabase::executeSourceCpp(
    }
    else
    {
-      core::system::setenv(&env, "MAKE", "make --dry-run");
+      rscore::system::setenv(&env, "MAKE", "make --dry-run");
       boost::format fmt("attributes::sourceCpp('%1%', verbose = TRUE)");
       args.push_back(boost::str(fmt % srcPath.absolutePath()));
    }
@@ -389,18 +389,18 @@ Error RCompilationDatabase::executeSourceCpp(
    options.environment = env;
 
    // execute and capture output
-   return core::system::runProgram(
-            core::string_utils::utf8ToSystem(rScriptPath.absolutePath()),
+   return rscore::system::runProgram(
+            rscore::string_utils::utf8ToSystem(rScriptPath.absolutePath()),
             args,
             "",
             options,
             pResult);
 }
 
-core::Error RCompilationDatabase::executeRCmdSHLIB(
-                                 core::system::Options env,
-                                 const core::FilePath& srcPath,
-                                 core::system::ProcessResult* pResult)
+rscore::Error RCompilationDatabase::executeRCmdSHLIB(
+                                 rscore::system::Options env,
+                                 const rscore::FilePath& srcPath,
+                                 rscore::system::ProcessResult* pResult)
 {
    // get R bin directory
    FilePath rBinDir;
@@ -415,10 +415,10 @@ core::Error RCompilationDatabase::executeRCmdSHLIB(
    rCmd << srcPath.filename();
 
    // set options and run
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.workingDir = srcPath.parent();
    options.environment = env;
-   return core::system::runCommand(rCmd.commandString(), options, pResult);
+   return rscore::system::runCommand(rCmd.commandString(), options, pResult);
 }
 
 
@@ -531,8 +531,8 @@ RCompilationDatabase::CompilationConfig
    std::vector<std::string> args = baseCompilationArgs(true);
 
    // execute sourceCpp
-   core::system::ProcessResult result;
-   core::system::Options env = compilationEnvironment();
+   rscore::system::ProcessResult result;
+   rscore::system::Options env = compilationEnvironment();
    Error error = executeSourceCpp(env, rcppPkg, srcFile, &result);
    if (error)
    {
@@ -556,10 +556,10 @@ RCompilationDatabase::CompilationConfig
 }
 
 std::vector<std::string> RCompilationDatabase::argsForRCmdSHLIB(
-                                          core::system::Options env,
+                                          rscore::system::Options env,
                                           FilePath tempSrcFile)
 {
-   Error error = core::writeStringToFile(tempSrcFile, "void foo() {}\n");
+   Error error = rscore::writeStringToFile(tempSrcFile, "void foo() {}\n");
    if (error)
    {
       LOG_ERROR(error);
@@ -567,7 +567,7 @@ std::vector<std::string> RCompilationDatabase::argsForRCmdSHLIB(
    }
 
    // execute R CMD SHLIB
-   core::system::ProcessResult result;
+   rscore::system::ProcessResult result;
    error = executeRCmdSHLIB(env, tempSrcFile, &result);
 
    // remove the temporary source file
@@ -615,8 +615,8 @@ std::vector<std::string> RCompilationDatabase::rToolsArgs() const
    if (rToolsArgs_.empty())
    {
       // scan for Rtools
-      std::vector<core::r_util::RToolsInfo> rTools;
-      Error error = core::r_util::scanRegistryForRTools(&rTools);
+      std::vector<rscore::r_util::RToolsInfo> rTools;
+      Error error = rscore::r_util::scanRegistryForRTools(&rTools);
       if (error)
          LOG_ERROR(error);
 
@@ -651,11 +651,11 @@ std::vector<std::string> RCompilationDatabase::rToolsArgs() const
    return rToolsArgs_;
 }
 
-core::system::Options RCompilationDatabase::compilationEnvironment() const
+rscore::system::Options RCompilationDatabase::compilationEnvironment() const
 {
    // rtools on windows
-   core::system::Options env;
-   core::system::environment(&env);
+   rscore::system::Options env;
+   rscore::system::environment(&env);
 #if defined(_WIN32)
    std::string warning;
    module_context::addRtoolsToPathIfNecessary(&env, &warning);
@@ -684,7 +684,7 @@ std::vector<std::string> RCompilationDatabase::precompiledHeaderArgs(
       LOG_ERROR(error);
       return std::vector<std::string>();
    }
-   pkgPath = core::hash::crc32HexHash(pkgPath);
+   pkgPath = rscore::hash::crc32HexHash(pkgPath);
    precompiledDir = precompiledDir.childPath(pkgPath);
 
    // platform/rcpp version specific directory name
@@ -731,7 +731,7 @@ std::vector<std::string> RCompilationDatabase::precompiledHeaderArgs(
       std::string contents;
       boost::format fmt("#include <%1%.h>\n");
       contents.append(boost::str(fmt % pkgName));
-      error = core::writeStringToFile(cppPath, contents);
+      error = rscore::writeStringToFile(cppPath, contents);
       if (error)
       {
          LOG_ERROR(error);
@@ -746,7 +746,7 @@ std::vector<std::string> RCompilationDatabase::precompiledHeaderArgs(
          args.push_back(stdArg);
 
       // run R CMD SHLIB
-      core::system::Options env = compilationEnvironment();
+      rscore::system::Options env = compilationEnvironment();
       FilePath tempSrcFile = module_context::tempFile("clang", "cpp");
       std::vector<std::string> cArgs = argsForRCmdSHLIB(env, tempSrcFile);
       std::copy(cArgs.begin(), cArgs.end(), std::back_inserter(args));
@@ -756,7 +756,7 @@ std::vector<std::string> RCompilationDatabase::precompiledHeaderArgs(
       std::copy(pkgArgs.begin(), pkgArgs.end(), std::back_inserter(args));
 
       // create args array
-      core::system::ProcessArgs argsArray(args);
+      rscore::system::ProcessArgs argsArray(args);
 
       CXIndex index = clang().createIndex(0,0);
 
diff --git a/src/cpp/session/modules/clang/RCompilationDatabase.hpp b/src/cpp/session/modules/clang/RCompilationDatabase.hpp
index 6b58efe..ea2a23e 100644
--- a/src/cpp/session/modules/clang/RCompilationDatabase.hpp
+++ b/src/cpp/session/modules/clang/RCompilationDatabase.hpp
@@ -44,17 +44,17 @@ public:
 
 private:
 
-   core::Error executeSourceCpp(core::system::Options env,
+   rscore::Error executeSourceCpp(rscore::system::Options env,
                                 const std::string& rcppPkg,
-                                const core::FilePath& srcPath,
-                                core::system::ProcessResult* pResult);
+                                const rscore::FilePath& srcPath,
+                                rscore::system::ProcessResult* pResult);
 
-   core::Error executeRCmdSHLIB(core::system::Options env,
-                                const core::FilePath& srcPath,
-                                core::system::ProcessResult* pResult);
+   rscore::Error executeRCmdSHLIB(rscore::system::Options env,
+                                const rscore::FilePath& srcPath,
+                                rscore::system::ProcessResult* pResult);
 
    void updateForCurrentPackage();
-   void updateForSourceCpp(const core::FilePath& cppPath);
+   void updateForSourceCpp(const rscore::FilePath& cppPath);
 
    // struct used to represent compilation settings
    struct CompilationConfig
@@ -64,14 +64,14 @@ private:
       std::string PCH;
    };
    CompilationConfig configForSourceCpp(const std::string& rcppPkg,
-                                        core::FilePath srcFile);
+                                        rscore::FilePath srcFile);
 
-   std::vector<std::string> argsForRCmdSHLIB(core::system::Options env,
-                                             core::FilePath tempSrcFile);
+   std::vector<std::string> argsForRCmdSHLIB(rscore::system::Options env,
+                                             rscore::FilePath tempSrcFile);
 
    std::vector<std::string> baseCompilationArgs(bool isCppFile) const;
    std::vector<std::string> rToolsArgs() const;
-   core::system::Options compilationEnvironment() const;
+   rscore::system::Options compilationEnvironment() const;
    std::vector<std::string> precompiledHeaderArgs(const std::string& pkgName,
                                                   const std::string& stdArg);
 
diff --git a/src/cpp/session/modules/clang/RSourceIndex.cpp b/src/cpp/session/modules/clang/RSourceIndex.cpp
index e030984..45b8cf2 100644
--- a/src/cpp/session/modules/clang/RSourceIndex.cpp
+++ b/src/cpp/session/modules/clang/RSourceIndex.cpp
@@ -23,8 +23,8 @@
 
 #include "RCompilationDatabase.hpp"
 
-using namespace core ;
-using namespace core::libclang;
+using namespace rscore ;
+using namespace rscore::libclang;
 
 namespace session {
 namespace modules { 
@@ -32,7 +32,7 @@ namespace clang {
 
 namespace {
 
-core::libclang::CompilationDatabase rCompilationDatabase()
+rscore::libclang::CompilationDatabase rCompilationDatabase()
 {
    static RCompilationDatabase instance;
 
diff --git a/src/cpp/session/modules/clang/RSourceIndex.hpp b/src/cpp/session/modules/clang/RSourceIndex.hpp
index 77f31ed..aee4b61 100644
--- a/src/cpp/session/modules/clang/RSourceIndex.hpp
+++ b/src/cpp/session/modules/clang/RSourceIndex.hpp
@@ -22,7 +22,7 @@ namespace session {
 namespace modules {      
 namespace clang {
 
-core::libclang::SourceIndex& rSourceIndex();
+rscore::libclang::SourceIndex& rSourceIndex();
 
 } // namespace clang
 } // namepace handlers
diff --git a/src/cpp/session/modules/clang/SessionClang.cpp b/src/cpp/session/modules/clang/SessionClang.cpp
index 53388ed..26916b1 100644
--- a/src/cpp/session/modules/clang/SessionClang.cpp
+++ b/src/cpp/session/modules/clang/SessionClang.cpp
@@ -35,8 +35,8 @@
 #include "CodeCompletion.hpp"
 #include "RSourceIndex.hpp"
 
-using namespace core ;
-using namespace core::libclang;
+using namespace rscore ;
+using namespace rscore::libclang;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/clang/SessionClang.hpp b/src/cpp/session/modules/clang/SessionClang.hpp
index 98832ec..c59d9b9 100644
--- a/src/cpp/session/modules/clang/SessionClang.hpp
+++ b/src/cpp/session/modules/clang/SessionClang.hpp
@@ -18,7 +18,7 @@
 
 #include <core/Error.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -28,7 +28,7 @@ namespace clang {
 
 bool isAvailable();
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace clang
 } // namepace handlers
diff --git a/src/cpp/session/modules/data/DataViewer.cpp b/src/cpp/session/modules/data/DataViewer.cpp
index 735a3f6..9786bfe 100644
--- a/src/cpp/session/modules/data/DataViewer.cpp
+++ b/src/cpp/session/modules/data/DataViewer.cpp
@@ -41,7 +41,7 @@
 
 #include <session/SessionContentUrls.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/data/DataViewer.hpp b/src/cpp/session/modules/data/DataViewer.hpp
index d0d988f..225704a 100644
--- a/src/cpp/session/modules/data/DataViewer.hpp
+++ b/src/cpp/session/modules/data/DataViewer.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_DATA_VIEWER_HPP
 #define SESSION_DATA_VIEWER_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -25,7 +25,7 @@ namespace modules {
 namespace data {
 namespace viewer {
    
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace viewer
 } // namespace data
diff --git a/src/cpp/session/modules/data/SessionData.cpp b/src/cpp/session/modules/data/SessionData.cpp
index d0dd31d..48a52df 100644
--- a/src/cpp/session/modules/data/SessionData.cpp
+++ b/src/cpp/session/modules/data/SessionData.cpp
@@ -21,7 +21,7 @@
 
 #include "DataViewer.hpp"
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/data/SessionData.hpp b/src/cpp/session/modules/data/SessionData.hpp
index 04d9898..0468210 100644
--- a/src/cpp/session/modules/data/SessionData.hpp
+++ b/src/cpp/session/modules/data/SessionData.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,7 +26,7 @@ namespace session {
 namespace modules {      
 namespace data {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace data
 } // namepace handlers
diff --git a/src/cpp/session/modules/environment/EnvironmentMonitor.cpp b/src/cpp/session/modules/environment/EnvironmentMonitor.cpp
index 8ecfb6e..501a8be 100644
--- a/src/cpp/session/modules/environment/EnvironmentMonitor.cpp
+++ b/src/cpp/session/modules/environment/EnvironmentMonitor.cpp
@@ -21,7 +21,7 @@
 
 #include "EnvironmentUtils.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/environment/EnvironmentUtils.cpp b/src/cpp/session/modules/environment/EnvironmentUtils.cpp
index 46c923c..323d64b 100644
--- a/src/cpp/session/modules/environment/EnvironmentUtils.cpp
+++ b/src/cpp/session/modules/environment/EnvironmentUtils.cpp
@@ -23,7 +23,7 @@
 #include <session/SessionModuleContext.hpp>
 
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/environment/EnvironmentUtils.hpp b/src/cpp/session/modules/environment/EnvironmentUtils.hpp
index 5e80ae3..a210b34 100644
--- a/src/cpp/session/modules/environment/EnvironmentUtils.hpp
+++ b/src/cpp/session/modules/environment/EnvironmentUtils.hpp
@@ -20,10 +20,10 @@ namespace session {
 namespace modules {
 namespace environment {
 
-core::json::Value varToJson(SEXP env, const r::sexp::Variable& var);
+rscore::json::Value varToJson(SEXP env, const r::sexp::Variable& var);
 bool isUnevaluatedPromise(SEXP var);
 bool functionDiffersFromSource(SEXP srcRef, const std::string& functionCode);
-void sourceRefToJson(const SEXP srcref, core::json::Object* pObject);
+void sourceRefToJson(const SEXP srcref, rscore::json::Object* pObject);
 
 } // namespace environment
 } // namespace modules
diff --git a/src/cpp/session/modules/environment/SessionEnvironment.cpp b/src/cpp/session/modules/environment/SessionEnvironment.cpp
index b3804fe..03061ca 100644
--- a/src/cpp/session/modules/environment/SessionEnvironment.cpp
+++ b/src/cpp/session/modules/environment/SessionEnvironment.cpp
@@ -36,7 +36,7 @@
 
 #define TOP_FUNCTION 1
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -85,7 +85,7 @@ bool isValidSrcref(SEXP srcref)
    return srcref && TYPEOF(srcref) != NILSXP;
 }
 
-bool handleRBrowseEnv(const core::FilePath& filePath)
+bool handleRBrowseEnv(const rscore::FilePath& filePath)
 {
    if (filePath.filename() == "wsbrowser.html")
    {
diff --git a/src/cpp/session/modules/environment/SessionEnvironment.hpp b/src/cpp/session/modules/environment/SessionEnvironment.hpp
index 0a22331..4fdd6d0 100644
--- a/src/cpp/session/modules/environment/SessionEnvironment.hpp
+++ b/src/cpp/session/modules/environment/SessionEnvironment.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,9 +26,9 @@ namespace session {
 namespace modules {      
 namespace environment {
 
-core::json::Value environmentStateAsJson();
+rscore::json::Value environmentStateAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace environment
 } // namepace modules
diff --git a/src/cpp/session/modules/overlay/SessionOverlay.cpp b/src/cpp/session/modules/overlay/SessionOverlay.cpp
index 3501527..503502f 100644
--- a/src/cpp/session/modules/overlay/SessionOverlay.cpp
+++ b/src/cpp/session/modules/overlay/SessionOverlay.cpp
@@ -17,7 +17,7 @@
 
 #include <core/Error.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {  
 namespace modules {
diff --git a/src/cpp/session/modules/overlay/SessionOverlay.hpp b/src/cpp/session/modules/overlay/SessionOverlay.hpp
index a60f3b1..e0d1415 100644
--- a/src/cpp/session/modules/overlay/SessionOverlay.hpp
+++ b/src/cpp/session/modules/overlay/SessionOverlay.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_OVERLAY_HPP
 #define SESSION_OVERLAY_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace modules {
 namespace overlay {
 
-core::Error initialize();
+rscore::Error initialize();
    
 } // namespace overlay
 } // namespace modules
diff --git a/src/cpp/session/modules/presentation/PresentationLog.cpp b/src/cpp/session/modules/presentation/PresentationLog.cpp
index 033f2ea..9f3ca2d 100644
--- a/src/cpp/session/modules/presentation/PresentationLog.cpp
+++ b/src/cpp/session/modules/presentation/PresentationLog.cpp
@@ -34,7 +34,7 @@
 
 #include "PresentationState.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -212,7 +212,7 @@ Error ensureTargetFile(const std::string& filename,
    *pTargetFile = presDir.childPath(filename);
    if (!pTargetFile->exists())
    {
-      Error error = core::writeStringToFile(*pTargetFile, header + "\n");
+      Error error = rscore::writeStringToFile(*pTargetFile, header + "\n");
       if (error)
          return error;
    }
@@ -276,7 +276,7 @@ void Log::append(EntryType type,
    std::vector<std::string> fields;
    fields.push_back((type == NavigationEntry) ? "Navigation" : "Input");
    fields.push_back(timestamp());
-   fields.push_back(csvString(core::system::username()));
+   fields.push_back(csvString(rscore::system::username()));
    fields.push_back(csvPresentationPath());
    fields.push_back(safe_convert::numberToString(slideIndex));
    fields.push_back(slideType);
@@ -287,7 +287,7 @@ void Log::append(EntryType type,
    std::string entry = boost::algorithm::join(fields, ",");
 
    // append entry
-   error = core::appendToFile(logFilePath, entry + "\n");
+   error = rscore::appendToFile(logFilePath, entry + "\n");
    if (error)
       LOG_ERROR(error);
 }
@@ -313,14 +313,14 @@ void Log::recordFeedback(const std::string& feedback)
    // generate entry
    std::vector<std::string> fields;
    fields.push_back(timestamp());
-   fields.push_back(csvString(core::system::username()));
+   fields.push_back(csvString(rscore::system::username()));
    fields.push_back(csvPresentationPath());
    fields.push_back(safe_convert::numberToString(currentSlideIndex_));
    fields.push_back(csvString(feedback));
    std::string entry = boost::algorithm::join(fields, ",");
 
    // append entry
-   error = core::appendToFile(feedbackFilePath, entry + "\n");
+   error = rscore::appendToFile(feedbackFilePath, entry + "\n");
    if (error)
       LOG_ERROR(error);
 }
@@ -347,7 +347,7 @@ void Log::recordQuizResponse(int index, int answer, bool correct)
    // generate entry
    std::vector<std::string> fields;
    fields.push_back(timestamp());
-   fields.push_back(csvString(core::system::username()));
+   fields.push_back(csvString(rscore::system::username()));
    fields.push_back(csvPresentationPath());
    fields.push_back(safe_convert::numberToString(index));
    fields.push_back(safe_convert::numberToString(answer));
@@ -355,7 +355,7 @@ void Log::recordQuizResponse(int index, int answer, bool correct)
    std::string entry = boost::algorithm::join(fields, ",");
 
    // append entry
-   error = core::appendToFile(quizResponseFilePath, entry + "\n");
+   error = rscore::appendToFile(quizResponseFilePath, entry + "\n");
    if (error)
       LOG_ERROR(error);
 }
diff --git a/src/cpp/session/modules/presentation/PresentationLog.hpp b/src/cpp/session/modules/presentation/PresentationLog.hpp
index 4f84c70..a19ad3c 100644
--- a/src/cpp/session/modules/presentation/PresentationLog.hpp
+++ b/src/cpp/session/modules/presentation/PresentationLog.hpp
@@ -26,7 +26,7 @@
 
 #include "SlideParser.hpp"
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -45,7 +45,7 @@ private:
    friend Log& log();
 
 public:
-   core::Error initialize();
+   rscore::Error initialize();
 
    void onSlideDeckChanged(const SlideDeck& slideDeck);
    void onSlideIndexChanged(int index);
diff --git a/src/cpp/session/modules/presentation/PresentationOverlay.cpp b/src/cpp/session/modules/presentation/PresentationOverlay.cpp
index 73dbd3f..7d09490 100644
--- a/src/cpp/session/modules/presentation/PresentationOverlay.cpp
+++ b/src/cpp/session/modules/presentation/PresentationOverlay.cpp
@@ -20,7 +20,7 @@
 
 #include "SlideParser.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/presentation/PresentationState.cpp b/src/cpp/session/modules/presentation/PresentationState.cpp
index d66af38..ab232b6 100644
--- a/src/cpp/session/modules/presentation/PresentationState.cpp
+++ b/src/cpp/session/modules/presentation/PresentationState.cpp
@@ -22,7 +22,7 @@
 #include <session/SessionModuleContext.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/presentation/PresentationState.hpp b/src/cpp/session/modules/presentation/PresentationState.hpp
index e32e279..49eb5f2 100644
--- a/src/cpp/session/modules/presentation/PresentationState.hpp
+++ b/src/cpp/session/modules/presentation/PresentationState.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -29,7 +29,7 @@ namespace presentation {
 namespace state {
 
 
-void init(const core::FilePath& filePath,
+void init(const rscore::FilePath& filePath,
           const std::string& caption = "Presentation",
           bool isTutorial = false);
 void setSlideIndex(int index);
@@ -40,21 +40,21 @@ bool isActive();
 
 bool isTutorial();
 
-core::FilePath filePath();
+rscore::FilePath filePath();
 
-core::FilePath directory();
+rscore::FilePath directory();
 
-core::FilePath viewInBrowserPath();
+rscore::FilePath viewInBrowserPath();
 
 void clear();
 
 
-core::json::Value asJson();
+rscore::json::Value asJson();
 
 
 
-core::Error initialize();
-core::Error initializeOverlay();
+rscore::Error initialize();
+rscore::Error initializeOverlay();
 
 
 } // namespace state
diff --git a/src/cpp/session/modules/presentation/SessionPresentation.cpp b/src/cpp/session/modules/presentation/SessionPresentation.cpp
index f4a58bc..1d302ac 100644
--- a/src/cpp/session/modules/presentation/SessionPresentation.cpp
+++ b/src/cpp/session/modules/presentation/SessionPresentation.cpp
@@ -39,7 +39,7 @@
 #include "SlideNavigationList.hpp"
 
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -144,19 +144,19 @@ Error createNewPresentation(const json::JsonRpcRequest& request,
    // process template
    std::map<std::string,std::string> vars;
    vars["name"] = filePath.stem();
-   core::text::TemplateFilter filter(vars);
+   rscore::text::TemplateFilter filter(vars);
 
    // read file with template filter
    FilePath templatePath = session::options().rResourcesPath().complete(
                                              "templates/r_presentation.Rpres");
    std::string presContents;
-   error = core::readStringFromFile(templatePath, filter, &presContents);
+   error = rscore::readStringFromFile(templatePath, filter, &presContents);
    if (error)
       return error;
 
 
    // write file
-   return core::writeStringToFile(filePath,
+   return rscore::writeStringToFile(filePath,
                                   presContents,
                                   string_utils::LineEndingNative);
 }
@@ -171,7 +171,7 @@ Error showPresentationPane(const json::JsonRpcRequest& request,
 
    FilePath filePath = module_context::resolveAliasedPath(file);
    if (!filePath.exists())
-      return core::fileNotFoundError(filePath, ERROR_LOCATION);
+      return rscore::fileNotFoundError(filePath, ERROR_LOCATION);
 
    showPresentation(filePath);
 
@@ -326,7 +326,7 @@ Error getSlideNavigationForFile(const json::JsonRpcRequest& request,
 
    // read code
    std::string code;
-   error = core::readStringFromFile(filePath,
+   error = rscore::readStringFromFile(filePath,
                                     &code,
                                     string_utils::LineEndingPosix);
    if (error)
diff --git a/src/cpp/session/modules/presentation/SessionPresentation.hpp b/src/cpp/session/modules/presentation/SessionPresentation.hpp
index e0d95ce..c996719 100644
--- a/src/cpp/session/modules/presentation/SessionPresentation.hpp
+++ b/src/cpp/session/modules/presentation/SessionPresentation.hpp
@@ -20,7 +20,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    namespace http {
@@ -33,9 +33,9 @@ namespace session {
 namespace modules { 
 namespace presentation {
 
-core::json::Value presentationStateAsJson();
+rscore::json::Value presentationStateAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace presentation
 } // namespace modules
diff --git a/src/cpp/session/modules/presentation/SlideMediaRenderer.cpp b/src/cpp/session/modules/presentation/SlideMediaRenderer.cpp
index 5af397a..1413561 100644
--- a/src/cpp/session/modules/presentation/SlideMediaRenderer.cpp
+++ b/src/cpp/session/modules/presentation/SlideMediaRenderer.cpp
@@ -16,7 +16,7 @@
 
 #include "SlideMediaRenderer.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/presentation/SlideMediaRenderer.hpp b/src/cpp/session/modules/presentation/SlideMediaRenderer.hpp
index db5ec0f..1e22220 100644
--- a/src/cpp/session/modules/presentation/SlideMediaRenderer.hpp
+++ b/src/cpp/session/modules/presentation/SlideMediaRenderer.hpp
@@ -21,7 +21,7 @@
 #include <vector>
 #include <iosfwd>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -33,7 +33,7 @@ namespace presentation {
 
 void renderMedia(const std::string& type,
                  int slideNumber,
-                 const core::FilePath& baseDir,
+                 const rscore::FilePath& baseDir,
                  const std::string& fileName,
                  const std::vector<AtCommand>& atCommands,
                  std::ostream& os,
diff --git a/src/cpp/session/modules/presentation/SlideNavigationList.cpp b/src/cpp/session/modules/presentation/SlideNavigationList.cpp
index 44f920d..3c5488f 100644
--- a/src/cpp/session/modules/presentation/SlideNavigationList.cpp
+++ b/src/cpp/session/modules/presentation/SlideNavigationList.cpp
@@ -22,7 +22,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/presentation/SlideNavigationList.hpp b/src/cpp/session/modules/presentation/SlideNavigationList.hpp
index 0c1bbfc..c9edab4 100644
--- a/src/cpp/session/modules/presentation/SlideNavigationList.hpp
+++ b/src/cpp/session/modules/presentation/SlideNavigationList.hpp
@@ -37,11 +37,11 @@ public:
 
    std::string asCall() const;
 
-   core::json::Object asJson() const;
+   rscore::json::Object asJson() const;
 
 private:
    void addSlide(const std::string& title, int indent, int index, int line);
-   core::json::Array slides_;
+   rscore::json::Array slides_;
    bool allowNavigation_;
    bool allowSlideNavigation_;
    int index_;
diff --git a/src/cpp/session/modules/presentation/SlideParser.cpp b/src/cpp/session/modules/presentation/SlideParser.cpp
index 8aa87ed..0ac5fa0 100644
--- a/src/cpp/session/modules/presentation/SlideParser.cpp
+++ b/src/cpp/session/modules/presentation/SlideParser.cpp
@@ -31,7 +31,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -406,7 +406,7 @@ Error SlideDeck::readSlides(const std::string& slides, const FilePath& baseDir)
    }
 
    // loop through the header lines to capture the slides
-   boost::regex dcfFieldRegex(core::text::kDcfFieldRegex);
+   boost::regex dcfFieldRegex(rscore::text::kDcfFieldRegex);
    for (std::size_t i = 0; i<headerLines.size(); i++)
    {
       // line index
diff --git a/src/cpp/session/modules/presentation/SlideParser.hpp b/src/cpp/session/modules/presentation/SlideParser.hpp
index 494cdd0..d71fc7a 100644
--- a/src/cpp/session/modules/presentation/SlideParser.hpp
+++ b/src/cpp/session/modules/presentation/SlideParser.hpp
@@ -41,7 +41,7 @@ public:
    const std::string& name() const { return name_; }
    const std::string& params() const { return params_; }
 
-   core::json::Object asJson() const;
+   rscore::json::Object asJson() const;
 
 private:
    std::string name_;
@@ -58,7 +58,7 @@ public:
    int seconds() const { return seconds_; }
    const Command& command() const { return command_; }
 
-   core::json::Object asJson() const;
+   rscore::json::Object asJson() const;
 
 private:
    int seconds_;
@@ -149,8 +149,8 @@ public:
    {
    }
 
-   core::Error readSlides(const core::FilePath& filePath);
-   core::Error readSlides(const std::string& slides, const core::
+   rscore::Error readSlides(const rscore::FilePath& filePath);
+   rscore::Error readSlides(const std::string& slides, const rscore::
                           FilePath& baseDir);
 
    std::string title() const;
@@ -174,10 +174,10 @@ public:
 
    const std::vector<Slide>& slides() const { return slides_; }
 
-   core::FilePath baseDir() const { return baseDir_; }
+   rscore::FilePath baseDir() const { return baseDir_; }
 
 private:
-   core::FilePath baseDir_;
+   rscore::FilePath baseDir_;
    std::string preamble_;
    std::vector<Slide> slides_;
 };
diff --git a/src/cpp/session/modules/presentation/SlideQuizRenderer.cpp b/src/cpp/session/modules/presentation/SlideQuizRenderer.cpp
index 488261d..06935ba 100644
--- a/src/cpp/session/modules/presentation/SlideQuizRenderer.cpp
+++ b/src/cpp/session/modules/presentation/SlideQuizRenderer.cpp
@@ -25,7 +25,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/RegexUtils.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/presentation/SlideRenderer.cpp b/src/cpp/session/modules/presentation/SlideRenderer.cpp
index 8f978f7..f098652 100644
--- a/src/cpp/session/modules/presentation/SlideRenderer.cpp
+++ b/src/cpp/session/modules/presentation/SlideRenderer.cpp
@@ -35,7 +35,7 @@
 #include "SlideNavigationList.hpp"
 #include "SlideQuizRenderer.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -206,7 +206,7 @@ void computeColumnWidths(const std::string& width,
                          std::string* pSpecifiedWidth,
                          std::string* pOtherWidth)
 {
-   int w = core::safe_convert::stringTo<int>(width, 50);
+   int w = rscore::safe_convert::stringTo<int>(width, 50);
    *pSpecifiedWidth = safe_convert::numberToString(w - 2) + "%";
    *pOtherWidth = safe_convert::numberToString(100 - w - 2) + "%";
 }
diff --git a/src/cpp/session/modules/presentation/SlideRenderer.hpp b/src/cpp/session/modules/presentation/SlideRenderer.hpp
index 644f2c4..a660fb4 100644
--- a/src/cpp/session/modules/presentation/SlideRenderer.hpp
+++ b/src/cpp/session/modules/presentation/SlideRenderer.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 } // anonymous namespace
@@ -29,7 +29,7 @@ namespace presentation {
 
 class SlideDeck;
 
-core::Error renderSlides(const SlideDeck& slideDeck,
+rscore::Error renderSlides(const SlideDeck& slideDeck,
                          std::string* pSlidesHead,
                          std::string* pSlides,
                          std::string* pRevealConfig,
diff --git a/src/cpp/session/modules/presentation/SlideRequestHandler.cpp b/src/cpp/session/modules/presentation/SlideRequestHandler.cpp
index 3e17623..ac727a9 100644
--- a/src/cpp/session/modules/presentation/SlideRequestHandler.cpp
+++ b/src/cpp/session/modules/presentation/SlideRequestHandler.cpp
@@ -44,7 +44,7 @@
 #include "SlideParser.hpp"
 #include "SlideRenderer.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -334,13 +334,13 @@ bool performKnit(const FilePath& rmdPath,
    args.push_back(cmd);
 
    // options
-   core::system::ProcessOptions options;
-   core::system::ProcessResult result;
+   rscore::system::ProcessOptions options;
+   rscore::system::ProcessResult result;
    options.workingDir = rmdPath.parent();
 
    // run knit
-   error = core::system::runProgram(
-            core::string_utils::utf8ToSystem(rProgramPath.absolutePath()),
+   error = rscore::system::runProgram(
+            rscore::string_utils::utf8ToSystem(rProgramPath.absolutePath()),
             args,
             "",
             options,
@@ -356,7 +356,7 @@ bool performKnit(const FilePath& rmdPath,
       // play the error text back into
       if (!mdPath.exists())
       {
-         Error error = core::writeStringToFile(mdPath,
+         Error error = rscore::writeStringToFile(mdPath,
                                                mdPath.stem() +
                                                "\n=======================\n");
          if (error)
@@ -370,7 +370,7 @@ bool performKnit(const FilePath& rmdPath,
            << extractKnitrError(result.stdErr) << std::endl
            << "```" << std::endl;
 
-      Error error = core::appendToFile(mdPath, ostr.str());
+      Error error = rscore::appendToFile(mdPath, ostr.str());
       if (error)
          LOG_ERROR(error);
 
@@ -434,16 +434,16 @@ std::string fixupLink(const boost::cmatch& match)
       using namespace boost::algorithm;
       std::size_t colonLoc = href.find_first_of(':');
       std::string path = trim_copy(href.substr(colonLoc+1));
-      path = core::http::util::urlDecode(path);
+      path = rscore::http::util::urlDecode(path);
       if (boost::algorithm::starts_with(path, "~/"))
          path = module_context::resolveAliasedPath(path).absolutePath();
       FilePath filePath = presentation::state::directory()
                                                    .parent().complete(path);
 
-      Error error = core::system::realPath(filePath, &filePath);
+      Error error = rscore::system::realPath(filePath, &filePath);
       if (error)
       {
-         if (!core::isPathNotFoundError(error))
+         if (!rscore::isPathNotFoundError(error))
             LOG_ERROR(error);
          return match[0];
       }
@@ -486,7 +486,7 @@ std::string userSlidesCss(const SlideDeck& slideDeck)
    std::string userSlidesCss;
    if (cssPath.exists())
    {
-      Error error = core::readStringFromFile(cssPath, &userSlidesCss);
+      Error error = rscore::readStringFromFile(cssPath, &userSlidesCss);
       if (error)
          LOG_ERROR(error);
    }
@@ -920,7 +920,7 @@ void handlePresentationRootRequest(const std::string& path,
 
 void handlePresentationHelpMarkdownRequest(const FilePath& filePath,
                                            const std::string& jsCallbacks,
-                                           core::http::Response* pResponse)
+                                           rscore::http::Response* pResponse)
 {
    // indirection on the actual md file (related to processing R markdown)
    FilePath mdFilePath;
@@ -1001,7 +1001,7 @@ void handleRangeRequest(const FilePath& targetFile,
       s_cache.clear();
 
       // read the file in from disk
-      Error error = core::readStringFromFile(targetFile, &(s_cache.contents));
+      Error error = rscore::readStringFromFile(targetFile, &(s_cache.contents));
       if (error)
       {
          pResponse->setError(error);
@@ -1165,9 +1165,9 @@ void handlePresentationPaneRequest(const http::Request& request,
    }
 }
 
-void handlePresentationHelpRequest(const core::http::Request& request,
+void handlePresentationHelpRequest(const rscore::http::Request& request,
                                    const std::string& jsCallbacks,
-                                   core::http::Response* pResponse)
+                                   rscore::http::Response* pResponse)
 {
    // we save the most recent /help/presentation/&file=parameter so we
    // can resolve relative file references against it. we do this
@@ -1229,7 +1229,7 @@ void handlePresentationHelpRequest(const core::http::Request& request,
    }
 }
 
-bool savePresentationAsStandalone(const core::FilePath& filePath,
+bool savePresentationAsStandalone(const rscore::FilePath& filePath,
                                   ErrorResponse* pErrorResponse)
 {
    return createStandalonePresentation(filePath,
@@ -1237,7 +1237,7 @@ bool savePresentationAsStandalone(const core::FilePath& filePath,
                                        pErrorResponse);
 }
 
-bool savePresentationAsRpubsSource(const core::FilePath& filePath,
+bool savePresentationAsRpubsSource(const rscore::FilePath& filePath,
                                    ErrorResponse* pErrorResponse)
 {
    return createStandalonePresentation(filePath,
diff --git a/src/cpp/session/modules/presentation/SlideRequestHandler.hpp b/src/cpp/session/modules/presentation/SlideRequestHandler.hpp
index b6f8fe5..009ce2a 100644
--- a/src/cpp/session/modules/presentation/SlideRequestHandler.hpp
+++ b/src/cpp/session/modules/presentation/SlideRequestHandler.hpp
@@ -19,7 +19,7 @@
 #include <string>
 #include <core/http/Response.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    namespace http {
@@ -34,30 +34,30 @@ namespace presentation {
 struct ErrorResponse
 {
    explicit ErrorResponse(const std::string& message = std::string(),
-                          core::http::status::Code statusCode
-                                  = core::http::status::InternalServerError)
+                          rscore::http::status::Code statusCode
+                                  = rscore::http::status::InternalServerError)
       : message(message), statusCode(statusCode)
    {
    }
 
    std::string message;
-   core::http::status::Code statusCode;
+   rscore::http::status::Code statusCode;
 };
 
 bool clearKnitrCache(ErrorResponse* pErrorResponse);
 
-void handlePresentationPaneRequest(const core::http::Request& request,
-                                  core::http::Response* pResponse);
+void handlePresentationPaneRequest(const rscore::http::Request& request,
+                                  rscore::http::Response* pResponse);
                        
 
-void handlePresentationHelpRequest(const core::http::Request& request,
+void handlePresentationHelpRequest(const rscore::http::Request& request,
                                    const std::string& jsCallbacks,
-                                   core::http::Response* pResponse);
+                                   rscore::http::Response* pResponse);
 
-bool savePresentationAsStandalone(const core::FilePath& filePath,
+bool savePresentationAsStandalone(const rscore::FilePath& filePath,
                                   ErrorResponse* pErrorResponse);
 
-bool savePresentationAsRpubsSource(const core::FilePath& filePath,
+bool savePresentationAsRpubsSource(const rscore::FilePath& filePath,
                                    ErrorResponse* pErrorResponse);
 
 } // namespace presentation
diff --git a/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.cpp b/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.cpp
index 5be4ed9..0fcfa83 100644
--- a/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.cpp
+++ b/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.cpp
@@ -20,7 +20,7 @@
 
 #include <core/FileSerializer.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -59,7 +59,7 @@ json::Value itemAsJson(const SlideNavigationItem& item)
 
 
 void ammendResults(const std::string& formatName,
-                   core::FilePath& targetFile,
+                   rscore::FilePath& targetFile,
                    int sourceLine,
                    json::Object* pResultJson)
 {
@@ -76,7 +76,7 @@ void ammendResults(const std::string& formatName,
 
    // read the input file
    std::vector<std::string> lines;
-   Error error = core::readStringVectorFromFile(targetFile, &lines, false);
+   Error error = rscore::readStringVectorFromFile(targetFile, &lines, false);
    if (error)
    {
       LOG_ERROR(error);
diff --git a/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.hpp b/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.hpp
index 4c4c479..624adb0 100644
--- a/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.hpp
+++ b/src/cpp/session/modules/rmarkdown/RMarkdownPresentation.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
 
@@ -30,9 +30,9 @@ namespace rmarkdown {
 namespace presentation {
 
 void ammendResults(const std::string& formatName,
-                   core::FilePath& targetFile,
+                   rscore::FilePath& targetFile,
                    int sourceLine,
-                   core::json::Object* pResultsJson);
+                   rscore::json::Object* pResultsJson);
 
 
 } // namespace presentation
diff --git a/src/cpp/session/modules/rmarkdown/SessionRMarkdown.cpp b/src/cpp/session/modules/rmarkdown/SessionRMarkdown.cpp
index 0704a64..3a29cec 100644
--- a/src/cpp/session/modules/rmarkdown/SessionRMarkdown.cpp
+++ b/src/cpp/session/modules/rmarkdown/SessionRMarkdown.cpp
@@ -50,7 +50,7 @@
 
 #define kShinyContentWarning "Warning: Shiny application in a static R Markdown document"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
@@ -803,7 +803,7 @@ Error renderRmdSource(const json::JsonRpcRequest& request,
 
    // create temp file
    FilePath rmdTempFile = module_context::tempFile("Preview-", "Rmd");
-   error = core::writeStringToFile(rmdTempFile, source);
+   error = rscore::writeStringToFile(rmdTempFile, source);
    if (error)
       return error;
 
diff --git a/src/cpp/session/modules/rmarkdown/SessionRMarkdown.hpp b/src/cpp/session/modules/rmarkdown/SessionRMarkdown.hpp
index 270ae91..bc13b1c 100644
--- a/src/cpp/session/modules/rmarkdown/SessionRMarkdown.hpp
+++ b/src/cpp/session/modules/rmarkdown/SessionRMarkdown.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_SESSION_RMARKDOWN_HPP
 #define SESSION_SESSION_RMARKDOWN_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,7 +26,7 @@ namespace rmarkdown {
 
 bool rmarkdownPackageAvailable();
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace rmarkdown
 } // namepace handlers
diff --git a/src/cpp/session/modules/shiny/SessionShiny.cpp b/src/cpp/session/modules/shiny/SessionShiny.cpp
index 82075dc..cdc74ed 100644
--- a/src/cpp/session/modules/shiny/SessionShiny.cpp
+++ b/src/cpp/session/modules/shiny/SessionShiny.cpp
@@ -25,7 +25,7 @@
 #include <session/SessionOptions.hpp>
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/shiny/SessionShiny.hpp b/src/cpp/session/modules/shiny/SessionShiny.hpp
index 56680ba..4d0269a 100644
--- a/src/cpp/session/modules/shiny/SessionShiny.hpp
+++ b/src/cpp/session/modules/shiny/SessionShiny.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -26,7 +26,7 @@ namespace session {
 namespace modules { 
 namespace shiny {
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace shiny
 } // namespace modules
diff --git a/src/cpp/session/modules/tex/SessionCompilePdf.cpp b/src/cpp/session/modules/tex/SessionCompilePdf.cpp
index f6687ec..8964cca 100644
--- a/src/cpp/session/modules/tex/SessionCompilePdf.cpp
+++ b/src/cpp/session/modules/tex/SessionCompilePdf.cpp
@@ -46,7 +46,7 @@
 #include "SessionCompilePdfSupervisor.hpp"
 #include "SessionViewPdf.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -253,7 +253,7 @@ void enqueErrorsEvent(const json::Array& logEntriesJson)
 }
 
 // NOTE: sync changes with SessionBuildErrors.cpp compileErrorJson
-json::Object logEntryJson(const core::tex::LogEntry& logEntry)
+json::Object logEntryJson(const rscore::tex::LogEntry& logEntry)
 {
    json::Object obj;
    obj["type"] = static_cast<int>(logEntry.type());
@@ -267,38 +267,38 @@ json::Object logEntryJson(const core::tex::LogEntry& logEntry)
    return obj;
 }
 
-void showLogEntries(const core::tex::LogEntries& logEntries,
+void showLogEntries(const rscore::tex::LogEntries& logEntries,
                     const rnw_concordance::Concordances& rnwConcordances =
                                              rnw_concordance::Concordances())
 {
    json::Array logEntriesJson;
-   BOOST_FOREACH(const core::tex::LogEntry& logEntry, logEntries)
+   BOOST_FOREACH(const rscore::tex::LogEntry& logEntry, logEntries)
    {
       using namespace tex::rnw_concordance;
-      core::tex::LogEntry rnwEntry = rnwConcordances.fixup(logEntry);
+      rscore::tex::LogEntry rnwEntry = rnwConcordances.fixup(logEntry);
       logEntriesJson.push_back(logEntryJson(rnwEntry));
    }
 
    enqueErrorsEvent(logEntriesJson);
 }
 
-void writeLogEntriesOutput(const core::tex::LogEntries& logEntries)
+void writeLogEntriesOutput(const rscore::tex::LogEntries& logEntries)
 {
    if (logEntries.empty())
       return;
 
    std::string output = "\n";
-   BOOST_FOREACH(const core::tex::LogEntry& logEntry, logEntries)
+   BOOST_FOREACH(const rscore::tex::LogEntry& logEntry, logEntries)
    {
       switch(logEntry.type())
       {
-         case core::tex::LogEntry::Error:
+         case rscore::tex::LogEntry::Error:
             output += "Error: ";
             break;
-         case core::tex::LogEntry::Warning:
+         case rscore::tex::LogEntry::Warning:
             output += "Warning: ";
             break;
-         case core::tex::LogEntry::Box:
+         case rscore::tex::LogEntry::Box:
             output += "Bad Box: ";
             break;
       }
@@ -317,36 +317,36 @@ void writeLogEntriesOutput(const core::tex::LogEntries& logEntries)
 }
 
 
-bool includeLogEntry(const core::tex::LogEntry& logEntry)
+bool includeLogEntry(const rscore::tex::LogEntry& logEntry)
 {
    return true;
 }
 
 // filter out log entries which we view as superflous or distracting
-void filterLatexLog(const core::tex::LogEntries& logEntries,
-                    core::tex::LogEntries* pFilteredLogEntries)
+void filterLatexLog(const rscore::tex::LogEntries& logEntries,
+                    rscore::tex::LogEntries* pFilteredLogEntries)
 {
-   core::algorithm::copy_if(logEntries.begin(),
+   rscore::algorithm::copy_if(logEntries.begin(),
                             logEntries.end(),
                             std::back_inserter(*pFilteredLogEntries),
                             includeLogEntry);
 }
 
-bool isLogEntryFromTargetFile(const core::tex::LogEntry& logEntry,
+bool isLogEntryFromTargetFile(const rscore::tex::LogEntry& logEntry,
                               const FilePath& texPath)
 {
    return logEntry.filePath() == texPath;
 }
 
 void getLogEntries(const FilePath& texPath,
-                   core::tex::LogEntries* pLogEntries)
+                   rscore::tex::LogEntries* pLogEntries)
 {
    // latex log file
    FilePath logPath = ancillaryFilePath(texPath, ".log");
    if (logPath.exists())
    {
-      core::tex::LogEntries logEntries;
-      Error error = core::tex::parseLatexLog(logPath, &logEntries);
+      rscore::tex::LogEntries logEntries;
+      Error error = rscore::tex::parseLatexLog(logPath, &logEntries);
       if (error)
          LOG_ERROR(error);
 
@@ -360,11 +360,11 @@ void getLogEntries(const FilePath& texPath,
    }
 
    // bibtex log file
-   core::tex::LogEntries bibtexLogEntries;
+   rscore::tex::LogEntries bibtexLogEntries;
    logPath = ancillaryFilePath(texPath, ".blg");
    if (logPath.exists())
    {
-      Error error = core::tex::parseBibtexLog(logPath, &bibtexLogEntries);
+      Error error = rscore::tex::parseBibtexLog(logPath, &bibtexLogEntries);
       if (error)
          LOG_ERROR(error);
    }
@@ -391,20 +391,20 @@ void removeExistingLatexAncillaryFiles(const FilePath& texFilePath)
    removeExistingAncillary(texFilePath, ".synctex.gz");
  }
 
-std::string buildIssuesMessage(const core::tex::LogEntries& logEntries)
+std::string buildIssuesMessage(const rscore::tex::LogEntries& logEntries)
 {
    if (logEntries.empty())
       return std::string();
 
    // count error types
    int errors = 0, warnings = 0, badBoxes = 0;
-   BOOST_FOREACH(const core::tex::LogEntry& logEntry, logEntries)
+   BOOST_FOREACH(const rscore::tex::LogEntry& logEntry, logEntries)
    {
-      if (logEntry.type() == core::tex::LogEntry::Error)
+      if (logEntry.type() == rscore::tex::LogEntry::Error)
          errors++;
-      else if (logEntry.type() == core::tex::LogEntry::Warning)
+      else if (logEntry.type() == rscore::tex::LogEntry::Warning)
          warnings++;
-      else if (logEntry.type() == core::tex::LogEntry::Box)
+      else if (logEntry.type() == rscore::tex::LogEntry::Box)
          badBoxes++;
    }
 
@@ -472,9 +472,9 @@ public:
    }
 
    void preserveLogReferencedFiles(
-               const core::tex::LogEntries& logEntries)
+               const rscore::tex::LogEntries& logEntries)
    {
-      BOOST_FOREACH(const core::tex::LogEntry& logEntry, logEntries)
+      BOOST_FOREACH(const rscore::tex::LogEntry& logEntry, logEntries)
       {
          logRefFiles_.insert(logEntry.filePath());
       }
@@ -562,7 +562,7 @@ private:
    {
       if (targetFilePath_.exists())
       {
-         Error error = core::system::realPath(targetFilePath_, &targetFilePath_);
+         Error error = rscore::system::realPath(targetFilePath_, &targetFilePath_);
          if (error)
             LOG_ERROR(error);
       }
@@ -591,7 +591,7 @@ private:
       }
 
       // parse magic comments
-      Error error = core::tex::parseMagicComments(targetFilePath_,
+      Error error = rscore::tex::parseMagicComments(targetFilePath_,
                                                   &magicComments_);
       if (error)
          LOG_ERROR(error);
@@ -654,12 +654,12 @@ private:
       options.shellEscape = userSettings().enableLaTeXShellEscape();
 
       // get back-end version info
-      core::system::ProcessResult result;
-      Error error = core::system::runProgram(
+      rscore::system::ProcessResult result;
+      Error error = rscore::system::runProgram(
                   string_utils::utf8ToSystem(texProgramPath_.absolutePath()),
-                  core::shell_utils::ShellArgs() << "--version",
+                  rscore::shell_utils::ShellArgs() << "--version",
                   "",
-                  core::system::ProcessOptions(),
+                  rscore::system::ProcessOptions(),
                   &result);
       if (error)
          LOG_ERROR(error);
@@ -724,7 +724,7 @@ private:
                                 const rnw_concordance::Concordances& concords)
    {
       // collect errors from the log
-      core::tex::LogEntries logEntries;
+      rscore::tex::LogEntries logEntries;
       getLogEntries(texFilePath, &logEntries);
 
       // determine whether they will be shown in the list
@@ -797,7 +797,7 @@ private:
       enqueCompletedWithFailureEvent(targetFilePath_, sourceLocation_);
    }
 
-   void terminateWithErrorLogEntries(const core::tex::LogEntries& logEntries)
+   void terminateWithErrorLogEntries(const rscore::tex::LogEntries& logEntries)
    {
       showLogEntries(logEntries);
       enqueCompletedWithFailureEvent(targetFilePath_, sourceLocation_);
@@ -813,7 +813,7 @@ private:
    std::string encoding_;
    json::Object sourceLocation_;
    const boost::function<void()> onCompleted_;
-   core::tex::TexMagicComments magicComments_;
+   rscore::tex::TexMagicComments magicComments_;
    FilePath texProgramPath_;
    AuxillaryFileCleanupContext auxillaryFileCleanupContext_;
 };
@@ -822,7 +822,7 @@ private:
 } // anonymous namespace
 
 
-bool startCompile(const core::FilePath& targetFilePath,
+bool startCompile(const rscore::FilePath& targetFilePath,
                   const std::string& encoding,
                   const json::Object& sourceLocation,
                   const boost::function<void()>& onCompleted)
diff --git a/src/cpp/session/modules/tex/SessionCompilePdf.hpp b/src/cpp/session/modules/tex/SessionCompilePdf.hpp
index 563c48d..704af6d 100644
--- a/src/cpp/session/modules/tex/SessionCompilePdf.hpp
+++ b/src/cpp/session/modules/tex/SessionCompilePdf.hpp
@@ -20,7 +20,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -30,9 +30,9 @@ namespace modules {
 namespace tex {
 namespace compile_pdf {
 
-bool startCompile(const core::FilePath& targetFilePath,
+bool startCompile(const rscore::FilePath& targetFilePath,
                   const std::string& encoding,
-                  const core::json::Object& sourceLocation,
+                  const rscore::json::Object& sourceLocation,
                   const boost::function<void()>& onCompleted);
 
 bool compileIsRunning();
@@ -41,9 +41,9 @@ bool terminateCompile();
 
 void notifyTabClosed();
 
-core::json::Object currentStateAsJson();
+rscore::json::Object currentStateAsJson();
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace compile_pdf
 } // namespace tex
diff --git a/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.cpp b/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.cpp
index 419901c..2f03d28 100644
--- a/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.cpp
+++ b/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.cpp
@@ -22,7 +22,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -34,7 +34,7 @@ namespace {
 // supervisor is a module level static so that we can terminateChildren
 // upon exit of the session (otherwise we could leave a long running
 // operation still hogging cpu after we exit)
-core::system::ProcessSupervisor s_processSupervisor;
+rscore::system::ProcessSupervisor s_processSupervisor;
 
 void onBackgroundProcessing(bool)
 {
@@ -110,10 +110,10 @@ Error terminateAll(const boost::posix_time::time_duration& waitDuration)
    }
 }
 
-Error runProgram(const core::FilePath& programFilePath,
+Error runProgram(const rscore::FilePath& programFilePath,
                  const std::vector<std::string>& args,
-                 const core::system::Options& extraEnvVars,
-                 const core::FilePath& workingDir,
+                 const rscore::system::Options& extraEnvVars,
+                 const rscore::FilePath& workingDir,
                  const boost::function<void(const std::string&)>& onOutput,
                  const boost::function<void(int,const std::string&)>& onExited)
 {
@@ -122,17 +122,17 @@ Error runProgram(const core::FilePath& programFilePath,
                                           programFilePath.absolutePath());
 
    // setup options
-   core::system::ProcessOptions options;
+   rscore::system::ProcessOptions options;
    options.terminateChildren = true;
    options.redirectStdErrToStdOut = true;
-   core::system::Options env;
-   core::system::getModifiedEnv(extraEnvVars, &env);
+   rscore::system::Options env;
+   rscore::system::getModifiedEnv(extraEnvVars, &env);
    options.environment = env;
    options.workingDir = workingDir;
 
    // setup callbacks
    boost::shared_ptr<CB> pCB(new CB(onOutput, onExited));
-   core::system::ProcessCallbacks cb;
+   rscore::system::ProcessCallbacks cb;
    cb.onStdout = cb.onStderr = boost::bind(&CB::onOutput, pCB, _2);
    cb.onExit = boost::bind(&CB::onExit, pCB, _1);
 
diff --git a/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.hpp b/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.hpp
index 2566ae1..ad43425 100644
--- a/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.hpp
+++ b/src/cpp/session/modules/tex/SessionCompilePdfSupervisor.hpp
@@ -24,7 +24,7 @@
 
 #include <core/system/Types.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
    namespace system {
@@ -39,16 +39,16 @@ namespace compile_pdf_supervisor {
 
 
 bool hasRunningChildren();
-core::Error terminateAll(const boost::posix_time::time_duration& waitDuration);
+rscore::Error terminateAll(const boost::posix_time::time_duration& waitDuration);
 
-core::Error runProgram(const core::FilePath& programFilePath,
+rscore::Error runProgram(const rscore::FilePath& programFilePath,
                        const std::vector<std::string>& args,
-                       const core::system::Options& extraEnvVars,
-                       const core::FilePath& workingDir,
+                       const rscore::system::Options& extraEnvVars,
+                       const rscore::FilePath& workingDir,
                        const boost::function<void(const std::string&)>& onOutput,
                        const boost::function<void(int,const std::string&)>& onExited);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace compile_pdf_supervisor
 } // namespace tex
diff --git a/src/cpp/session/modules/tex/SessionPdfLatex.cpp b/src/cpp/session/modules/tex/SessionPdfLatex.cpp
index 29e957a..f9bab33 100644
--- a/src/cpp/session/modules/tex/SessionPdfLatex.cpp
+++ b/src/cpp/session/modules/tex/SessionPdfLatex.cpp
@@ -28,7 +28,7 @@
 
 #include "SessionTexUtils.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -104,9 +104,9 @@ const LatexProgramTypes& programTypes()
 }
 
 std::string latexProgramMagicComment(
-                     const core::tex::TexMagicComments& magicComments)
+                     const rscore::tex::TexMagicComments& magicComments)
 {
-   BOOST_FOREACH(const core::tex::TexMagicComment& mc, magicComments)
+   BOOST_FOREACH(const rscore::tex::TexMagicComment& mc, magicComments)
    {
       if (boost::algorithm::iequals(mc.scope(), "tex") &&
           (boost::algorithm::iequals(mc.variable(), "program") ||
@@ -199,7 +199,7 @@ shell_utils::ShellArgs shellArgs(const PdfLatexOptions& options)
 
 FilePath programPath(const std::string& name, const std::string& envOverride)
 {
-   std::string envProgram = core::system::getenv(envOverride);
+   std::string envProgram = rscore::system::getenv(envOverride);
    std::string program = envProgram.empty() ? name : envProgram;
    return module_context::findProgram(program);
 }
@@ -216,7 +216,7 @@ int countCitationMisses(const FilePath& logFilePath)
 {
    // read the log file
    std::vector<std::string> lines;
-   Error error = core::readStringVectorFromFile(logFilePath, &lines);
+   Error error = rscore::readStringVectorFromFile(logFilePath, &lines);
    if (error)
    {
       LOG_ERROR(error);
@@ -234,7 +234,7 @@ int countCitationMisses(const FilePath& logFilePath)
 bool logIncludesRerun(const FilePath& logFilePath)
 {
    std::string logContents;
-   Error error = core::readStringFromFile(logFilePath, &logContents);
+   Error error = rscore::readStringFromFile(logFilePath, &logContents);
    if (error)
    {
       LOG_ERROR(error);
@@ -258,19 +258,19 @@ bool isInstalled()
 }
 
 
-core::json::Array supportedTypes()
+rscore::json::Array supportedTypes()
 {
    return programTypes().allTypesAsJson();
 }
 
 
-bool latexProgramForFile(const core::tex::TexMagicComments& magicComments,
+bool latexProgramForFile(const rscore::tex::TexMagicComments& magicComments,
                          FilePath* pTexProgramPath,
                          std::string* pUserErrMsg)
 {
    // get (optional) magic comments and environment variable override
    std::string latexProgramMC = latexProgramMagicComment(magicComments);
-   std::string pdflatexEnv = core::system::getenv("RSTUDIO_PDFLATEX");
+   std::string pdflatexEnv = rscore::system::getenv("RSTUDIO_PDFLATEX");
 
    // magic comment always takes highest priority
    if (!latexProgramMC.empty())
@@ -349,10 +349,10 @@ bool latexProgramForFile(const core::tex::TexMagicComments& magicComments,
 // tools::texi2dvi function (but the regex for detecting citation
 // warnings was made a bit more liberal)
 //
-core::Error texToPdf(const core::FilePath& texProgramPath,
-                     const core::FilePath& texFilePath,
+rscore::Error texToPdf(const rscore::FilePath& texProgramPath,
+                     const rscore::FilePath& texFilePath,
                      const tex::pdflatex::PdfLatexOptions& options,
-                     core::system::ProcessResult* pResult)
+                     rscore::system::ProcessResult* pResult)
 {
    // input file paths
    FilePath baseFilePath = texFilePath.parent().complete(texFilePath.stem());
@@ -364,11 +364,11 @@ core::Error texToPdf(const core::FilePath& texProgramPath,
    FilePath makeindexProgramPath = programPath("makeindex", "MAKEINDEX");
 
    // args and process options for running bibtex and makeindex
-   core::shell_utils::ShellArgs bibtexArgs;
+   rscore::shell_utils::ShellArgs bibtexArgs;
    bibtexArgs << string_utils::utf8ToSystem(baseFilePath.filename());
-   core::shell_utils::ShellArgs makeindexArgs;
+   rscore::shell_utils::ShellArgs makeindexArgs;
    makeindexArgs << string_utils::utf8ToSystem(idxFilePath.filename());
-   core::system::ProcessOptions procOptions;
+   rscore::system::ProcessOptions procOptions;
    procOptions.environment = utils::rTexInputsEnvVars();
    procOptions.workingDir = texFilePath.parent();
 
@@ -391,8 +391,8 @@ core::Error texToPdf(const core::FilePath& texProgramPath,
       // run bibtex if necessary
       if (misses > 0 && !bibtexProgramPath.empty())
       {
-         core::system::ProcessResult result;
-         Error error = core::system::runProgram(
+         rscore::system::ProcessResult result;
+         Error error = rscore::system::runProgram(
                string_utils::utf8ToSystem(bibtexProgramPath.absolutePath()),
                bibtexArgs,
                "",
@@ -408,7 +408,7 @@ core::Error texToPdf(const core::FilePath& texProgramPath,
       // run makeindex if necessary
       if (idxFilePath.exists() && !makeindexProgramPath.empty())
       {
-         Error error = core::system::runProgram(
+         Error error = rscore::system::runProgram(
                string_utils::utf8ToSystem(makeindexProgramPath.absolutePath()),
                makeindexArgs,
                "",
diff --git a/src/cpp/session/modules/tex/SessionPdfLatex.hpp b/src/cpp/session/modules/tex/SessionPdfLatex.hpp
index 9f50c73..c46f70d 100644
--- a/src/cpp/session/modules/tex/SessionPdfLatex.hpp
+++ b/src/cpp/session/modules/tex/SessionPdfLatex.hpp
@@ -25,7 +25,7 @@
 #include <core/system/Types.hpp>
 #include <core/system/Process.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -68,17 +68,17 @@ struct PdfLatexOptions
    std::string versionInfo;
 };
 
-core::Error texToPdf(const core::FilePath& texProgramPath,
-                     const core::FilePath& texFilePath,
+rscore::Error texToPdf(const rscore::FilePath& texProgramPath,
+                     const rscore::FilePath& texFilePath,
                      const tex::pdflatex::PdfLatexOptions& options,
-                     core::system::ProcessResult* pResult);
+                     rscore::system::ProcessResult* pResult);
 
 bool isInstalled();
 
-core::json::Array supportedTypes();
+rscore::json::Array supportedTypes();
 
-bool latexProgramForFile(const core::tex::TexMagicComments& magicComments,
-                         core::FilePath* pTexProgramPath,
+bool latexProgramForFile(const rscore::tex::TexMagicComments& magicComments,
+                         rscore::FilePath* pTexProgramPath,
                          std::string* pUserErrMsg);
 
 } // namespace pdflatex
diff --git a/src/cpp/session/modules/tex/SessionRnwConcordance.cpp b/src/cpp/session/modules/tex/SessionRnwConcordance.cpp
index ff8c6ce..b33dba3 100644
--- a/src/cpp/session/modules/tex/SessionRnwConcordance.cpp
+++ b/src/cpp/session/modules/tex/SessionRnwConcordance.cpp
@@ -34,7 +34,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -118,8 +118,8 @@ Error Concordance::parse(const FilePath& sourceFile,
        return badFormatError(sourceFile, "sections", ERROR_LOCATION);
 
    // get input and output file names
-   outputFile_ = baseDir.complete(core::tex::normalizeSynctexName(sections[1]));
-   inputFile_ = baseDir.complete(core::tex::normalizeSynctexName(sections[2]));
+   outputFile_ = baseDir.complete(rscore::tex::normalizeSynctexName(sections[1]));
+   inputFile_ = baseDir.complete(rscore::tex::normalizeSynctexName(sections[2]));
 
    // get offset and values
    std::string valuesSection;
@@ -310,7 +310,7 @@ std::string fixup_formatter(const Concordances& concordances,
    {
       if (what[i].matched)
       {
-         int inputLine = core::safe_convert::stringTo<int>(what[i], 1);
+         int inputLine = rscore::safe_convert::stringTo<int>(what[i], 1);
          FileAndLine dest = concordances.rnwLine(
                                            FileAndLine(sourceFile, inputLine));
          if (!dest.empty())
@@ -325,7 +325,7 @@ std::string fixup_formatter(const Concordances& concordances,
    return result;
 }
 
-core::tex::LogEntry Concordances::fixup(const core::tex::LogEntry &entry,
+rscore::tex::LogEntry Concordances::fixup(const rscore::tex::LogEntry &entry,
                                         bool *pSuccess) const
 {
    // Error messages themselves can (and usually do) contain line numbers.
@@ -344,7 +344,7 @@ core::tex::LogEntry Concordances::fixup(const core::tex::LogEntry &entry,
       if (pSuccess)
          *pSuccess = true;
 
-      return core::tex::LogEntry(entry.logFilePath(),
+      return rscore::tex::LogEntry(entry.logFilePath(),
                                  entry.logLine(),
                                  entry.type(),
                                  mapped.filePath(),
@@ -359,7 +359,7 @@ core::tex::LogEntry Concordances::fixup(const core::tex::LogEntry &entry,
    }
 }
 
-void removePrevious(const core::FilePath& rnwFile)
+void removePrevious(const rscore::FilePath& rnwFile)
 {
    Error error = concordanceFilePath(rnwFile).removeIfExists();
    if (error)
@@ -367,7 +367,7 @@ void removePrevious(const core::FilePath& rnwFile)
 }
 
 
-Error readIfExists(const core::FilePath& srcFile, Concordances* pConcordances)
+Error readIfExists(const rscore::FilePath& srcFile, Concordances* pConcordances)
 {
    // return success if the file doesn't exist
    FilePath concordanceFile = concordanceFilePath(srcFile);
@@ -376,7 +376,7 @@ Error readIfExists(const core::FilePath& srcFile, Concordances* pConcordances)
 
    // read the file
    std::string contents;
-   Error error = core::readStringFromFile(concordanceFile,
+   Error error = rscore::readStringFromFile(concordanceFile,
                                           &contents,
                                           string_utils::LineEndingPosix);
    if (error)
diff --git a/src/cpp/session/modules/tex/SessionRnwConcordance.hpp b/src/cpp/session/modules/tex/SessionRnwConcordance.hpp
index 123038e..4638881 100644
--- a/src/cpp/session/modules/tex/SessionRnwConcordance.hpp
+++ b/src/cpp/session/modules/tex/SessionRnwConcordance.hpp
@@ -25,7 +25,7 @@
 #include <core/SafeConvert.hpp>
 #include <core/tex/TexLogParser.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -45,9 +45,9 @@ public:
    // COPYING: via compiler
 
    // create by parsing a concordance file
-   core::Error parse(const core::FilePath& sourceFile,
+   rscore::Error parse(const rscore::FilePath& sourceFile,
                      const std::string& input,
-                     const core::FilePath& baseDir);
+                     const rscore::FilePath& baseDir);
 
    // append another concordance to this concordance (assumes they have
    // the same input and output file and they originate from a common
@@ -56,9 +56,9 @@ public:
 
    bool empty() const { return mapping_.empty(); }
 
-   const core::FilePath& outputFile() const { return outputFile_; }
+   const rscore::FilePath& outputFile() const { return outputFile_; }
 
-   const core::FilePath& inputFile() const { return inputFile_; }
+   const rscore::FilePath& inputFile() const { return inputFile_; }
 
    std::size_t offset() const { return offset_; }
 
@@ -73,7 +73,7 @@ public:
       texLine -= offset_;
 
       // return the mapping (but return -1 if it is out of range)
-      int mappingSize = core::safe_convert::numberTo<int>(mapping_.size(), 0);
+      int mappingSize = rscore::safe_convert::numberTo<int>(mapping_.size(), 0);
       if (texLine >= 0 && texLine < mappingSize)
          return mapping_[texLine];
       else
@@ -112,8 +112,8 @@ public:
    }
 
 private:
-   core::FilePath outputFile_;
-   core::FilePath inputFile_;
+   rscore::FilePath outputFile_;
+   rscore::FilePath inputFile_;
    std::size_t offset_;
    std::vector<int> mapping_;
 };
@@ -126,7 +126,7 @@ public:
    {
    }
 
-   FileAndLine(const core::FilePath& filePath, int line)
+   FileAndLine(const rscore::FilePath& filePath, int line)
       : filePath_(filePath), line_(line)
    {
    }
@@ -135,11 +135,11 @@ public:
 
    bool empty() const { return filePath_.empty(); }
 
-   const core::FilePath& filePath() const { return filePath_; }
+   const rscore::FilePath& filePath() const { return filePath_; }
    int line() const { return line_; }
 
 private:
-   core::FilePath filePath_;
+   rscore::FilePath filePath_;
    int line_;
 };
 
@@ -162,16 +162,16 @@ public:
    FileAndLine rnwLine(const FileAndLine& texLine) const;
    FileAndLine texLine(const FileAndLine& rnwLine) const;
 
-   core::tex::LogEntry fixup(const core::tex::LogEntry& entry,
+   rscore::tex::LogEntry fixup(const rscore::tex::LogEntry& entry,
                              bool* pSuccess=NULL) const;
 
 private:
    std::vector<Concordance> concordances_;
 };
 
-void removePrevious(const core::FilePath& rnwFile);
+void removePrevious(const rscore::FilePath& rnwFile);
 
-core::Error readIfExists(const core::FilePath& srcFile,
+rscore::Error readIfExists(const rscore::FilePath& srcFile,
                          Concordances* pConcordances);
 
 } // namespace rnw_concordance
diff --git a/src/cpp/session/modules/tex/SessionRnwWeave.cpp b/src/cpp/session/modules/tex/SessionRnwWeave.cpp
index d8b4741..5130ed7 100644
--- a/src/cpp/session/modules/tex/SessionRnwWeave.cpp
+++ b/src/cpp/session/modules/tex/SessionRnwWeave.cpp
@@ -38,7 +38,7 @@
 #include "SessionRnwConcordance.hpp"
 #include "SessionCompilePdfSupervisor.hpp"
 
-using namespace core;
+using namespace rscore;
 using namespace session::modules::tex::rnw_concordance;
 
 namespace session {
@@ -88,11 +88,11 @@ public:
 
    virtual bool isInstalled() const = 0;
 
-   virtual core::json::Value chunkOptions() const = 0;
+   virtual rscore::json::Value chunkOptions() const = 0;
 
    // tangle the passed file (note that the implementation can assume
    // that the working directory is already set to that of the file)
-   virtual core::Error tangle(const std::string& file) = 0;
+   virtual rscore::Error tangle(const std::string& file) = 0;
 
    virtual std::vector<std::string> commandArgs(
                                        const std::string& file,
@@ -112,17 +112,17 @@ public:
    virtual std::string weaveCommand(const std::string& file,
                                     const std::string& encoding) const = 0;
 
-   virtual core::Error parseOutputForErrors(
+   virtual rscore::Error parseOutputForErrors(
                                     const std::string& output,
-                                    const core::FilePath& rnwFilePath,
-                                    core::tex::LogEntries* pLogEntries) const
+                                    const rscore::FilePath& rnwFilePath,
+                                    rscore::tex::LogEntries* pLogEntries) const
    {
       // split into lines so we can determine the line numbers for the chunks
       // NOTE: will need to read this using global/project encoding if we
       // want to look for text outside of theh orignal error parsing
       // scenario (which only required ascii)
       std::string rnwContents;
-      Error error = core::readStringFromFile(rnwFilePath, &rnwContents);
+      Error error = rscore::readStringFromFile(rnwFilePath, &rnwContents);
       if (error)
          return error;
       std::vector<std::string> lines;
@@ -145,14 +145,14 @@ public:
       {
          std::string match1(match[1]);
          std::string match2(match[2]);
-         std::size_t chunk = core::safe_convert::stringTo<int>(match1, 0);
+         std::size_t chunk = rscore::safe_convert::stringTo<int>(match1, 0);
          std::string msg = boost::algorithm::trim_copy(match2);
          if (chunk > 0 && chunk <= chunkLineNumbers.size())
          {
             boost::format fmt("(chunk %1%) %2%");
-            core::tex::LogEntry logEntry(FilePath(),
+            rscore::tex::LogEntry logEntry(FilePath(),
                                          -1,
-                                         core::tex::LogEntry::Error,
+                                         rscore::tex::LogEntry::Error,
                                          rnwFilePath,
                                          chunkLineNumbers[chunk-1],
                                          boost::str(fmt % chunk % msg));
@@ -164,7 +164,7 @@ public:
    }
 
 protected:
-   core::json::Value chunkOptions(const std::string& chunkFunction) const
+   rscore::json::Value chunkOptions(const std::string& chunkFunction) const
    {
       SEXP optionsSEXP;
       r::sexp::Protect rProtect;
@@ -176,7 +176,7 @@ protected:
          return json::Value();
       }
 
-      core::json::Value optionsJson;
+      rscore::json::Value optionsJson;
       error = r::json::jsonValueFromList(optionsSEXP, &optionsJson);
       if (error)
          LOG_ERROR(error);
@@ -205,12 +205,12 @@ public:
 
    virtual bool forceEchoOnExec() const { return false; }
 
-   virtual core::json::Value chunkOptions() const
+   virtual rscore::json::Value chunkOptions() const
    {
       return RnwWeave::chunkOptions(".rs.sweaveChunkOptions");
    }
 
-   virtual core::Error tangle(const std::string& file)
+   virtual rscore::Error tangle(const std::string& file)
    {
       return r::exec::RFunction("utils:::Stangle", file).call();
    }
@@ -266,10 +266,10 @@ public:
       return cmd;
    }
 
-   virtual core::Error parseOutputForErrors(
+   virtual rscore::Error parseOutputForErrors(
                                     const std::string& output,
-                                    const core::FilePath& rnwFilePath,
-                                    core::tex::LogEntries* pLogEntries) const
+                                    const rscore::FilePath& rnwFilePath,
+                                    rscore::tex::LogEntries* pLogEntries) const
    {
       // older error style
       boost::regex errRe("^\\s*Quitting from lines ([0-9]+)-([0-9]+): "
@@ -296,9 +296,9 @@ public:
             message = match[2];
          }
 
-         core::tex::LogEntry logEntry(FilePath(),
+         rscore::tex::LogEntry logEntry(FilePath(),
                                       -1,
-                                      core::tex::LogEntry::Error,
+                                      rscore::tex::LogEntry::Error,
                                       rnwFilePath,
                                       lineBegin,
                                       message);
@@ -311,9 +311,9 @@ public:
          int lineBegin = safe_convert::stringTo<int>(match[1], -1);
          std::string message = match[4];
 
-         core::tex::LogEntry logEntry(FilePath(),
+         rscore::tex::LogEntry logEntry(FilePath(),
                                       -1,
-                                      core::tex::LogEntry::Error,
+                                      rscore::tex::LogEntry::Error,
                                       rnwFilePath,
                                       lineBegin,
                                       message);
@@ -323,7 +323,7 @@ public:
       return Success();
    }
 
-   virtual core::json::Value chunkOptions() const
+   virtual rscore::json::Value chunkOptions() const
    {
       if (isInstalled())
          return RnwWeave::chunkOptions(".rs.knitrChunkOptions");
@@ -331,7 +331,7 @@ public:
          return json::Value();
    }
 
-   virtual core::Error tangle(const std::string& file)
+   virtual rscore::Error tangle(const std::string& file)
    {
       r::session::utils::SuppressOutputInScope suppressOutput;
       r::exec::RFunction purlFunc("knitr:::purl");
@@ -396,10 +396,10 @@ const RnwWeaveRegistry& weaveRegistry()
    return instance;
 }
 
-std::string weaveTypeForFile(const core::tex::TexMagicComments& magicComments)
+std::string weaveTypeForFile(const rscore::tex::TexMagicComments& magicComments)
 {
    // first see if the file contains an rnw weave magic comment
-   BOOST_FOREACH(const core::tex::TexMagicComment& mc, magicComments)
+   BOOST_FOREACH(const rscore::tex::TexMagicComment& mc, magicComments)
    {
       if (boost::algorithm::iequals(mc.scope(), "rnw") &&
           boost::algorithm::iequals(mc.variable(), "weave"))
@@ -436,7 +436,7 @@ void onWeaveProcessExit(boost::shared_ptr<RnwWeave> pRnwWeave,
    else
    {
       // parse for errors
-      core::tex::LogEntries entries;
+      rscore::tex::LogEntries entries;
       Error error = pRnwWeave->parseOutputForErrors(output, rnwPath, &entries);
       if (error)
          LOG_ERROR(error);
@@ -473,9 +473,9 @@ void runTangle(const std::string& filePath, const std::string& rnwWeave)
    }
 }
 
-void runWeave(const core::FilePath& rnwPath,
+void runWeave(const rscore::FilePath& rnwPath,
               const std::string& encoding,
-              const core::tex::TexMagicComments& magicComments,
+              const rscore::tex::TexMagicComments& magicComments,
               const boost::function<void(const std::string&)>& onOutput,
               const CompletedFunction& onCompleted)
 {
@@ -527,7 +527,7 @@ void runWeave(const core::FilePath& rnwPath,
       Error error = compile_pdf_supervisor::runProgram(
                programPath,
                args,
-               core::system::Options(),
+               rscore::system::Options(),
                rnwPath.parent(),
                onOutput,
                boost::bind(onWeaveProcessExit,
@@ -546,17 +546,17 @@ void runWeave(const core::FilePath& rnwPath,
    }
 }
 
-core::json::Value chunkOptions(const std::string& weaveType)
+rscore::json::Value chunkOptions(const std::string& weaveType)
 {
    boost::shared_ptr<RnwWeave> pRnwWeave = weaveRegistry()
                                              .findTypeIgnoreCase(weaveType);
    if (pRnwWeave)
       return pRnwWeave->chunkOptions();
    else
-      return core::json::Value();
+      return rscore::json::Value();
 }
 
-core::json::Array supportedTypes()
+rscore::json::Array supportedTypes()
 {
    // query for list of supported types
    json::Array array;
diff --git a/src/cpp/session/modules/tex/SessionRnwWeave.hpp b/src/cpp/session/modules/tex/SessionRnwWeave.hpp
index 5e564d3..0290145 100644
--- a/src/cpp/session/modules/tex/SessionRnwWeave.hpp
+++ b/src/cpp/session/modules/tex/SessionRnwWeave.hpp
@@ -25,7 +25,7 @@
 
 #include "SessionRnwConcordance.hpp"
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -36,10 +36,10 @@ namespace tex {
 
 namespace rnw_weave {
 
-core::json::Array supportedTypes();
-void getTypesInstalledStatus(core::json::Object* pObj);
+rscore::json::Array supportedTypes();
+void getTypesInstalledStatus(rscore::json::Object* pObj);
 
-core::json::Value chunkOptions(const std::string& weaveType);
+rscore::json::Value chunkOptions(const std::string& weaveType);
 
 struct Result
 {
@@ -51,7 +51,7 @@ struct Result
       return result;
    }
 
-   static Result error(const core::tex::LogEntries& logEntries)
+   static Result error(const rscore::tex::LogEntries& logEntries)
    {
       Result result;
       result.succeeded = false;
@@ -70,7 +70,7 @@ struct Result
 
    bool succeeded;
    std::string errorMessage;
-   core::tex::LogEntries errorLogEntries;
+   rscore::tex::LogEntries errorLogEntries;
    tex::rnw_concordance::Concordances concordances;
 };
 
@@ -78,9 +78,9 @@ typedef boost::function<void(const Result&)> CompletedFunction;
 
 void runTangle(const std::string& filePath, const std::string& rnwWeave);
 
-void runWeave(const core::FilePath& filePath,
+void runWeave(const rscore::FilePath& filePath,
               const std::string& encoding,
-              const core::tex::TexMagicComments& magicComments,
+              const rscore::tex::TexMagicComments& magicComments,
               const boost::function<void(const std::string&)>& onOutput,
               const CompletedFunction& onCompleted);
 
diff --git a/src/cpp/session/modules/tex/SessionSynctex.cpp b/src/cpp/session/modules/tex/SessionSynctex.cpp
index e010296..ea7cff4 100644
--- a/src/cpp/session/modules/tex/SessionSynctex.cpp
+++ b/src/cpp/session/modules/tex/SessionSynctex.cpp
@@ -28,7 +28,7 @@
 
 #include "SessionRnwConcordance.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -38,7 +38,7 @@ namespace synctex {
 namespace {
 
 json::Value toJson(const FilePath& pdfFile,
-                   const core::tex::PdfLocation& pdfLoc,
+                   const rscore::tex::PdfLocation& pdfLoc,
                    bool fromClick)
 {
    if (!pdfLoc.empty())
@@ -59,7 +59,7 @@ json::Value toJson(const FilePath& pdfFile,
    }
 }
 
-json::Value toJson(const core::tex::SourceLocation& srcLoc)
+json::Value toJson(const rscore::tex::SourceLocation& srcLoc)
 {
    if (!srcLoc.empty())
    {
@@ -76,7 +76,7 @@ json::Value toJson(const core::tex::SourceLocation& srcLoc)
 }
 
 void applyForwardConcordance(const FilePath& mainFile,
-                             core::tex::SourceLocation* pLoc)
+                             rscore::tex::SourceLocation* pLoc)
 {
    // skip if this isn't an Rnw
    if (pLoc->file().extensionLowerCase() != ".rnw")
@@ -97,14 +97,14 @@ void applyForwardConcordance(const FilePath& mainFile,
                                                           pLoc->line()));
    if (!texLine.empty())
    {
-      *pLoc = core::tex::SourceLocation(texLine.filePath(),
+      *pLoc = rscore::tex::SourceLocation(texLine.filePath(),
                                         texLine.line(),
                                         pLoc->column());
    }
 }
 
 
-json::Object sourceLocationAsJson(const core::tex::SourceLocation& srcLoc,
+json::Object sourceLocationAsJson(const rscore::tex::SourceLocation& srcLoc,
                                   bool fromClick)
 {
    json::Object sourceLocation;
@@ -140,7 +140,7 @@ Error synctexForwardSearch(const json::JsonRpcRequest& request,
 }
 
 
-void applyInverseConcordance(core::tex::SourceLocation* pLoc)
+void applyInverseConcordance(rscore::tex::SourceLocation* pLoc)
 {
     // try to read concordance
    using namespace tex::rnw_concordance;
@@ -157,7 +157,7 @@ void applyInverseConcordance(core::tex::SourceLocation* pLoc)
                                                           pLoc->line()));
    if (!rnwLine.empty())
    {
-      *pLoc = core::tex::SourceLocation(rnwLine.filePath(),
+      *pLoc = rscore::tex::SourceLocation(rnwLine.filePath(),
                                         rnwLine.line(),
                                         pLoc->column());
    }
@@ -189,7 +189,7 @@ Error rpcApplyForwardConcordance(const json::JsonRpcRequest& request,
 
    FilePath srcPath = module_context::resolveAliasedPath(file);
 
-   core::tex::SourceLocation srcLoc(srcPath, line, column);
+   rscore::tex::SourceLocation srcLoc(srcPath, line, column);
 
    applyForwardConcordance(rootDocPath, &srcLoc);
 
@@ -215,7 +215,7 @@ Error rpcApplyInverseConcordance(const json::JsonRpcRequest& request,
       return error;
    FilePath srcPath = module_context::resolveAliasedPath(file);
 
-   core::tex::SourceLocation srcLoc(srcPath, line, column);
+   rscore::tex::SourceLocation srcLoc(srcPath, line, column);
 
    applyInverseConcordance(&srcLoc);
 
@@ -244,7 +244,7 @@ Error synctexInverseSearch(const json::JsonRpcRequest& request,
       return error;
    FilePath pdfPath = module_context::resolveAliasedPath(file);
 
-   core::tex::Synctex synctex;
+   rscore::tex::Synctex synctex;
    if (synctex.parse(pdfPath))
    {
       if (!fromClick)
@@ -253,14 +253,14 @@ Error synctexInverseSearch(const json::JsonRpcRequest& request,
          // the passed x and y coordinates since they represent the
          // top of the user-visible content (in case the page is
          // scrolled down from the top)
-         core::tex::PdfLocation contLoc = synctex.topOfPageContent(page);
+         rscore::tex::PdfLocation contLoc = synctex.topOfPageContent(page);
          x = std::max((float)x, contLoc.x());
          y = std::max((float)y, contLoc.y());
       }
 
-      core::tex::PdfLocation pdfLocation(page, x, y, width, height);
+      rscore::tex::PdfLocation pdfLocation(page, x, y, width, height);
 
-      core::tex::SourceLocation srcLoc = synctex.inverseSearch(pdfLocation);
+      rscore::tex::SourceLocation srcLoc = synctex.inverseSearch(pdfLocation);
       applyInverseConcordance(&srcLoc);
 
       pResponse->setResult(toJson(srcLoc));
@@ -286,7 +286,7 @@ void rsinversePostback(const std::string& arguments,
    int line = safe_convert::stringTo<int>(args[1].second, 1);
 
    // apply inverse concordance
-   core::tex::SourceLocation srcLoc(FilePath(sourceFile), line, 1);
+   rscore::tex::SourceLocation srcLoc(FilePath(sourceFile), line, 1);
    applyInverseConcordance(&srcLoc);
 
    // edit the file
@@ -323,13 +323,13 @@ Error forwardSearch(const FilePath& rootFile,
    // determine pdf
    FilePath pdfFile = rootFile.parent().complete(rootFile.stem() + ".pdf");
 
-   core::tex::Synctex synctex;
+   rscore::tex::Synctex synctex;
    if (synctex.parse(pdfFile))
    {
-      core::tex::SourceLocation srcLoc(inputFile, line, column);
+      rscore::tex::SourceLocation srcLoc(inputFile, line, column);
       applyForwardConcordance(rootFile, &srcLoc);
 
-      core::tex::PdfLocation pdfLoc = synctex.forwardSearch(srcLoc);
+      rscore::tex::PdfLocation pdfLoc = synctex.forwardSearch(srcLoc);
       *pPdfLocation = toJson(pdfFile, pdfLoc, fromClick);
    }
    else
diff --git a/src/cpp/session/modules/tex/SessionSynctex.hpp b/src/cpp/session/modules/tex/SessionSynctex.hpp
index fa674e7..987db27 100644
--- a/src/cpp/session/modules/tex/SessionSynctex.hpp
+++ b/src/cpp/session/modules/tex/SessionSynctex.hpp
@@ -18,7 +18,7 @@
 
 #include <core/json/Json.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -30,11 +30,11 @@ namespace synctex {
 
 // returns an object suitable for jnsi binding back into a PdfLocation
 // (or null if the search didn't succeed)
-core::Error forwardSearch(const core::FilePath& rootDocument,
-                          const core::json::Object& sourceLocation,
-                          core::json::Value* pPdfLocation);
+rscore::Error forwardSearch(const rscore::FilePath& rootDocument,
+                          const rscore::json::Object& sourceLocation,
+                          rscore::json::Value* pPdfLocation);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace synctex
 } // namespace tex
diff --git a/src/cpp/session/modules/tex/SessionTexUtils.cpp b/src/cpp/session/modules/tex/SessionTexUtils.cpp
index 97b834b..a389af0 100644
--- a/src/cpp/session/modules/tex/SessionTexUtils.cpp
+++ b/src/cpp/session/modules/tex/SessionTexUtils.cpp
@@ -27,7 +27,7 @@
 
 #include "SessionCompilePdfSupervisor.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -38,11 +38,11 @@ namespace {
 
 // this function attempts to emulate the behavior of tools::texi2dvi
 // in appending extra paths to TEXINPUTS, BIBINPUTS, & BSTINPUTS
-core::system::Option inputsEnvVar(const std::string& name,
+rscore::system::Option inputsEnvVar(const std::string& name,
                                   const FilePath& extraPath,
                                   bool ensureForwardSlashes)
 {
-   std::string value = core::system::getenv(name);
+   std::string value = rscore::system::getenv(name);
    if (value.empty())
       value = ".";
 
@@ -54,8 +54,8 @@ core::system::Option inputsEnvVar(const std::string& name,
 #endif
 
    std::string sysPath = string_utils::utf8ToSystem(extraPath.absolutePath());
-   core::system::addToPath(&value, sysPath);
-   core::system::addToPath(&value, ""); // trailing : required by tex
+   rscore::system::addToPath(&value, sysPath);
+   rscore::system::addToPath(&value, ""); // trailing : required by tex
 
    return std::make_pair(name, value);
 }
@@ -89,7 +89,7 @@ RTexmfPaths rTexmfPaths()
    FilePath rHomeSharePath(rHomeShare);
    if (!rHomeSharePath.exists())
    {
-      LOG_ERROR(core::pathNotFoundError(rHomeShare, ERROR_LOCATION));
+      LOG_ERROR(rscore::pathNotFoundError(rHomeShare, ERROR_LOCATION));
       return RTexmfPaths();
    }
 
@@ -97,7 +97,7 @@ RTexmfPaths rTexmfPaths()
    FilePath rTexmfPath(rHomeSharePath.complete("texmf"));
    if (!rTexmfPath.exists())
    {
-      LOG_ERROR(core::pathNotFoundError(rTexmfPath.absolutePath(),
+      LOG_ERROR(rscore::pathNotFoundError(rTexmfPath.absolutePath(),
                                         ERROR_LOCATION));
       return RTexmfPaths();
    }
@@ -113,9 +113,9 @@ RTexmfPaths rTexmfPaths()
 
 // build TEXINPUTS, BIBINPUTS etc. by composing any existing value in
 // the environment (or . if none) with the R dirs in share/texmf
-core::system::Options rTexInputsEnvVars()
+rscore::system::Options rTexInputsEnvVars()
 {
-   core::system::Options envVars;
+   rscore::system::Options envVars;
    RTexmfPaths texmfPaths = rTexmfPaths();
    if (!texmfPaths.empty())
    {
@@ -133,28 +133,28 @@ core::system::Options rTexInputsEnvVars()
 }
 
 Error runTexCompile(const FilePath& texProgramPath,
-                    const core::system::Options& envVars,
+                    const rscore::system::Options& envVars,
                     const shell_utils::ShellArgs& args,
                     const FilePath& texFilePath,
-                    core::system::ProcessResult* pResult)
+                    rscore::system::ProcessResult* pResult)
 {
    // copy extra environment variables
-   core::system::Options env;
-   core::system::environment(&env);
-   BOOST_FOREACH(const core::system::Option& var, envVars)
+   rscore::system::Options env;
+   rscore::system::environment(&env);
+   BOOST_FOREACH(const rscore::system::Option& var, envVars)
    {
-      core::system::setenv(&env, var.first, var.second);
+      rscore::system::setenv(&env, var.first, var.second);
    }
 
    // set options
-   core::system::ProcessOptions procOptions;
+   rscore::system::ProcessOptions procOptions;
    procOptions.terminateChildren = true;
    procOptions.redirectStdErrToStdOut = true;
    procOptions.environment = env;
    procOptions.workingDir = texFilePath.parent();
 
    // run the program
-   return core::system::runProgram(
+   return rscore::system::runProgram(
                string_utils::utf8ToSystem(texProgramPath.absolutePath()),
                buildArgs(args, texFilePath),
                "",
@@ -162,11 +162,11 @@ Error runTexCompile(const FilePath& texProgramPath,
                pResult);
 }
 
-core::Error runTexCompile(
-              const core::FilePath& texProgramPath,
-              const core::system::Options& envVars,
-              const core::shell_utils::ShellArgs& args,
-              const core::FilePath& texFilePath,
+rscore::Error runTexCompile(
+              const rscore::FilePath& texProgramPath,
+              const rscore::system::Options& envVars,
+              const rscore::shell_utils::ShellArgs& args,
+              const rscore::FilePath& texFilePath,
               const boost::function<void(int,const std::string&)>& onExited)
 {
    return compile_pdf_supervisor::runProgram(
diff --git a/src/cpp/session/modules/tex/SessionTexUtils.hpp b/src/cpp/session/modules/tex/SessionTexUtils.hpp
index 0871e77..fc781d7 100644
--- a/src/cpp/session/modules/tex/SessionTexUtils.hpp
+++ b/src/cpp/session/modules/tex/SessionTexUtils.hpp
@@ -22,7 +22,7 @@
 #include <core/system/Types.hpp>
 #include <core/system/Process.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -35,26 +35,26 @@ struct RTexmfPaths
 {
    bool empty() const { return texInputsPath.empty(); }
 
-   core::FilePath texInputsPath;
-   core::FilePath bibInputsPath;
-   core::FilePath bstInputsPath;
+   rscore::FilePath texInputsPath;
+   rscore::FilePath bibInputsPath;
+   rscore::FilePath bstInputsPath;
 };
 
 RTexmfPaths rTexmfPaths();
 
-core::system::Options rTexInputsEnvVars();
+rscore::system::Options rTexInputsEnvVars();
 
-core::Error runTexCompile(const core::FilePath& texProgramPath,
-                          const core::system::Options& envVars,
-                          const core::shell_utils::ShellArgs& args,
-                          const core::FilePath& texFilePath,
-                          core::system::ProcessResult* pResult);
+rscore::Error runTexCompile(const rscore::FilePath& texProgramPath,
+                          const rscore::system::Options& envVars,
+                          const rscore::shell_utils::ShellArgs& args,
+                          const rscore::FilePath& texFilePath,
+                          rscore::system::ProcessResult* pResult);
 
-core::Error runTexCompile(
-              const core::FilePath& texProgramPath,
-              const core::system::Options& envVars,
-              const core::shell_utils::ShellArgs& args,
-              const core::FilePath& texFilePath,
+rscore::Error runTexCompile(
+              const rscore::FilePath& texProgramPath,
+              const rscore::system::Options& envVars,
+              const rscore::shell_utils::ShellArgs& args,
+              const rscore::FilePath& texFilePath,
               const boost::function<void(int,const std::string&)>& onExited);
 
 } // namespace utils
diff --git a/src/cpp/session/modules/tex/SessionViewPdf.cpp b/src/cpp/session/modules/tex/SessionViewPdf.cpp
index d3299a0..9860a66 100644
--- a/src/cpp/session/modules/tex/SessionViewPdf.cpp
+++ b/src/cpp/session/modules/tex/SessionViewPdf.cpp
@@ -25,7 +25,7 @@
 
 #define kPdfJsPath "/pdf_js/"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -65,7 +65,7 @@ void handlePdfJs(const http::Request& request, http::Response* pResponse)
       return;
    }
 
-   core::FilePath pdfJsResource = options().rResourcesPath().childPath(path);
+   rscore::FilePath pdfJsResource = options().rResourcesPath().childPath(path);
    if (pdfJsResource.exists())
    {
       pResponse->setCacheableFile(pdfJsResource, request);
@@ -75,7 +75,7 @@ void handlePdfJs(const http::Request& request, http::Response* pResponse)
 
 } // anonymous namespace
 
-std::string createViewPdfUrl(const core::FilePath& filePath)
+std::string createViewPdfUrl(const rscore::FilePath& filePath)
 {
    return "view_pdf?path=" + http::util::urlEncode(filePath.absolutePath(),
                                                    true);
diff --git a/src/cpp/session/modules/tex/SessionViewPdf.hpp b/src/cpp/session/modules/tex/SessionViewPdf.hpp
index 9c9431e..6a56977 100644
--- a/src/cpp/session/modules/tex/SessionViewPdf.hpp
+++ b/src/cpp/session/modules/tex/SessionViewPdf.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -28,9 +28,9 @@ namespace modules {
 namespace tex {
 namespace view_pdf {
 
-std::string createViewPdfUrl(const core::FilePath& filePath);
+std::string createViewPdfUrl(const rscore::FilePath& filePath);
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace view_pdf
 } // namespace tex
diff --git a/src/cpp/session/modules/vcs/SessionVCSCore.cpp b/src/cpp/session/modules/vcs/SessionVCSCore.cpp
index ff91b79..34192ff 100644
--- a/src/cpp/session/modules/vcs/SessionVCSCore.cpp
+++ b/src/cpp/session/modules/vcs/SessionVCSCore.cpp
@@ -16,7 +16,7 @@
 
 #include <core/FilePath.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
diff --git a/src/cpp/session/modules/vcs/SessionVCSCore.hpp b/src/cpp/session/modules/vcs/SessionVCSCore.hpp
index 984186c..e7313b3 100644
--- a/src/cpp/session/modules/vcs/SessionVCSCore.hpp
+++ b/src/cpp/session/modules/vcs/SessionVCSCore.hpp
@@ -51,7 +51,7 @@ private:
 struct FileWithStatus
 {
    VCSStatus status;
-   core::FilePath path;
+   rscore::FilePath path;
 };
 
 class StatusResult
@@ -69,7 +69,7 @@ public:
       }
    }
 
-   VCSStatus getStatus(const core::FilePath& fileOrDirectory) const;
+   VCSStatus getStatus(const rscore::FilePath& fileOrDirectory) const;
    std::vector<FileWithStatus> files() const { return files_; }
 
 private:
@@ -84,8 +84,8 @@ public:
    FileDecorationContext() {}
    virtual ~FileDecorationContext() {}
 
-   virtual void decorateFile(const core::FilePath& filePath,
-                             core::json::Object* pFileObject) = 0;
+   virtual void decorateFile(const rscore::FilePath& filePath,
+                             rscore::json::Object* pFileObject) = 0;
 };
 
 } // namespace source_control
diff --git a/src/cpp/session/modules/vcs/SessionVCSUtils.cpp b/src/cpp/session/modules/vcs/SessionVCSUtils.cpp
index b01f64b..94d9c84 100644
--- a/src/cpp/session/modules/vcs/SessionVCSUtils.cpp
+++ b/src/cpp/session/modules/vcs/SessionVCSUtils.cpp
@@ -23,7 +23,7 @@
 #include <session/SessionModuleContext.hpp>
 #include <session/projects/SessionProjects.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules {
@@ -47,10 +47,10 @@ void enqueueRefreshEvent()
    enqueRefreshEventWithDelay(0);
 }
 
-core::json::Object processResultToJson(
-      const core::system::ProcessResult& result)
+rscore::json::Object processResultToJson(
+      const rscore::system::ProcessResult& result)
 {
-   core::json::Object obj;
+   rscore::json::Object obj;
    obj["output"] = result.stdOut;
    obj["exit_code"] = result.exitStatus;
    return obj;
diff --git a/src/cpp/session/modules/vcs/SessionVCSUtils.hpp b/src/cpp/session/modules/vcs/SessionVCSUtils.hpp
index 51ae15c..fcfc0f8 100644
--- a/src/cpp/session/modules/vcs/SessionVCSUtils.hpp
+++ b/src/cpp/session/modules/vcs/SessionVCSUtils.hpp
@@ -28,10 +28,10 @@ namespace vcs_utils {
 void enqueRefreshEventWithDelay(int delay);
 void enqueueRefreshEvent();
 
-core::json::Object processResultToJson(
-      const core::system::ProcessResult& result);
+rscore::json::Object processResultToJson(
+      const rscore::system::ProcessResult& result);
 
-core::FilePath fileFilterPath(const core::json::Value& fileFilterJson);
+rscore::FilePath fileFilterPath(const rscore::json::Value& fileFilterJson);
 
 void splitMessage(const std::string message,
                   std::string* pSubject,
diff --git a/src/cpp/session/modules/viewer/SessionViewer.cpp b/src/cpp/session/modules/viewer/SessionViewer.cpp
index 2ebe7c6..4136513 100644
--- a/src/cpp/session/modules/viewer/SessionViewer.cpp
+++ b/src/cpp/session/modules/viewer/SessionViewer.cpp
@@ -33,7 +33,7 @@
 
 #include "ViewerHistory.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
diff --git a/src/cpp/session/modules/viewer/SessionViewer.hpp b/src/cpp/session/modules/viewer/SessionViewer.hpp
index 342f4ba..3b3bca7 100644
--- a/src/cpp/session/modules/viewer/SessionViewer.hpp
+++ b/src/cpp/session/modules/viewer/SessionViewer.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_VIEWER_HPP
 #define SESSION_VIEWER_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -24,7 +24,7 @@ namespace session {
 namespace modules { 
 namespace viewer {
 
-core::Error initialize();
+rscore::Error initialize();
                        
 } // namespace viewer
 } // namespace modules
diff --git a/src/cpp/session/modules/viewer/ViewerHistory.cpp b/src/cpp/session/modules/viewer/ViewerHistory.cpp
index 26b364d..d9a7c3c 100644
--- a/src/cpp/session/modules/viewer/ViewerHistory.cpp
+++ b/src/cpp/session/modules/viewer/ViewerHistory.cpp
@@ -23,7 +23,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace modules { 
@@ -103,12 +103,12 @@ module_context::ViewerHistoryEntry ViewerHistory::goBack()
 
 namespace {
 
-FilePath historyEntriesPath(const core::FilePath& serializationPath)
+FilePath historyEntriesPath(const rscore::FilePath& serializationPath)
 {
    return serializationPath.complete("history_entries");
 }
 
-FilePath currentIndexPath(const core::FilePath& serializationPath)
+FilePath currentIndexPath(const rscore::FilePath& serializationPath)
 {
    return serializationPath.complete("current_index");
 }
@@ -128,7 +128,7 @@ ReadCollectionAction historyEntryFromString(
 
 } // anonymous namespace
 
-void ViewerHistory::saveTo(const core::FilePath& serializationPath) const
+void ViewerHistory::saveTo(const rscore::FilePath& serializationPath) const
 {
    // blow away any existing serialization data
    Error error = serializationPath.removeIfExists();
@@ -149,7 +149,7 @@ void ViewerHistory::saveTo(const core::FilePath& serializationPath) const
 
    // save the current index
    std::string currentIndex = safe_convert::numberToString(currentIndex_);
-   error = core::writeStringToFile(currentIndexPath(serializationPath),
+   error = rscore::writeStringToFile(currentIndexPath(serializationPath),
                                    currentIndex);
    if (error)
    {
@@ -179,7 +179,7 @@ void ViewerHistory::saveTo(const core::FilePath& serializationPath) const
    }
 }
 
-void ViewerHistory::restoreFrom(const core::FilePath& serializationPath)
+void ViewerHistory::restoreFrom(const rscore::FilePath& serializationPath)
 {
    // skip if the directory doesn't exist
    if (!serializationPath.exists())
@@ -196,7 +196,7 @@ void ViewerHistory::restoreFrom(const core::FilePath& serializationPath)
 
    // read the index
    std::string currentIndex;
-   Error error = core::readStringFromFile(indexPath, &currentIndex);
+   Error error = rscore::readStringFromFile(indexPath, &currentIndex);
    if (error)
    {
       LOG_ERROR(error);
@@ -241,9 +241,9 @@ std::string ViewerHistoryEntry::url() const
    return module_context::sessionTempDirUrl(sessionTempPath_);
 }
 
-core::Error ViewerHistoryEntry::copy(
-             const core::FilePath& sourceDir,
-             const core::FilePath& destinationDir) const
+rscore::Error ViewerHistoryEntry::copy(
+             const rscore::FilePath& sourceDir,
+             const rscore::FilePath& destinationDir) const
 {
    // copy enclosing directory to the destinationDir
    FilePath entryPath = sourceDir.childPath(sessionTempPath_);
diff --git a/src/cpp/session/modules/viewer/ViewerHistory.hpp b/src/cpp/session/modules/viewer/ViewerHistory.hpp
index ae252d7..a359621 100644
--- a/src/cpp/session/modules/viewer/ViewerHistory.hpp
+++ b/src/cpp/session/modules/viewer/ViewerHistory.hpp
@@ -21,7 +21,7 @@
 
 #include <session/SessionModuleContext.hpp>
 
-namespace core {
+namespace rscore {
    class Error;
 }
  
@@ -51,8 +51,8 @@ public:
    bool hasPrevious() const;
    module_context::ViewerHistoryEntry goBack();
 
-   void saveTo(const core::FilePath& serializationPath) const;
-   void restoreFrom(const core::FilePath& serializationPath);
+   void saveTo(const rscore::FilePath& serializationPath) const;
+   void restoreFrom(const rscore::FilePath& serializationPath);
 
 private:
    int currentIndex_;
diff --git a/src/cpp/session/postback/PostbackMain.cpp b/src/cpp/session/postback/PostbackMain.cpp
index fb72491..ce871c2 100644
--- a/src/cpp/session/postback/PostbackMain.cpp
+++ b/src/cpp/session/postback/PostbackMain.cpp
@@ -45,7 +45,7 @@
 
 #include "PostbackOptions.hpp"
 
-using namespace core ;
+using namespace rscore ;
 using namespace session::postback ;
 
 int exitFailure(const Error& error)
@@ -58,9 +58,9 @@ Error sendRequest(http::Request* pRequest, http::Response* pResponse)
 {
 #ifdef _WIN32
    // get local peer
-   std::string pipeName = core::system::getenv("RS_LOCAL_PEER");
+   std::string pipeName = rscore::system::getenv("RS_LOCAL_PEER");
    pRequest->setHeader("X-Shared-Secret",
-                       core::system::getenv("RS_SHARED_SECRET"));
+                       rscore::system::getenv("RS_SHARED_SECRET"));
    return http::sendRequest(pipeName,
                             *pRequest,
                             http::ConnectionRetryProfile(
@@ -68,7 +68,7 @@ Error sendRequest(http::Request* pRequest, http::Response* pResponse)
                                   boost::posix_time::milliseconds(50)),
                             pResponse);
 #else
-   std::string tcpipPort = core::system::getenv(kRSessionStandalonePortNumber);
+   std::string tcpipPort = rscore::system::getenv(kRSessionStandalonePortNumber);
    if (!tcpipPort.empty())
    {
       return http::sendRequest("127.0.0.1", tcpipPort, *pRequest, pResponse);
@@ -76,7 +76,7 @@ Error sendRequest(http::Request* pRequest, http::Response* pResponse)
    else
    {
       // determine stream path
-      std::string userIdentity = core::system::getenv(kRStudioUserIdentity);
+      std::string userIdentity = rscore::system::getenv(kRStudioUserIdentity);
       FilePath streamPath = session::local_streams::streamPath(userIdentity);
       return http::sendRequest(streamPath, *pRequest, pResponse);
    }
@@ -89,10 +89,10 @@ int main(int argc, char * const argv[])
    try
    {
       // initialize log
-      initializeSystemLog("rpostback", core::system::kLogLevelWarning);
+      initializeSystemLog("rpostback", rscore::system::kLogLevelWarning);
 
       // ignore SIGPIPE
-      Error error = core::system::ignoreSignal(core::system::SigPipe);
+      Error error = rscore::system::ignoreSignal(rscore::system::SigPipe);
       if (error)
          LOG_ERROR(error);
 
diff --git a/src/cpp/session/postback/PostbackOptions.cpp b/src/cpp/session/postback/PostbackOptions.cpp
index 6e00911..48ee4a6 100644
--- a/src/cpp/session/postback/PostbackOptions.cpp
+++ b/src/cpp/session/postback/PostbackOptions.cpp
@@ -18,7 +18,7 @@
 #include <core/ProgramStatus.hpp>
 #include <core/ProgramOptions.hpp>
 
-using namespace core ;
+using namespace rscore ;
 
 namespace session {
 namespace postback {
@@ -50,7 +50,7 @@ ProgramStatus Options::read(int argc, char * const argv[])
    optionsDesc.positionalOptions.add("argument", 1);
    
    // read options
-   ProgramStatus status = core::program_options::read(optionsDesc, argc, argv);
+   ProgramStatus status = rscore::program_options::read(optionsDesc, argc, argv);
    if (status.exit())
       return status;
    
diff --git a/src/cpp/session/postback/PostbackOptions.hpp b/src/cpp/session/postback/PostbackOptions.hpp
index b1ae552..98ec170 100644
--- a/src/cpp/session/postback/PostbackOptions.hpp
+++ b/src/cpp/session/postback/PostbackOptions.hpp
@@ -20,7 +20,7 @@
 
 #include <boost/utility.hpp>
 
-namespace core {
+namespace rscore {
    class ProgramStatus;
 }
 
@@ -39,7 +39,7 @@ private:
    // COPYING: boost::noncopyable
    
 public:
-   core::ProgramStatus read(int argc, char * const argv[]);
+   rscore::ProgramStatus read(int argc, char * const argv[]);
 
    std::string command() const
    {
diff --git a/src/cpp/session/projects/SessionProjectContext.cpp b/src/cpp/session/projects/SessionProjectContext.cpp
index 602aecf..9585738 100644
--- a/src/cpp/session/projects/SessionProjectContext.cpp
+++ b/src/cpp/session/projects/SessionProjectContext.cpp
@@ -33,7 +33,7 @@
 
 #include "SessionProjectFirstRun.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace projects {
@@ -42,8 +42,8 @@ namespace {
 
 bool canWriteToProjectDir(const FilePath& projectDirPath)
 {
-   FilePath testFile = projectDirPath.complete(core::system::generateUuid());
-   Error error = core::writeStringToFile(testFile, "test");
+   FilePath testFile = projectDirPath.complete(rscore::system::generateUuid());
+   Error error = rscore::writeStringToFile(testFile, "test");
    if (error)
    {
       return false;
@@ -78,7 +78,7 @@ Error computeScratchPath(const FilePath& projectFile, FilePath* pScratchPath)
 
       // mark hidden if we are on win32
 #ifdef _WIN32
-      error = core::system::makeFileHidden(projectUserDir);
+      error = rscore::system::makeFileHidden(projectUserDir);
       if (error)
          return error;
 #endif
@@ -103,7 +103,7 @@ FilePath ProjectContext::oldScratchPath() const
       return FilePath();
 
    // add username if we can get one
-   std::string username = core::system::username();
+   std::string username = rscore::system::username();
    if (!username.empty())
       projectUserDir = projectUserDir.complete(username);
 
@@ -224,7 +224,7 @@ void ProjectContext::augmentRbuildignore()
          // they are already there
 
          std::string strIgnore;
-         Error error = core::readStringFromFile(
+         Error error = rscore::readStringFromFile(
                                              rbuildIgnorePath,
                                              &strIgnore,
                                              string_utils::LineEndingPosix);
@@ -251,7 +251,7 @@ void ProjectContext::augmentRbuildignore()
             strIgnore += kIgnoreRproj + std::string("\n");
          if (!hasRProjUser)
             strIgnore += kIgnoreRprojUser + std::string("\n");
-         error = core::writeStringToFile(rbuildIgnorePath,
+         error = rscore::writeStringToFile(rbuildIgnorePath,
                                          strIgnore,
                                          string_utils::LineEndingNative);
          if (error)
@@ -353,7 +353,7 @@ void ProjectContext::onDeferredInit(bool newSession)
 {
    // kickoff file monitoring for this directory
    using namespace boost;
-   core::system::file_monitor::Callbacks cb;
+   rscore::system::file_monitor::Callbacks cb;
    cb.onRegistered = bind(&ProjectContext::fileMonitorRegistered,
                           this, _1, _2);
    cb.onRegistrationError = bind(&ProjectContext::fileMonitorTermination,
@@ -364,7 +364,7 @@ void ProjectContext::onDeferredInit(bool newSession)
                             this, _1);
    cb.onUnregistered = bind(&ProjectContext::fileMonitorTermination,
                             this, Success());
-   core::system::file_monitor::registerMonitor(
+   rscore::system::file_monitor::registerMonitor(
                                          directory(),
                                          true,
                                          module_context::fileListingFilter,
@@ -372,8 +372,8 @@ void ProjectContext::onDeferredInit(bool newSession)
 }
 
 void ProjectContext::fileMonitorRegistered(
-                              core::system::file_monitor::Handle handle,
-                              const tree<core::FileInfo>& files)
+                              rscore::system::file_monitor::Handle handle,
+                              const tree<rscore::FileInfo>& files)
 {
    // update state
    hasFileMonitor_ = true;
@@ -383,7 +383,7 @@ void ProjectContext::fileMonitorRegistered(
 }
 
 void ProjectContext::fileMonitorFilesChanged(
-                   const std::vector<core::system::FileChangeEvent>& events)
+                   const std::vector<rscore::system::FileChangeEvent>& events)
 {
    // notify client (gwt)
    module_context::enqueFileChangedEvents(directory(), events);
@@ -606,7 +606,7 @@ Error ProjectContext::buildOptionsFile(Settings* pOptionsFile) const
 
 Error ProjectContext::readVcsOptions(RProjectVcsOptions* pOptions) const
 {
-   core::Settings settings;
+   rscore::Settings settings;
    Error error = settings.initialize(vcsOptionsFilePath());
    if (error)
       return error;
@@ -620,7 +620,7 @@ Error ProjectContext::readVcsOptions(RProjectVcsOptions* pOptions) const
 
 Error ProjectContext::writeVcsOptions(const RProjectVcsOptions& options) const
 {
-   core::Settings settings;
+   rscore::Settings settings;
    Error error = settings.initialize(vcsOptionsFilePath());
    if (error)
       return error;
@@ -634,7 +634,7 @@ Error ProjectContext::writeVcsOptions(const RProjectVcsOptions& options) const
 
 Error ProjectContext::readBuildOptions(RProjectBuildOptions* pOptions)
 {
-   core::Settings optionsFile;
+   rscore::Settings optionsFile;
    Error error = buildOptionsFile(&optionsFile);
    if (error)
       return error;
@@ -658,7 +658,7 @@ Error ProjectContext::readBuildOptions(RProjectBuildOptions* pOptions)
 
 Error ProjectContext::writeBuildOptions(const RProjectBuildOptions& options)
 {
-   core::Settings optionsFile;
+   rscore::Settings optionsFile;
    Error error = buildOptionsFile(&optionsFile);
    if (error)
       return error;
diff --git a/src/cpp/session/projects/SessionProjectFirstRun.cpp b/src/cpp/session/projects/SessionProjectFirstRun.cpp
index 5d1e81e..ab272f3 100644
--- a/src/cpp/session/projects/SessionProjectFirstRun.cpp
+++ b/src/cpp/session/projects/SessionProjectFirstRun.cpp
@@ -24,7 +24,7 @@
 
 #include "SessionProjectsInternal.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace projects {
@@ -47,7 +47,7 @@ void addFirstRunDoc(const FilePath& projectFile, const std::string& doc)
 
    std::ostringstream ostr;
    ostr << doc << std::endl;
-   error = core::appendToFile(scratchPath.childPath(kFirstRunDocs), ostr.str());
+   error = rscore::appendToFile(scratchPath.childPath(kFirstRunDocs), ostr.str());
    if (error)
       LOG_ERROR(error);
 }
@@ -70,7 +70,7 @@ std::vector<std::string> collectFirstRunDocs(const FilePath& projectFile)
    FilePath firstRunDocsPath = scratchPath.childPath(kFirstRunDocs);
    if (firstRunDocsPath.exists())
    {
-      Error error = core::readStringVectorFromFile(firstRunDocsPath, &docs);
+      Error error = rscore::readStringVectorFromFile(firstRunDocsPath, &docs);
       if (error)
          LOG_ERROR(error);
 
diff --git a/src/cpp/session/projects/SessionProjectFirstRun.hpp b/src/cpp/session/projects/SessionProjectFirstRun.hpp
index c05e5b4..4dcb562 100644
--- a/src/cpp/session/projects/SessionProjectFirstRun.hpp
+++ b/src/cpp/session/projects/SessionProjectFirstRun.hpp
@@ -19,15 +19,15 @@
 #include <string>
 #include <vector>
 
-namespace core {
+namespace rscore {
    class FilePath;
 }
  
 namespace session {
 namespace projects {
 
-void addFirstRunDoc(const core::FilePath& projectFile, const std::string& doc);
-std::vector<std::string> collectFirstRunDocs(const core::FilePath& projectFile);
+void addFirstRunDoc(const rscore::FilePath& projectFile, const std::string& doc);
+std::vector<std::string> collectFirstRunDocs(const rscore::FilePath& projectFile);
 
 } // namespace projects
 } // namesapce session
diff --git a/src/cpp/session/projects/SessionProjects.cpp b/src/cpp/session/projects/SessionProjects.cpp
index 82d5684..2ee5717 100644
--- a/src/cpp/session/projects/SessionProjects.cpp
+++ b/src/cpp/session/projects/SessionProjects.cpp
@@ -32,7 +32,7 @@
 #include "SessionProjectFirstRun.hpp"
 #include "SessionProjectsInternal.hpp"
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace projects {
@@ -111,7 +111,7 @@ Error createProject(const json::JsonRpcRequest& request,
       // error if the package dir already exists
       FilePath packageDir = projectFilePath.parent();
       if (packageDir.exists())
-         return core::fileExistsError(ERROR_LOCATION);
+         return rscore::fileExistsError(ERROR_LOCATION);
 
       // create a temp dir (so we can import the list of code files)
       FilePath tempDir = module_context::tempFile("newpkg", "dir");
@@ -145,7 +145,7 @@ Error createProject(const json::JsonRpcRequest& request,
       {
          std::string srcFileName = packageDir.filename() + ".R";
          FilePath srcFilePath = tempDir.complete(srcFileName);
-         Error error = core::writeStringToFile(srcFilePath, "");
+         Error error = rscore::writeStringToFile(srcFilePath, "");
          if (error)
             return error;
          rFileNames.push_back(string_utils::utf8ToSystem(srcFileName));
@@ -193,7 +193,7 @@ Error createProject(const json::JsonRpcRequest& request,
       // error if the shiny app dir already exists
       FilePath appDir = projectFilePath.parent();
       if (appDir.exists())
-         return core::fileExistsError(ERROR_LOCATION);
+         return rscore::fileExistsError(ERROR_LOCATION);
 
       // now create it
       Error error = appDir.ensureDirectory();
@@ -553,9 +553,9 @@ void syncProjectFileChanges()
    module_context::enqueClientEvent(event);
 }
 
-void onFilesChanged(const std::vector<core::system::FileChangeEvent>& events)
+void onFilesChanged(const std::vector<rscore::system::FileChangeEvent>& events)
 {
-   BOOST_FOREACH(const core::system::FileChangeEvent& event, events)
+   BOOST_FOREACH(const rscore::system::FileChangeEvent& event, events)
    {
       // if the project file changed then sync its changes
       if (event.fileInfo().absolutePath() ==
@@ -579,7 +579,7 @@ void onMonitoringDisabled()
 
 
 // Note that the logic here needs to be synchronized with the logic in
-// core::r_util::RSessionContext::nextSessionWorkingDir (so that both
+// rscore::r_util::RSessionContext::nextSessionWorkingDir (so that both
 // reach the same conclusion about what the next working directory is)
 void startup()
 {
diff --git a/src/cpp/session/projects/SessionProjectsInternal.hpp b/src/cpp/session/projects/SessionProjectsInternal.hpp
index f2ad9ba..89745ba 100644
--- a/src/cpp/session/projects/SessionProjectsInternal.hpp
+++ b/src/cpp/session/projects/SessionProjectsInternal.hpp
@@ -18,7 +18,7 @@
 
 #include <string>
 
-namespace core {
+namespace rscore {
    class Error;
    class FilePath;
 }
@@ -28,10 +28,10 @@ namespace projects {
 
 void startup();
 
-core::Error initialize();
+rscore::Error initialize();
 
-core::Error computeScratchPath(const core::FilePath& projectFile,
-                               core::FilePath* pScratchPath);
+rscore::Error computeScratchPath(const rscore::FilePath& projectFile,
+                               rscore::FilePath* pScratchPath);
 
 } // namespace projects
 } // namesapce session
diff --git a/src/cpp/session/workers/SessionWebRequestWorker.cpp b/src/cpp/session/workers/SessionWebRequestWorker.cpp
index d792a59..e0b7022 100644
--- a/src/cpp/session/workers/SessionWebRequestWorker.cpp
+++ b/src/cpp/session/workers/SessionWebRequestWorker.cpp
@@ -17,7 +17,7 @@
 
 #include <session/SessionWorkerContext.hpp>
 
-using namespace core;
+using namespace rscore;
 
 namespace session {
 namespace workers {
diff --git a/src/cpp/session/workers/SessionWebRequestWorker.hpp b/src/cpp/session/workers/SessionWebRequestWorker.hpp
index 11061cd..7b71f09 100644
--- a/src/cpp/session/workers/SessionWebRequestWorker.hpp
+++ b/src/cpp/session/workers/SessionWebRequestWorker.hpp
@@ -16,7 +16,7 @@
 #ifndef SESSION_WEB_REQUEST_WORKER_HPP
 #define SESSION_WEB_REQUEST_WORKER_HPP
 
-namespace core {
+namespace rscore {
    class Error;
 }
 
@@ -24,7 +24,7 @@ namespace session {
 namespace workers {
 namespace web_request {
 
-core::Error initialize();
+rscore::Error initialize();
 
 } // namespace web_request
 } // namespace workers
