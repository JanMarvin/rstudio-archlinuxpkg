diff --git a/src/cpp/desktop/CMakeLists.txt b/src/cpp/desktop/CMakeLists.txt
index acd1381e9b..e702527c6d 100644
--- a/src/cpp/desktop/CMakeLists.txt
+++ b/src/cpp/desktop/CMakeLists.txt
@@ -13,7 +13,7 @@
 #
 #
 
-cmake_minimum_required(VERSION 2.8.8)
+cmake_minimum_required(VERSION 2.8.11)
 
 project(DESKTOP)
 
@@ -103,23 +103,27 @@ add_definitions(
    -DQT_NO_SIGNALS_SLOTS_KEYWORDS)
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 
-find_package(Qt5Core REQUIRED)
-find_package(Qt5Widgets REQUIRED)
-find_package(Qt5Gui REQUIRED)
-find_package(Qt5Network REQUIRED)
-find_package(Qt5WebChannel REQUIRED)
-find_package(Qt5WebEngine REQUIRED)
-find_package(Qt5WebEngineWidgets REQUIRED)
-find_package(Qt5PrintSupport REQUIRED)
-find_package(Qt5Quick REQUIRED)
-find_package(Qt5Positioning REQUIRED)
-find_package(Qt5Sensors REQUIRED)
-find_package(Qt5Svg REQUIRED)
-find_package(Qt5Xml REQUIRED)
-find_package(Qt5XmlPatterns REQUIRED)
-find_package(Qt5Qml REQUIRED)
-find_package(Qt5Sql REQUIRED)
-find_package(Qt5OpenGL REQUIRED)
+find_package(Qt5 REQUIRED
+             Core
+             Widgets
+             Gui 
+             Network
+             WebChannel
+             WebEngine
+             WebEngineWidgets
+             PrintSupport
+             Quick
+             QuickWidgets
+             Positioning
+             Sensors
+             Svg
+             Xml
+             XmlPatterns
+             Qml
+             Sql
+             OpenGL
+)
+
 if(UNIX AND NOT APPLE)
    find_package(Qt5DBus REQUIRED)
 endif()
@@ -322,22 +326,22 @@ if(APPLE OR WIN32 OR
 endif()
 
 set(RSTUDIO_QTMODULES
-    Core
-    Widgets
-    Gui
-    Network
-    WebChannel
-    WebEngine
-    WebEngineWidgets
-    PrintSupport
-    Quick
-    QuickWidgets
-    Positioning
-    Sensors
-    Svg
-    Xml
-    XmlPatterns
-    Qml
+    Qt5::Core
+    Qt5::Widgets
+    Qt5::Gui
+    Qt5::Network
+    Qt5::WebChannel
+    Qt5::WebEngine
+    Qt5::WebEngineWidgets
+    Qt5::PrintSupport
+    Qt5::Quick
+    Qt5::QuickWidgets
+    Qt5::Positioning
+    Qt5::Sensors
+    Qt5::Svg
+    Qt5::Xml
+    Qt5::XmlPatterns
+    Qt5::Qml
 )
 
 # define executable (Windows & Linux)
@@ -353,14 +357,14 @@ if(NOT APPLE)
    # These cause issues with macdeployqt due to missing dependencies; suspect we don't need
    # these on any platform.
    set(RSTUDIO_EXTRA_QTMODULES
-      Sql
-      OpenGL
+      Qt5::Sql
+      Qt5::OpenGL
    )
 
    if(WIN32)
-      qt5_use_modules(rstudio ${RSTUDIO_QTMODULES} ${RSTUDIO_EXTRA_QTMODULES})
+      target_link_libraries(rstudio ${RSTUDIO_QTMODULES} ${RSTUDIO_EXTRA_QTMODULES})
    else()
-      qt5_use_modules(rstudio ${RSTUDIO_QTMODULES} ${RSTUDIO_EXTRA_QTMODULES} DBus)
+      target_link_libraries(rstudio ${RSTUDIO_QTMODULES} ${RSTUDIO_EXTRA_QTMODULES} Qt5::DBus)
    endif()
 
    # add rpath for linux so we can find qt libraries in our bin dir
diff --git a/src/cpp/session/modules/SessionConnections.R b/src/cpp/session/modules/SessionConnections.R
index c6a7f8a66c..69df1a3f82 100644
--- a/src/cpp/session/modules/SessionConnections.R
+++ b/src/cpp/session/modules/SessionConnections.R
@@ -402,71 +402,6 @@ options(connectionObserver = list(
    do.call(rbind, lapply(registryEntriesValue, function(e) data.frame(e, stringsAsFactors = FALSE)))
 })
 
-.rs.addFunction("connectionReadOdbcEntry", function(drivers, uniqueDriverNames, driver) {
-   tryCatch({
-      currentDriver <- drivers[drivers$attribute == "Driver" & drivers$name == driver, ]
-      driverInstaller <- drivers[drivers$attribute == "Installer" & drivers$name == driver, ]
-      driverId <- gsub(.rs.connectionOdbcRStudioDriver(), "", driver)
-
-      basePath <- sub(paste(tolower(driver), ".*$", sep = ""), "", currentDriver$value)
-      snippetsFile <- file.path(
-         basePath,
-         tolower(driver),
-         "snippets",
-         paste(tolower(driverId), ".R", sep = "")
-      )
-      
-      if (identical(file.exists(snippetsFile), TRUE)) {
-         snippet <- paste(readLines(snippetsFile), collapse = "\n")
-      }
-      else {
-         snippet <- paste(
-            "library(DBI)\n",
-            "con <- dbConnect(odbc::odbc(), .connection_string = \"", 
-            "Driver={", driver, "};${1:Parameters}\")",
-            sep = "")
-      }
-
-      licenseFile <- file.path(dirname(currentDriver$value), "license.lock")
-
-      iconData <- .Call("rs_connectionIcon", driverId)
-      if (nchar(iconData) == 0)
-         iconData <- .Call("rs_connectionIcon", "ODBC")
-
-      hasInstaller <- identical(driverInstaller$value, "RStudio")
-      warningMessage <- NULL
-
-      if (hasInstaller) {
-         installerVersion <- .rs.connectionInstallerInfo(driverId)$version
-
-         currentVersion <- drivers[drivers$attribute == "Version" & drivers$name == driver, ]
-         if (nrow(currentVersion) == 1) {
-            if (compareVersion(installerVersion, currentVersion$value) > 0) {
-               warningMessage <- "A new driver version is available, to upgrade, uninstall and then reinstall."
-            }
-         }
-      }
-
-      list(
-         package = .rs.scalar(NULL),
-         version = .rs.scalar(NULL),
-         name = .rs.scalar(driver),
-         type = .rs.scalar("Snippet"),
-         snippet = .rs.scalar(snippet),
-         help = .rs.scalar(NULL),
-         iconData = .rs.scalar(iconData),
-         licensed = .rs.scalar(identical(file.exists(licenseFile), TRUE)),
-         source = .rs.scalar("ODBC"),
-         hasInstaller = .rs.scalar(hasInstaller),
-         warning = .rs.scalar(warningMessage),
-         installer = .rs.scalar(driverInstaller$value)
-      )
-   }, error = function(e) {
-      warning(e$message)
-      NULL
-   })
-})
-
 .rs.addFunction("connectionReadOdbc", function() {
    if (.rs.isPackageInstalled("odbc")) {
       drivers <- data.frame()
@@ -482,7 +417,65 @@ options(connectionObserver = list(
       uniqueDriverNames <- unique(drivers$name)
 
       lapply(uniqueDriverNames, function(driver) {
-         .rs.connectionReadOdbcEntry(drivers, uniqueDriverNames, driver)
+         tryCatch({
+            currentDriver <- drivers[drivers$attribute == "Driver" & drivers$name == driver, ]
+
+            basePath <- sub(paste(tolower(driver), ".*$", sep = ""), "", currentDriver$value)
+            snippetsFile <- file.path(
+               basePath,
+               tolower(driver),
+               "snippets",
+               paste(tolower(driver), ".R", sep = "")
+            )
+            
+            if (identical(file.exists(snippetsFile), TRUE)) {
+               snippet <- paste(readLines(snippetsFile), collapse = "\n")
+            }
+            else {
+               snippet <- paste(
+                  "library(DBI)\n",
+                  "con <- dbConnect(odbc::odbc(), .connection_string = \"", 
+                  "Driver={", driver, "};${1:Parameters}\")",
+                  sep = "")
+            }
+
+            licenseFile <- file.path(dirname(currentDriver$value), "license.lock")
+
+            iconData <- .Call("rs_connectionIcon", driver)
+            if (nchar(iconData) == 0)
+               iconData <- .Call("rs_connectionIcon", "ODBC")
+
+            hasInstaller <- .rs.connectionHasInstaller(driver)
+            warningMessage <- NULL
+
+            if (hasInstaller) {
+               installerVersion <- .rs.connectionInstallerInfo(driver)$version
+
+               currentVersion <- drivers[drivers$attribute == "Version" & drivers$name == driver, ]
+               if (nrow(currentVersion) == 1) {
+                  if (compareVersion(installerVersion, currentVersion$value) > 0) {
+                     warningMessage <- "A new driver version is available, to upgrade, uninstall and then reinstall."
+                  }
+               }
+            }
+
+            list(
+               package = .rs.scalar(NULL),
+               version = .rs.scalar(NULL),
+               name = .rs.scalar(driver),
+               type = .rs.scalar("Snippet"),
+               snippet = .rs.scalar(snippet),
+               help = .rs.scalar(NULL),
+               iconData = .rs.scalar(iconData),
+               licensed = .rs.scalar(identical(file.exists(licenseFile), TRUE)),
+               source = .rs.scalar("ODBC"),
+               hasInstaller = .rs.scalar(hasInstaller),
+               warning = .rs.scalar(warningMessage)
+            )
+         }, error = function(e) {
+            warning(e$message)
+            NULL
+         })
       })
    }
 })
@@ -642,22 +635,9 @@ options(connectionObserver = list(
    for (i in seq_along(connectionList)) {
       entryName <- connectionList[[i]]$name
       if (!is.null(connectionNames[[entryName]])) {
-         existingDriver <- connectionNames[[entryName]]
-         withRStudioName <- paste(entryName, .rs.connectionOdbcRStudioDriver(), sep = "")
-
-         if (identical(as.character(connectionList[[i]]$type), "Install") &&
-             !identical(existingDriver$installer, "RStudio") &&
-             is.null(connectionNames[[withRStudioName]])) {
-            connectionList[[i]]$name <- entryName <- .rs.scalar(withRStudioName)
-         }
-         else {
-            connectionList[[i]]$remove <- TRUE
-         }
-      }
-
-      if (is.null(connectionNames[[entryName]])) {
-         connectionNames[[entryName]] <- connectionList[[i]]
+         connectionList[[i]]$remove <- TRUE
       }
+      connectionNames[[entryName]] <- TRUE
    }
    
    connectionList <- Filter(function(e) !identical(e$remove, TRUE), connectionList)
@@ -669,15 +649,10 @@ options(connectionObserver = list(
    context
 })
 
-.rs.addJsonRpcHandler("get_new_odbc_connection_context", function(name, retries = 1) {
-   singleEntryFilter <- function(e) {
+.rs.addJsonRpcHandler("get_new_odbc_connection_context", function(name) {
+   connectionContext <- Filter(function(e) {
       identical(as.character(e$name), name)
-   }
-
-   connectionContext <- Filter(singleEntryFilter, .rs.connectionReadOdbc())
-
-   while (length(connectionContext) != 1 && (retries <- retries - 1) >= 0)
-      Sys.sleep(1)
+   }, .rs.connectionReadOdbc())
 
    if (length(connectionContext) != 1)
       list(
@@ -773,10 +748,7 @@ options(connectionObserver = list(
 
 .rs.addFunction("connectionInstallerCommand", function(driverName, installationPath) {
    connectionContext <- Filter(function(e) {
-      identical(
-         as.character(e$name),
-         gsub(.rs.connectionOdbcRStudioDriver(), "", driverName)
-      )
+      identical(as.character(e$name), driverName)
    }, .rs.connectionReadInstallers())[[1]]
 
    placeholder <-  connectionContext$odbcFile
@@ -830,7 +802,7 @@ options(connectionObserver = list(
 
 .rs.addJsonRpcHandler("uninstall_odbc_driver", function(driverName) {
    tryCatch({
-      defaultInstallPath <- file.path(.rs.connectionOdbcInstallPath(), tolower(driverName))
+      defaultInstallPath <- file.path(.rs.connectionOdbcInstallPath(), driverName)
       defaultInstallExists <- dir.exists(defaultInstallPath)
 
       # delete the driver
diff --git a/src/cpp/session/modules/SessionConnectionsInstaller.R b/src/cpp/session/modules/SessionConnectionsInstaller.R
index 1c44c019fe..a8a02624a2 100644
--- a/src/cpp/session/modules/SessionConnectionsInstaller.R
+++ b/src/cpp/session/modules/SessionConnectionsInstaller.R
@@ -69,38 +69,19 @@
 })
 
 .rs.addFunction("odbcBundleCheckPrereqsUnixodbc", function() {
-   identical(
-      suppressWarnings(
-         system2(
-            "odbcinst",
-            stdout = getOption("odbc.installer.verbose", FALSE),
-            stderr = getOption("odbc.installer.verbose", FALSE)
-         )
-      ),
-      1L
-   )
+   identical(system2("odbcinst", stdout = FALSE), 1L)
 })
 
 .rs.addFunction("odbcBundleCheckPrereqsBrew", function() {
-   identical(
-      suppressWarnings(
-         system2(
-            "brew",
-            stdout = getOption("odbc.installer.verbose", FALSE),
-            stderr = getOption("odbc.installer.verbose", FALSE)
-         )
-      ),
-      1L
-   )
+   identical(system2("brew", stdout = FALSE), 1L)
 })
 
 .rs.addFunction("odbcBundleCheckPrereqsOsx", function() {
    if (!.rs.odbcBundleCheckPrereqsUnixodbc()) {
       if (!.rs.odbcBundleCheckPrereqsBrew()) {
          stop(
-            "unixODBC is required but missing, you can install from http://www.unixodbc.org/. ",
-            "Alternatively, install Brew and RStudio will install unixODBC automatically, ",
-            "you can install Brew by running: ",
+            "Brew is required to install unixODBC. ",
+            "Install Brew by running: ",
             "/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\""
          )
       }
@@ -157,8 +138,7 @@
            "/f",
            paste("/reg:", bitness, sep = "")
         ),
-        stdout = getOption("odbc.installer.verbose", FALSE),
-        stderr = getOption("odbc.installer.verbose", FALSE)
+        stderr = FALSE
      )
 
      if (!validateEntry(entry)) {
@@ -398,8 +378,7 @@
    # Set odbcinst.ini entries
    odbcinst[[name]] <- list(
       paste("Driver", "=", driverPath),
-      paste("Version", "=", version),
-      paste("Installer", "=", "RStudio")
+      paste("Version", "=", version)
    )
    
    # Write odbcinst.ini
@@ -423,11 +402,6 @@
             path = file.path("SOFTWARE", "ODBC", "ODBCINST.INI", name, fsep = "\\"),
             key = "Version",
             value = version
-         ),
-         list(
-            path = file.path("SOFTWARE", "ODBC", "ODBCINST.INI", name, fsep = "\\"),
-            key = "Installer",
-            value = "RStudio"
          )
       )
    )
@@ -441,7 +415,7 @@
    )
    
    osExtension <- osExtensions[[.rs.odbcBundleOsName()]]
-   driverName <- gsub(paste(" |", trimws(.rs.connectionOdbcRStudioDriver()), sep = ""), "", name)
+   driverName <- gsub(" ", "", name)
    
    if (is.null(libraryPattern) || nchar(libraryPattern) == 0) {
       libraryPattern <- paste(
@@ -533,8 +507,4 @@
    message("Installation complete")
 
    invisible(NULL)
-})
-
-.rs.addFunction("connectionOdbcRStudioDriver", function() {
-   " with RStudio Driver"
 })
\ No newline at end of file
diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/SourceWindowManager.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/SourceWindowManager.java
index 1cdde13e07..eb47b28fd1 100644
--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/SourceWindowManager.java
+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/SourceWindowManager.java
@@ -335,7 +335,7 @@ public class SourceWindowManager implements PopoutDocEvent.Handler,
    public String getWindowIdOfDocPath(String path)
    {
       SourceDocument doc = getDocFromPath(path);
-      if (doc == null)
+      if (path == null)
          return null;
       String windowId = doc.getSourceWindowId();
       if (windowId != null)
diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/explorer/view/ObjectExplorerDataGrid.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/explorer/view/ObjectExplorerDataGrid.java
index 0d070ca159..8fe5b7e36d 100644
--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/explorer/view/ObjectExplorerDataGrid.java
+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/explorer/view/ObjectExplorerDataGrid.java
@@ -21,7 +21,6 @@ import org.rstudio.core.client.Debug;
 import org.rstudio.core.client.JsVectorString;
 import org.rstudio.core.client.ListUtil;
 import org.rstudio.core.client.ListUtil.FilterPredicate;
-import org.rstudio.core.client.command.KeyboardShortcut;
 import org.rstudio.core.client.SafeHtmlUtil;
 import org.rstudio.core.client.StringUtil;
 import org.rstudio.core.client.dom.DomUtils;
@@ -696,64 +695,56 @@ public class ObjectExplorerDataGrid
    {
       Event event = Event.getCurrentEvent();
       int code = event.getKeyCode();
-      int modifier = KeyboardShortcut.getModifierValue(event);
       int type = event.getTypeInt();
       int row = getKeyboardSelectedRow();
       boolean isDefault = false;
       
-      if (modifier == 0)
+      if (type == Event.ONKEYDOWN || type == Event.ONKEYPRESS)
       {
-         if (type == Event.ONKEYDOWN || type == Event.ONKEYPRESS)
+         switch (code)
          {
-            switch (code)
-            {
-            case KeyCodes.KEY_UP:
-               selectRowRelative(-1);
-               break;
-
-            case KeyCodes.KEY_DOWN:
-               selectRowRelative(+1);
-               break;
+         case KeyCodes.KEY_UP:
+            selectRowRelative(-1);
+            break;
 
-            case KeyCodes.KEY_PAGEUP:
-               selectRowRelative(-10);
-               break;
+         case KeyCodes.KEY_DOWN:
+            selectRowRelative(+1);
+            break;
 
-            case KeyCodes.KEY_PAGEDOWN:
-               selectRowRelative(+10);
-               break;
+         case KeyCodes.KEY_PAGEUP:
+            selectRowRelative(-10);
+            break;
 
-            case KeyCodes.KEY_LEFT:
-               selectParentOrClose(row);
-               break;
+         case KeyCodes.KEY_PAGEDOWN:
+            selectRowRelative(+10);
+            break;
 
-            case KeyCodes.KEY_RIGHT:
-               selectChildOrOpen(row);
-               break;
+         case KeyCodes.KEY_LEFT:
+            selectParentOrClose(row);
+            break;
 
-            default:
-               isDefault = true;
-               break;
-            }
+         case KeyCodes.KEY_RIGHT:
+            selectChildOrOpen(row);
+            break;
+            
+         default:
+            isDefault = true;
+            break;
          }
-
-         else if (type == Event.ONKEYUP)
+      }
+      
+      else if (type == Event.ONKEYUP)
+      {
+         switch (code)
          {
-            switch (code)
-            {
-            case KeyCodes.KEY_ENTER:
-            case KeyCodes.KEY_SPACE:
-               toggleExpansion(row);
-               break;
+         case KeyCodes.KEY_ENTER:
+         case KeyCodes.KEY_SPACE:
+            toggleExpansion(row);
+            break;
 
-            default:
-               isDefault = true;
-               break;
-            }
-         }
-         else
-         {
+         default:
             isDefault = true;
+            break;
          }
       }
       else
